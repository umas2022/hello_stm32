/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "tmc2209.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */



  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */



  // 定义所有要发送的消息
  const uint8_t msg_setup[][8] = {
      {0x05, 0x00, 0x80, 0x00, 0x00, 0x01, 0xC0, 0xF6},
      {0x05, 0x00, 0x90, 0x00, 0x01, 0x1F, 0x10, 0xDF},
      {0x05, 0x00, 0xEC, 0x10, 0x01, 0x00, 0x53, 0x97},
      {0x05, 0x00, 0xF0, 0xC1, 0x0D, 0x00, 0x24, 0x06},
      {0x05, 0x00, 0xC2, 0x00, 0x00, 0x00, 0x00, 0x45},
      {0x05, 0x00, 0x91, 0x00, 0x00, 0x00, 0x14, 0x1F},
      {0x05, 0x00, 0x93, 0x00, 0x00, 0x00, 0x00, 0x0F},
      {0x05, 0x00, 0xA2, 0x00, 0x00, 0x00, 0x00, 0x0E},
      {0x05, 0x00, 0x94, 0x00, 0x00, 0x00, 0x00, 0x34},
      {0x05, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x8D},
      {0x05, 0x00, 0xC2, 0x00, 0x00, 0x00, 0x00, 0x45},
      {0x05, 0x00, 0x81, 0x00, 0x00, 0x00, 0x02, 0x19},
      {0x05, 0x00, 0x90, 0x00, 0x01, 0x00, 0x00, 0x5B},
      {0x05, 0x00, 0xEC, 0x10, 0x01, 0x00, 0x50, 0xD9},
      {0x05, 0x00, 0xF0, 0xC1, 0x09, 0x00, 0x24, 0x45},
      {0x05, 0x00, 0xF0, 0xC1, 0x01, 0x00, 0x24, 0xE7}
  };

  const uint8_t msg_current[] = {0x05, 0x00, 0x90, 0x00, 0x01, 0x1F, 0x00, 0xE7};
  const uint8_t msg_coolstep[] = {0x05, 0x00, 0xC2, 0x00, 0x00, 0x80, 0x01, 0xD9};
  const uint8_t msg_enable[] = {0x05, 0x00, 0xEC, 0x10, 0x01, 0x00, 0x53, 0x97};

  // 20000
  const uint8_t msg_move[] = {0x05, 0x00, 0xA2, 0x00, 0x00, 0x4E, 0x20, 0x9A};
  // 50000
//  const uint8_t msg_move[] = {0x05, 0x00, 0xA2, 0x00, 0x00, 0xC3, 0x50, 0xEA};
  // 100000
//  const uint8_t msg_move[] = {0x05, 0x00, 0xA2, 0x00, 0x01, 0x86, 0xA0, 0xFE};
  // 200000
//  const uint8_t msg_move[] = {0x05, 0x00, 0xA2, 0x00, 0x03, 0x0D, 0x40, 0xC2};



  void sendRawMessage(UART_HandleTypeDef *huart, const uint8_t *message, size_t length) {
      // 发送消息
      HAL_UART_Transmit(huart, (uint8_t *)message, length, HAL_MAX_DELAY);
  }

  // 发送设置消息（逐条发送）
  for (size_t i = 0; i < sizeof(msg_setup) / sizeof(msg_setup[0]); ++i) {
      sendRawMessage(&huart1, msg_setup[i], sizeof(msg_setup[i]));
      HAL_Delay(10); // 短暂延迟以确保每条消息都被正确接收
  }

  // 发送其他消息
  sendRawMessage(&huart1, msg_current, sizeof(msg_current));
  HAL_Delay(10);

  sendRawMessage(&huart1, msg_coolstep, sizeof(msg_coolstep));
  HAL_Delay(10);

  sendRawMessage(&huart1, msg_enable, sizeof(msg_enable));
  HAL_Delay(10);


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  TMC2209_SetSpeed(200000);
//	  sendRawMessage(&huart1, msg_move, sizeof(msg_move));

      // 可以在这里添加其他代码或延时
      HAL_Delay(1000); // 示例：每100ms更新一次速度

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
