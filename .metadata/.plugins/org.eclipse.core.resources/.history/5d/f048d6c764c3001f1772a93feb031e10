#ifndef TMC2209_STM32_H
#define TMC2209_STM32_H

#include "stm32f4xx_hal.h"


// 速度脉冲间隔
#define SPEED_STEP_DIVISION 10



// 数据报
#define SYNC  0b101
#define RW_READ  0
#define RW_WRITE  1
#define BITS_PER_BYTE 8
#define BYTE_MAX_VALUE 0xFF
#define DATA_SIZE 4
#define WRITE_READ_REPLY_DATAGRAM_SIZE 8
typedef union WriteReadReplyDatagram {
    struct {
        uint64_t sync : 4;              // 位 0-3
        uint64_t reserved : 4;          // 位 4-7
        uint64_t serial_address : 8;    // 位 8-15
        uint64_t register_address : 7;  // 位 16-22
        uint64_t rw : 1;                // 位 23
        uint64_t data : 32;             // 位 24-55
        uint64_t crc : 8;               // 位 56-63
    };
    uint64_t bytes;
} WriteReadReplyDatagram;


// 寄存器：GCONF
#define ADDRESS_GCONF 0x00
typedef union RegisterGlobalConfig {
    struct {
        uint32_t i_scale_analog : 1;      // 位 0
        uint32_t internal_rsense : 1;     // 位 1
        uint32_t enable_spread_cycle : 1; // 位 2
        uint32_t shaft : 1;               // 位 3
        uint32_t index_otpw : 1;          // 位 4
        uint32_t index_step : 1;          // 位 5
        uint32_t pdn_disable : 1;         // 位 6
        uint32_t mstep_reg_select : 1;    // 位 7
        uint32_t multistep_filt : 1;      // 位 8
        uint32_t test_mode : 1;           // 位 9
        uint32_t reserved : 22;           // 保留位
    };
    uint32_t bytes;                       // 整个寄存器作为一个32位无符号整数
} RegisterGlobalConfig;
extern RegisterGlobalConfig register_gconf;

// 设置寄存器GCONF
void setRegisterGCONF(uint8_t uart_instance);


// 寄存器IHOLD_IRUN
#define ADDRESS_COOLCONF 0x10
typedef union RegisterCurrent {
    struct {
        uint32_t ihold : 5;          // 位 0-4: ihold (保持电流)
        uint32_t reserved_0 : 3;     // 位 5-7: 保留位
        uint32_t irun : 5;           // 位 8-12: irun (运行电流)
        uint32_t reserved_1 : 3;     // 位 13-15: 保留位
        uint32_t iholddelay : 4;     // 位 16-19: iholddelay (保持延迟)
        uint32_t reserved_2 : 12;    // 位 20-31: 保留位
    };
    uint32_t bytes;                  // 整个寄存器作为一个32位无符号整数
} RegisterCurrent;
extern RegisterCurrent register_iholdirun;

// 设置寄存器IHOLD_IRUN
void setRegisterIHOLDIRUN(uint8_t uart_instance);


// 寄存器COOLCONF



// 反转数据位
uint32_t reverseData(uint32_t data);
// 计算crc
uint8_t calculate_crc(unsigned char *datagram, size_t length);

// 写寄存器
void write_register(uint8_t uart_instance,uint8_t register_address,uint32_t data);


// 定义电机控制结构体
typedef struct {
	uint32_t targetSteps;     // 目标步数
	uint32_t currentSteps;    // 当前已完成步数
	uint32_t speed;              // 转速 (0-100)
	uint32_t timsCounter;	// 中断总数
	int8_t direction;         // 方向：1为正转，-1为反转
	uint8_t isActive;         // 是否正在运行
	GPIO_TypeDef *port_en;    // 使能端口
	uint16_t pin_en;          // 使能引脚
	GPIO_TypeDef *port_dir;   // 方向端口
	uint16_t pin_dir;         // 方向引脚
	GPIO_TypeDef *port_step;  // 脉冲端口
	uint16_t pin_step;        // 脉冲引脚
	GPIO_TypeDef *port_uart;  // 串口端口
	uint16_t pin_uart;        // 串口引脚
	uint16_t uart_index;  // 串口编号
} StepperMotorControl;

// 外部变量声明
extern StepperMotorControl motors[];

// 初始化电机组
void motors_setup(void);

// 电机运动控制
void TMC2209_startStepperMotor(uint8_t motorIndex, uint32_t steps, uint32_t speed, int8_t direction);

// 电机运动控制定时器中断回调
void TMC2209_stepHandler(void);

// 软件串口发送消息
void TMC2209_sendRawMessage(uint8_t instance, const uint8_t *message, size_t length);

// TMC2209 GCONF 全局配置寄存器初始化
void TMC2209_setGconf(uint8_t instance);

// TMC2209设置电机运行电流100%
void TMC2209_setRunCurrent_100(uint8_t instance);
// TMC2209设置电机运行电流
void TMC2209_setRunCurrent(uint8_t instance, uint8_t percentage);

// TMC2209启用coolstep
void TMC2209_enableCoolStep(uint8_t instance);

// TMC2209设置速度
void TMC2209_moveAtVelocity(uint8_t instance, uint32_t speed);

// TMC2209启用stallguard
void TMC2209_enableStallGuard(uint8_t instance);

// TMC2209设置细分等级
void TMC2209_setMicrostepping(uint8_t instance, uint8_t mres_value);

#endif // TMC2209_STM32_H
