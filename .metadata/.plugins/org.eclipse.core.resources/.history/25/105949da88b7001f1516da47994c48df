#include "stepper_motor.h"
#include "main.h" // 确保包含了必要的硬件初始化（如定时器配置）

// 定义电机数量
#define NUM_MOTORS 1

// 初始化多个电机
StepperMotorControl motors[NUM_MOTORS] = {
    {0, 0, 0, 1, 0,GPIOC, GPIO_PIN_15, GPIOC, GPIO_PIN_13,GPIOC, GPIO_PIN_14}, // Motor 1
//    {0, 0, 0, 1, 0, GPIOD, GPIO_PIN_12}, // Motor 2
//    {0, 0, 0, 1, 0, GPIOA, GPIO_PIN_8},  // Motor 3
//    {0, 0, 0, 1, 0, GPIOB, GPIO_PIN_9}   // Motor 4
};

const uint8_t NUM_MOTORS = sizeof(motors) / sizeof(motors[0]);

// 配置定时器以适应最慢的速度
static void configureTimerForSpeed(float speed) {
    // 这里应根据速度调整定时器周期，具体实现取决于你的硬件和需求
    // 例如，你可以通过修改定时器的预分频值或自动重装载值来改变频率
}

// 启动特定编号的电机
void startStepperMotor(uint8_t motorIndex, uint32_t steps, float speed, int8_t direction) {
    if (motorIndex < NUM_MOTORS) {
        StepperMotorControl *motor = &motors[motorIndex];
        motor->targetSteps = steps;
        motor->currentSteps = 0;
        motor->speed = speed;
        motor->direction = direction;
        motor->isActive = 1;

        // 如果还没有启动定时器，则启动它
        static uint8_t timerStarted = 0;
        if (!timerStarted) {
            configureTimerForSpeed(speed); // 根据最慢的速度配置定时器
            HAL_TIM_Base_Start_IT(&htim5);
            timerStarted = 1;
        }
    }
}

// 定时器周期结束回调函数
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
    if (htim->Instance == TIM5) {
        for (uint8_t i = 0; i < NUM_MOTORS; ++i) {
            StepperMotorControl *motor = &motors[i];
            if (motor->isActive) {
                // 切换对应电机的引脚状态以产生脉冲
                HAL_GPIO_TogglePin(motor->port, motor->pin);

                // 更新步数计数器
                motor->currentSteps += motor->direction;

                // 检查是否达到目标步数
                if ((motor->direction > 0 && motor->currentSteps >= motor->targetSteps) ||
                    (motor->direction < 0 && motor->currentSteps <= 0)) {
                    motor->isActive = 0;
                    // 可选: 执行完成后的回调或通知主程序
                }
            }
        }

        // 如果没有电机正在运行，可以选择停止定时器
        uint8_t anyActive = 0;
        for (uint8_t i = 0; i < NUM_MOTORS; ++i) {
            if (motors[i].isActive) {
                anyActive = 1;
                break;
            }
        }
        if (!anyActive) {
            HAL_TIM_Base_Stop_IT(&htim5);
        }
    }
}
