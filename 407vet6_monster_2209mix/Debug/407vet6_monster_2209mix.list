
407vet6_monster_2209mix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c08  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08002d90  08002d90  00003d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e50  08002e50  0000403c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e50  08002e50  00003e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e58  08002e58  0000403c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e58  08002e58  00003e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e5c  08002e5c  00003e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  08002e60  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000403c  2**0
                  CONTENTS
 10 .bss          00000134  2000003c  2000003c  0000403c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000170  20000170  0000403c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009bda  00000000  00000000  0000406c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a39  00000000  00000000  0000dc46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a90  00000000  00000000  0000f680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000823  00000000  00000000  00010110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020185  00000000  00000000  00010933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c2ff  00000000  00000000  00030ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c856b  00000000  00000000  0003cdb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00105322  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002bf0  00000000  00000000  00105368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  00107f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000003c 	.word	0x2000003c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002d78 	.word	0x08002d78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000040 	.word	0x20000040
 80001c4:	08002d78 	.word	0x08002d78

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// 定时器中断
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	// 软件串口
	if (htim->Instance == TIM5) {
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a07      	ldr	r2, [pc, #28]	@ (80004e4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d101      	bne.n	80004ce <HAL_TIM_PeriodElapsedCallback+0x16>
		SoftUartHandler();
 80004ca:	f002 f99d 	bl	8002808 <SoftUartHandler>
	}
	// 脉冲驱动
	if (htim->Instance == TIM5) {
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a04      	ldr	r2, [pc, #16]	@ (80004e4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d101      	bne.n	80004dc <HAL_TIM_PeriodElapsedCallback+0x24>
		TMC2209_stepHandler();
 80004d8:	f002 face 	bl	8002a78 <TMC2209_stepHandler>
	}
}
 80004dc:	bf00      	nop
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40000c00 	.word	0x40000c00

080004e8 <HAL_GPIO_EXTI_Callback>:

// 外部中断
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_14) {
 80004f2:	88fb      	ldrh	r3, [r7, #6]
 80004f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80004f8:	d105      	bne.n	8000506 <HAL_GPIO_EXTI_Callback+0x1e>
		// 堵转检测
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80004fa:	2201      	movs	r2, #1
 80004fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000500:	4803      	ldr	r0, [pc, #12]	@ (8000510 <HAL_GPIO_EXTI_Callback+0x28>)
 8000502:	f000 fdfb 	bl	80010fc <HAL_GPIO_WritePin>
	}
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40020800 	.word	0x40020800

08000514 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000518:	f000 fa94 	bl	8000a44 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800051c:	f000 f82c 	bl	8000578 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000520:	f000 f914 	bl	800074c <MX_GPIO_Init>
	MX_TIM5_Init();
 8000524:	f000 f892 	bl	800064c <MX_TIM5_Init>
	MX_TIM6_Init();
 8000528:	f000 f8dc 	bl	80006e4 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */

	// 启动串口定时器
	if (HAL_TIM_Base_Start_IT(&htim5) != HAL_OK) {
 800052c:	480f      	ldr	r0, [pc, #60]	@ (800056c <main+0x58>)
 800052e:	f001 faa5 	bl	8001a7c <HAL_TIM_Base_Start_IT>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <main+0x28>
		Error_Handler();
 8000538:	f000 f988 	bl	800084c <Error_Handler>
	}
	// 启动脉冲定时器
	if (HAL_TIM_Base_Start_IT(&htim6) != HAL_OK) {
 800053c:	480c      	ldr	r0, [pc, #48]	@ (8000570 <main+0x5c>)
 800053e:	f001 fa9d 	bl	8001a7c <HAL_TIM_Base_Start_IT>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <main+0x38>
		Error_Handler();
 8000548:	f000 f980 	bl	800084c <Error_Handler>
	}

	// 初始化电机组
	motors_setup();
 800054c:	f002 f9ba 	bl	80028c4 <motors_setup>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		TMC2209_startStepperMotor(0, 200*512, 400, 1);
 8000550:	2201      	movs	r2, #1
 8000552:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8000574 <main+0x60>
 8000556:	f44f 31c8 	mov.w	r1, #102400	@ 0x19000
 800055a:	2000      	movs	r0, #0
 800055c:	f002 fa42 	bl	80029e4 <TMC2209_startStepperMotor>
		HAL_Delay(2000);
 8000560:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000564:	f000 fae0 	bl	8000b28 <HAL_Delay>
		TMC2209_startStepperMotor(0, 200*512, 400, 1);
 8000568:	bf00      	nop
 800056a:	e7f1      	b.n	8000550 <main+0x3c>
 800056c:	20000058 	.word	0x20000058
 8000570:	200000a0 	.word	0x200000a0
 8000574:	43c80000 	.word	0x43c80000

08000578 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	@ 0x50
 800057c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	2230      	movs	r2, #48	@ 0x30
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f002 fbbc 	bl	8002d04 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	4b28      	ldr	r3, [pc, #160]	@ (8000644 <SystemClock_Config+0xcc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	4a27      	ldr	r2, [pc, #156]	@ (8000644 <SystemClock_Config+0xcc>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80005ac:	4b25      	ldr	r3, [pc, #148]	@ (8000644 <SystemClock_Config+0xcc>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b22      	ldr	r3, [pc, #136]	@ (8000648 <SystemClock_Config+0xd0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a21      	ldr	r2, [pc, #132]	@ (8000648 <SystemClock_Config+0xd0>)
 80005c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000648 <SystemClock_Config+0xd0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d4:	2302      	movs	r3, #2
 80005d6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005dc:	2310      	movs	r3, #16
 80005de:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e0:	2302      	movs	r3, #2
 80005e2:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e4:	2300      	movs	r3, #0
 80005e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80005e8:	2308      	movs	r3, #8
 80005ea:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 80005ec:	2348      	movs	r3, #72	@ 0x48
 80005ee:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80005f4:	2304      	movs	r3, #4
 80005f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005f8:	f107 0320 	add.w	r3, r7, #32
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fdc9 	bl	8001194 <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x94>
		Error_Handler();
 8000608:	f000 f920 	bl	800084c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800060c:	230f      	movs	r3, #15
 800060e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000610:	2302      	movs	r3, #2
 8000612:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000618:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800061c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800061e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000622:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2102      	movs	r1, #2
 800062a:	4618      	mov	r0, r3
 800062c:	f001 f82a 	bl	8001684 <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xc2>
		Error_Handler();
 8000636:	f000 f909 	bl	800084c <Error_Handler>
	}
}
 800063a:	bf00      	nop
 800063c:	3750      	adds	r7, #80	@ 0x50
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000660:	463b      	mov	r3, r7
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8000668:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <MX_TIM5_Init+0x90>)
 800066a:	4a1d      	ldr	r2, [pc, #116]	@ (80006e0 <MX_TIM5_Init+0x94>)
 800066c:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 75 - 1;
 800066e:	4b1b      	ldr	r3, [pc, #108]	@ (80006dc <MX_TIM5_Init+0x90>)
 8000670:	224a      	movs	r2, #74	@ 0x4a
 8000672:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000674:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <MX_TIM5_Init+0x90>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 10 - 1;
 800067a:	4b18      	ldr	r3, [pc, #96]	@ (80006dc <MX_TIM5_Init+0x90>)
 800067c:	2209      	movs	r2, #9
 800067e:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000680:	4b16      	ldr	r3, [pc, #88]	@ (80006dc <MX_TIM5_Init+0x90>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000686:	4b15      	ldr	r3, [pc, #84]	@ (80006dc <MX_TIM5_Init+0x90>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 800068c:	4813      	ldr	r0, [pc, #76]	@ (80006dc <MX_TIM5_Init+0x90>)
 800068e:	f001 f9a5 	bl	80019dc <HAL_TIM_Base_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM5_Init+0x50>
		Error_Handler();
 8000698:	f000 f8d8 	bl	800084c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800069c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 80006a2:	f107 0308 	add.w	r3, r7, #8
 80006a6:	4619      	mov	r1, r3
 80006a8:	480c      	ldr	r0, [pc, #48]	@ (80006dc <MX_TIM5_Init+0x90>)
 80006aa:	f001 fb47 	bl	8001d3c <HAL_TIM_ConfigClockSource>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM5_Init+0x6c>
		Error_Handler();
 80006b4:	f000 f8ca 	bl	800084c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b8:	2300      	movs	r3, #0
 80006ba:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 80006c0:	463b      	mov	r3, r7
 80006c2:	4619      	mov	r1, r3
 80006c4:	4805      	ldr	r0, [pc, #20]	@ (80006dc <MX_TIM5_Init+0x90>)
 80006c6:	f001 fd6f 	bl	80021a8 <HAL_TIMEx_MasterConfigSynchronization>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM5_Init+0x88>
			!= HAL_OK) {
		Error_Handler();
 80006d0:	f000 f8bc 	bl	800084c <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000058 	.word	0x20000058
 80006e0:	40000c00 	.word	0x40000c00

080006e4 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80006ea:	463b      	mov	r3, r7
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80006f2:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <MX_TIM6_Init+0x60>)
 80006f4:	4a14      	ldr	r2, [pc, #80]	@ (8000748 <MX_TIM6_Init+0x64>)
 80006f6:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 72 - 1;
 80006f8:	4b12      	ldr	r3, [pc, #72]	@ (8000744 <MX_TIM6_Init+0x60>)
 80006fa:	2247      	movs	r2, #71	@ 0x47
 80006fc:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fe:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <MX_TIM6_Init+0x60>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 100 - 1;
 8000704:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <MX_TIM6_Init+0x60>)
 8000706:	2263      	movs	r2, #99	@ 0x63
 8000708:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <MX_TIM6_Init+0x60>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8000710:	480c      	ldr	r0, [pc, #48]	@ (8000744 <MX_TIM6_Init+0x60>)
 8000712:	f001 f963 	bl	80019dc <HAL_TIM_Base_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM6_Init+0x3c>
		Error_Handler();
 800071c:	f000 f896 	bl	800084c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000720:	2300      	movs	r3, #0
 8000722:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8000728:	463b      	mov	r3, r7
 800072a:	4619      	mov	r1, r3
 800072c:	4805      	ldr	r0, [pc, #20]	@ (8000744 <MX_TIM6_Init+0x60>)
 800072e:	f001 fd3b 	bl	80021a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM6_Init+0x58>
			!= HAL_OK) {
		Error_Handler();
 8000738:	f000 f888 	bl	800084c <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200000a0 	.word	0x200000a0
 8000748:	40001000 	.word	0x40001000

0800074c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b088      	sub	sp, #32
 8000750:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	4b35      	ldr	r3, [pc, #212]	@ (800083c <MX_GPIO_Init+0xf0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a34      	ldr	r2, [pc, #208]	@ (800083c <MX_GPIO_Init+0xf0>)
 800076c:	f043 0310 	orr.w	r3, r3, #16
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b32      	ldr	r3, [pc, #200]	@ (800083c <MX_GPIO_Init+0xf0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0310 	and.w	r3, r3, #16
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b2e      	ldr	r3, [pc, #184]	@ (800083c <MX_GPIO_Init+0xf0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a2d      	ldr	r2, [pc, #180]	@ (800083c <MX_GPIO_Init+0xf0>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b2b      	ldr	r3, [pc, #172]	@ (800083c <MX_GPIO_Init+0xf0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	4b27      	ldr	r3, [pc, #156]	@ (800083c <MX_GPIO_Init+0xf0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a26      	ldr	r2, [pc, #152]	@ (800083c <MX_GPIO_Init+0xf0>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b24      	ldr	r3, [pc, #144]	@ (800083c <MX_GPIO_Init+0xf0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(d0_uart_GPIO_Port, d0_uart_Pin, GPIO_PIN_SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	2140      	movs	r1, #64	@ 0x40
 80007ba:	4821      	ldr	r0, [pc, #132]	@ (8000840 <MX_GPIO_Init+0xf4>)
 80007bc:	f000 fc9e 	bl	80010fc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, do_dir_Pin | d0_step_Pin | d0_en_Pin,
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80007c6:	481f      	ldr	r0, [pc, #124]	@ (8000844 <MX_GPIO_Init+0xf8>)
 80007c8:	f000 fc98 	bl	80010fc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : d0_uart_Pin */
	GPIO_InitStruct.Pin = d0_uart_Pin;
 80007cc:	2340      	movs	r3, #64	@ 0x40
 80007ce:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d8:	2303      	movs	r3, #3
 80007da:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(d0_uart_GPIO_Port, &GPIO_InitStruct);
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	4619      	mov	r1, r3
 80007e2:	4817      	ldr	r0, [pc, #92]	@ (8000840 <MX_GPIO_Init+0xf4>)
 80007e4:	f000 fad6 	bl	8000d94 <HAL_GPIO_Init>

	/*Configure GPIO pins : do_dir_Pin d0_step_Pin d0_en_Pin */
	GPIO_InitStruct.Pin = do_dir_Pin | d0_step_Pin | d0_en_Pin;
 80007e8:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80007ec:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	4619      	mov	r1, r3
 8000800:	4810      	ldr	r0, [pc, #64]	@ (8000844 <MX_GPIO_Init+0xf8>)
 8000802:	f000 fac7 	bl	8000d94 <HAL_GPIO_Init>

	/*Configure GPIO pin : d0_diag_Pin */
	GPIO_InitStruct.Pin = d0_diag_Pin;
 8000806:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800080a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000810:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000812:	2302      	movs	r3, #2
 8000814:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(d0_diag_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	4619      	mov	r1, r3
 800081c:	480a      	ldr	r0, [pc, #40]	@ (8000848 <MX_GPIO_Init+0xfc>)
 800081e:	f000 fab9 	bl	8000d94 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	2028      	movs	r0, #40	@ 0x28
 8000828:	f000 fa7d 	bl	8000d26 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800082c:	2028      	movs	r0, #40	@ 0x28
 800082e:	f000 fa96 	bl	8000d5e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000832:	bf00      	nop
 8000834:	3720      	adds	r7, #32
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800
 8000840:	40021000 	.word	0x40021000
 8000844:	40020800 	.word	0x40020800
 8000848:	40020000 	.word	0x40020000

0800084c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <Error_Handler+0x8>

08000858 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b10      	ldr	r3, [pc, #64]	@ (80008a4 <HAL_MspInit+0x4c>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000866:	4a0f      	ldr	r2, [pc, #60]	@ (80008a4 <HAL_MspInit+0x4c>)
 8000868:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800086c:	6453      	str	r3, [r2, #68]	@ 0x44
 800086e:	4b0d      	ldr	r3, [pc, #52]	@ (80008a4 <HAL_MspInit+0x4c>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000872:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <HAL_MspInit+0x4c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000882:	4a08      	ldr	r2, [pc, #32]	@ (80008a4 <HAL_MspInit+0x4c>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000888:	6413      	str	r3, [r2, #64]	@ 0x40
 800088a:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <HAL_MspInit+0x4c>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800

080008a8 <HAL_TIM_Base_MspInit>:
 * @brief TIM_Base MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	if (htim_base->Instance == TIM5) {
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a1c      	ldr	r2, [pc, #112]	@ (8000928 <HAL_TIM_Base_MspInit+0x80>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d116      	bne.n	80008e8 <HAL_TIM_Base_MspInit+0x40>
		/* USER CODE BEGIN TIM5_MspInit 0 */

		/* USER CODE END TIM5_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM5_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b1b      	ldr	r3, [pc, #108]	@ (800092c <HAL_TIM_Base_MspInit+0x84>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c2:	4a1a      	ldr	r2, [pc, #104]	@ (800092c <HAL_TIM_Base_MspInit+0x84>)
 80008c4:	f043 0308 	orr.w	r3, r3, #8
 80008c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ca:	4b18      	ldr	r3, [pc, #96]	@ (800092c <HAL_TIM_Base_MspInit+0x84>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ce:	f003 0308 	and.w	r3, r3, #8
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
		/* TIM5 interrupt Init */
		HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	2032      	movs	r0, #50	@ 0x32
 80008dc:	f000 fa23 	bl	8000d26 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80008e0:	2032      	movs	r0, #50	@ 0x32
 80008e2:	f000 fa3c 	bl	8000d5e <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM6_MspInit 1 */

		/* USER CODE END TIM6_MspInit 1 */
	}

}
 80008e6:	e01a      	b.n	800091e <HAL_TIM_Base_MspInit+0x76>
	} else if (htim_base->Instance == TIM6) {
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a10      	ldr	r2, [pc, #64]	@ (8000930 <HAL_TIM_Base_MspInit+0x88>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d115      	bne.n	800091e <HAL_TIM_Base_MspInit+0x76>
		__HAL_RCC_TIM6_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <HAL_TIM_Base_MspInit+0x84>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fa:	4a0c      	ldr	r2, [pc, #48]	@ (800092c <HAL_TIM_Base_MspInit+0x84>)
 80008fc:	f043 0310 	orr.w	r3, r3, #16
 8000900:	6413      	str	r3, [r2, #64]	@ 0x40
 8000902:	4b0a      	ldr	r3, [pc, #40]	@ (800092c <HAL_TIM_Base_MspInit+0x84>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000906:	f003 0310 	and.w	r3, r3, #16
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2100      	movs	r1, #0
 8000912:	2036      	movs	r0, #54	@ 0x36
 8000914:	f000 fa07 	bl	8000d26 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000918:	2036      	movs	r0, #54	@ 0x36
 800091a:	f000 fa20 	bl	8000d5e <HAL_NVIC_EnableIRQ>
}
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40000c00 	.word	0x40000c00
 800092c:	40023800 	.word	0x40023800
 8000930:	40001000 	.word	0x40001000

08000934 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <NMI_Handler+0x4>

0800093c <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <HardFault_Handler+0x4>

08000944 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <MemManage_Handler+0x4>

0800094c <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <BusFault_Handler+0x4>

08000954 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <UsageFault_Handler+0x4>

0800095c <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000986:	b580      	push	{r7, lr}
 8000988:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800098a:	f000 f8ad 	bl	8000ae8 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}

08000992 <EXTI15_10_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) {
 8000992:	b580      	push	{r7, lr}
 8000994:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(d0_diag_Pin);
 8000996:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800099a:	f000 fbe3 	bl	8001164 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <TIM5_IRQHandler>:

/**
 * @brief This function handles TIM5 global interrupt.
 */
void TIM5_IRQHandler(void) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM5_IRQn 0 */

	/* USER CODE END TIM5_IRQn 0 */
	HAL_TIM_IRQHandler(&htim5);
 80009a8:	4802      	ldr	r0, [pc, #8]	@ (80009b4 <TIM5_IRQHandler+0x10>)
 80009aa:	f001 f8d7 	bl	8001b5c <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM5_IRQn 1 */

	/* USER CODE END TIM5_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000058 	.word	0x20000058

080009b8 <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 80009bc:	4802      	ldr	r0, [pc, #8]	@ (80009c8 <TIM6_DAC_IRQHandler+0x10>)
 80009be:	f001 f8cd 	bl	8001b5c <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200000a0 	.word	0x200000a0

080009cc <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory 
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <SystemInit+0x20>)
 80009d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009d6:	4a05      	ldr	r2, [pc, #20]	@ (80009ec <SystemInit+0x20>)
 80009d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a28 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009f4:	f7ff ffea 	bl	80009cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009f8:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009fa:	490d      	ldr	r1, [pc, #52]	@ (8000a30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a00:	e002      	b.n	8000a08 <LoopCopyDataInit>

08000a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a06:	3304      	adds	r3, #4

08000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a0c:	d3f9      	bcc.n	8000a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a10:	4c0a      	ldr	r4, [pc, #40]	@ (8000a3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a14:	e001      	b.n	8000a1a <LoopFillZerobss>

08000a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a18:	3204      	adds	r2, #4

08000a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a1c:	d3fb      	bcc.n	8000a16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a1e:	f002 f979 	bl	8002d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a22:	f7ff fd77 	bl	8000514 <main>
  bx  lr    
 8000a26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a30:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000a34:	08002e60 	.word	0x08002e60
  ldr r2, =_sbss
 8000a38:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000a3c:	20000170 	.word	0x20000170

08000a40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a40:	e7fe      	b.n	8000a40 <ADC_IRQHandler>
	...

08000a44 <HAL_Init>:
 * @note   SysTick is used as time base for the HAL_Delay() function, the application
 *         need to ensure that the SysTick time base is always set to 1 millisecond
 *         to have correct HAL operation.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	/* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a48:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a84 <HAL_Init+0x40>)
 8000a4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
	__HAL_FLASH_DATA_CACHE_ENABLE();
 8000a54:	4b0b      	ldr	r3, [pc, #44]	@ (8000a84 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0a      	ldr	r2, [pc, #40]	@ (8000a84 <HAL_Init+0x40>)
 8000a5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a60:	4b08      	ldr	r3, [pc, #32]	@ (8000a84 <HAL_Init+0x40>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a07      	ldr	r2, [pc, #28]	@ (8000a84 <HAL_Init+0x40>)
 8000a66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

	/* Set Interrupt Group Priority */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a6c:	2003      	movs	r0, #3
 8000a6e:	f000 f94f 	bl	8000d10 <HAL_NVIC_SetPriorityGrouping>

	/* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
	HAL_InitTick(TICK_INT_PRIORITY);
 8000a72:	200f      	movs	r0, #15
 8000a74:	f000 f808 	bl	8000a88 <HAL_InitTick>

	/* Init the low level hardware */
	HAL_MspInit();
 8000a78:	f7ff feee 	bl	8000858 <HAL_MspInit>

	/* Return function status */
	return HAL_OK;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023c00 	.word	0x40023c00

08000a88 <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	/* Configure the SysTick to have interrupt in 1ms time basis*/
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 8000a90:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <HAL_InitTick+0x54>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b12      	ldr	r3, [pc, #72]	@ (8000ae0 <HAL_InitTick+0x58>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 f967 	bl	8000d7a <HAL_SYSTICK_Config>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <HAL_InitTick+0x2e>
		return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00e      	b.n	8000ad4 <HAL_InitTick+0x4c>
	}

	/* Configure the SysTick IRQ priority */
	if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b0f      	cmp	r3, #15
 8000aba:	d80a      	bhi.n	8000ad2 <HAL_InitTick+0x4a>
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000abc:	2200      	movs	r2, #0
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f000 f92f 	bl	8000d26 <HAL_NVIC_SetPriority>
		uwTickPrio = TickPriority;
 8000ac8:	4a06      	ldr	r2, [pc, #24]	@ (8000ae4 <HAL_InitTick+0x5c>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6013      	str	r3, [r2, #0]
	} else {
		return HAL_ERROR;
	}

	/* Return function status */
	return HAL_OK;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e000      	b.n	8000ad4 <HAL_InitTick+0x4c>
		return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	20000004 	.word	0x20000004

08000ae8 <HAL_IncTick>:
 *       in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other 
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
	uwTick += uwTickFreq;
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <HAL_IncTick+0x20>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <HAL_IncTick+0x24>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	4a04      	ldr	r2, [pc, #16]	@ (8000b0c <HAL_IncTick+0x24>)
 8000afa:	6013      	str	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	200000e8 	.word	0x200000e8

08000b10 <HAL_GetTick>:
 * @brief Provides a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other 
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
	return uwTick;
 8000b14:	4b03      	ldr	r3, [pc, #12]	@ (8000b24 <HAL_GetTick+0x14>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	200000e8 	.word	0x200000e8

08000b28 <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 8000b30:	f7ff ffee 	bl	8000b10 <HAL_GetTick>
 8000b34:	60b8      	str	r0, [r7, #8]
	uint32_t wait = Delay;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60fb      	str	r3, [r7, #12]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY) {
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b40:	d005      	beq.n	8000b4e <HAL_Delay+0x26>
		wait += (uint32_t) (uwTickFreq);
 8000b42:	4b0a      	ldr	r3, [pc, #40]	@ (8000b6c <HAL_Delay+0x44>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	461a      	mov	r2, r3
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 8000b4e:	bf00      	nop
 8000b50:	f7ff ffde 	bl	8000b10 <HAL_GetTick>
 8000b54:	4602      	mov	r2, r0
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d8f7      	bhi.n	8000b50 <HAL_Delay+0x28>
	}
}
 8000b60:	bf00      	nop
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000008 	.word	0x20000008

08000b70 <__NVIC_SetPriorityGrouping>:
	 Only values from 0..7 are used.
	 In case of a conflict between priority grouping and available
	 priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
	 \param [in]      PriorityGroup  Priority grouping field.
	 */
	__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
		uint32_t reg_value;
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	60fb      	str	r3, [r7, #12]

		reg_value = SCB->AIRCR; /* read old register configuration    */
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	60bb      	str	r3, [r7, #8]
		reg_value &= ~((uint32_t) (SCB_AIRCR_VECTKEY_Msk
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60bb      	str	r3, [r7, #8]
				| SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
				| (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)); /* Insert write key and priority group */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	021a      	lsls	r2, r3, #8
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	4313      	orrs	r3, r2
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
 8000b98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ba0:	60bb      	str	r3, [r7, #8]
		SCB->AIRCR = reg_value;
 8000ba2:	4a04      	ldr	r2, [pc, #16]	@ (8000bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	60d3      	str	r3, [r2, #12]
	}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_GetPriorityGrouping>:
	/**
	 \brief   Get Priority Grouping
	 \details Reads the priority grouping field from the NVIC Interrupt Controller.
	 \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
	 */
	__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void) {
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
		return ((uint32_t) ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk)
 8000bbc:	4b04      	ldr	r3, [pc, #16]	@ (8000bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	0a1b      	lsrs	r3, r3, #8
 8000bc2:	f003 0307 	and.w	r3, r3, #7
				>> SCB_AIRCR_PRIGROUP_Pos));
	}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_EnableIRQ>:
	 \brief   Enable Interrupt
	 \details Enables a device specific interrupt in the NVIC interrupt controller.
	 \param [in]      IRQn  Device specific interrupt number.
	 \note    IRQn must not be negative.
	 */
	__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn) {
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	db0b      	blt.n	8000bfe <__NVIC_EnableIRQ+0x2a>
			__COMPILER_BARRIER();
			NVIC->ISER[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL
					<< (((uint32_t) IRQn) & 0x1FUL));
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	f003 021f 	and.w	r2, r3, #31
			NVIC->ISER[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL
 8000bec:	4907      	ldr	r1, [pc, #28]	@ (8000c0c <__NVIC_EnableIRQ+0x38>)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	095b      	lsrs	r3, r3, #5
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			__COMPILER_BARRIER();
		}
	}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000e100 	.word	0xe000e100

08000c10 <__NVIC_SetPriority>:
	 or negative to specify a processor exception.
	 \param [in]      IRQn  Interrupt number.
	 \param [in]  priority  Priority to set.
	 \note    The priority cannot be set for every processor exception.
	 */
	__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority) {
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 8000c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	db0a      	blt.n	8000c3a <__NVIC_SetPriority+0x2a>
			NVIC->IP[((uint32_t) IRQn)] = (uint8_t) ((priority
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	490c      	ldr	r1, [pc, #48]	@ (8000c5c <__NVIC_SetPriority+0x4c>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	0112      	lsls	r2, r2, #4
 8000c30:	b2d2      	uxtb	r2, r2
 8000c32:	440b      	add	r3, r1
 8000c34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
					<< (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL);
		} else {
			SCB->SHP[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority
					<< (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL);
		}
	}
 8000c38:	e00a      	b.n	8000c50 <__NVIC_SetPriority+0x40>
			SCB->SHP[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4908      	ldr	r1, [pc, #32]	@ (8000c60 <__NVIC_SetPriority+0x50>)
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	3b04      	subs	r3, #4
 8000c48:	0112      	lsls	r2, r2, #4
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	440b      	add	r3, r1
 8000c4e:	761a      	strb	r2, [r3, #24]
	}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000e100 	.word	0xe000e100
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <NVIC_EncodePriority>:
	 \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
	 \param [in]       SubPriority  Subpriority value (starting from 0).
	 \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
	 */
	__STATIC_INLINE uint32_t NVIC_EncodePriority(uint32_t PriorityGroup,
			uint32_t PreemptPriority, uint32_t SubPriority) {
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	@ 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	61fb      	str	r3, [r7, #28]
		uint32_t PreemptPriorityBits;
		uint32_t SubPriorityBits;

		PreemptPriorityBits =
				((7UL - PriorityGroupTmp) > (uint32_t) (__NVIC_PRIO_BITS)) ?
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	f1c3 0307 	rsb	r3, r3, #7
		PreemptPriorityBits =
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	bf28      	it	cs
 8000c82:	2304      	movcs	r3, #4
 8000c84:	61bb      	str	r3, [r7, #24]
						(uint32_t) (__NVIC_PRIO_BITS) :
						(uint32_t) (7UL - PriorityGroupTmp);
		SubPriorityBits =
				((PriorityGroupTmp + (uint32_t) (__NVIC_PRIO_BITS))
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3304      	adds	r3, #4
						< (uint32_t) 7UL) ?
						(uint32_t) 0UL :
 8000c8a:	2b06      	cmp	r3, #6
 8000c8c:	d902      	bls.n	8000c94 <NVIC_EncodePriority+0x30>
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3b03      	subs	r3, #3
 8000c92:	e000      	b.n	8000c96 <NVIC_EncodePriority+0x32>
 8000c94:	2300      	movs	r3, #0
		SubPriorityBits =
 8000c96:	617b      	str	r3, [r7, #20]
						(uint32_t) ((PriorityGroupTmp - 7UL)
								+ (uint32_t) (__NVIC_PRIO_BITS));

		return (((PreemptPriority
				& (uint32_t) ((1UL << (PreemptPriorityBits)) - 1UL))
 8000c98:	f04f 32ff 	mov.w	r2, #4294967295
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43da      	mvns	r2, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	401a      	ands	r2, r3
				<< SubPriorityBits)
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	409a      	lsls	r2, r3
				| ((SubPriority & (uint32_t) ((1UL << (SubPriorityBits)) - 1UL))));
 8000cac:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	43d9      	mvns	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	400b      	ands	r3, r1
 8000cbc:	4313      	orrs	r3, r2
	}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3724      	adds	r7, #36	@ 0x24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
	...

08000ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cdc:	d301      	bcc.n	8000ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00f      	b.n	8000d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <SysTick_Config+0x40>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cea:	210f      	movs	r1, #15
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f7ff ff8e 	bl	8000c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf4:	4b05      	ldr	r3, [pc, #20]	@ (8000d0c <SysTick_Config+0x40>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfa:	4b04      	ldr	r3, [pc, #16]	@ (8000d0c <SysTick_Config+0x40>)
 8000cfc:	2207      	movs	r2, #7
 8000cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	e000e010 	.word	0xe000e010

08000d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f7ff ff29 	bl	8000b70 <__NVIC_SetPriorityGrouping>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b086      	sub	sp, #24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
 8000d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d38:	f7ff ff3e 	bl	8000bb8 <__NVIC_GetPriorityGrouping>
 8000d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	68b9      	ldr	r1, [r7, #8]
 8000d42:	6978      	ldr	r0, [r7, #20]
 8000d44:	f7ff ff8e 	bl	8000c64 <NVIC_EncodePriority>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4e:	4611      	mov	r1, r2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff5d 	bl	8000c10 <__NVIC_SetPriority>
}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	4603      	mov	r3, r0
 8000d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff31 	bl	8000bd4 <__NVIC_EnableIRQ>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f7ff ffa2 	bl	8000ccc <SysTick_Config>
 8000d88:	4603      	mov	r3, r0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <HAL_GPIO_Init>:
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8000d94:	b480      	push	{r7}
 8000d96:	b089      	sub	sp, #36	@ 0x24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
	uint32_t position;
	uint32_t ioposition = 0x00U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
	uint32_t iocurrent = 0x00U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
	uint32_t temp = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61bb      	str	r3, [r7, #24]
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	for (position = 0U; position < GPIO_NUMBER; position++) {
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
 8000dae:	e16b      	b.n	8001088 <HAL_GPIO_Init+0x2f4>
		/* Get the IO position */
		ioposition = 0x01U << position;
 8000db0:	2201      	movs	r2, #1
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	617b      	str	r3, [r7, #20]
		/* Get the current IO position */
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]

		if (iocurrent == ioposition) {
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	f040 815a 	bne.w	8001082 <HAL_GPIO_Init+0x2ee>
			/*--------------------- GPIO Mode Configuration ------------------------*/
			/* In case of Output or Alternate function mode selection */
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 0303 	and.w	r3, r3, #3
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d005      	beq.n	8000de6 <HAL_GPIO_Init+0x52>
					|| (GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d130      	bne.n	8000e48 <HAL_GPIO_Init+0xb4>
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	2203      	movs	r2, #3
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43db      	mvns	r3, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
				temp |= (GPIO_Init->Speed << (position * 2U));
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	68da      	ldr	r2, [r3, #12]
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
				GPIOx->OSPEEDR = temp;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	609a      	str	r2, [r3, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	091b      	lsrs	r3, r3, #4
 8000e32:	f003 0201 	and.w	r2, r3, #1
						<< position);
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
				GPIOx->OTYPER = temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	605a      	str	r2, [r3, #4]
			}

			if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0303 	and.w	r3, r3, #3
 8000e50:	2b03      	cmp	r3, #3
 8000e52:	d017      	beq.n	8000e84 <HAL_GPIO_Init+0xf0>
				/* Check the parameters */
				assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

				/* Activate the Pull-up or Pull down resistor for the current IO */
				temp = GPIOx->PUPDR;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	2203      	movs	r2, #3
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
				temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	689a      	ldr	r2, [r3, #8]
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
				GPIOx->PUPDR = temp;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	60da      	str	r2, [r3, #12]
			}

			/* In case of Alternate function mode selection */
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0303 	and.w	r3, r3, #3
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d123      	bne.n	8000ed8 <HAL_GPIO_Init+0x144>
				/* Check the Alternate function parameter */
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3U];
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	08da      	lsrs	r2, r3, #3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3208      	adds	r2, #8
 8000e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e9c:	61bb      	str	r3, [r7, #24]
				temp &= ~(0xFU << ((uint32_t) (position & 0x07U) * 4U));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	f003 0307 	and.w	r3, r3, #7
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	220f      	movs	r2, #15
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	691a      	ldr	r2, [r3, #16]
						<< (((uint32_t) position & 0x07U) * 4U));
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
				GPIOx->AFR[position >> 3U] = temp;
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	08da      	lsrs	r2, r3, #3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3208      	adds	r2, #8
 8000ed2:	69b9      	ldr	r1, [r7, #24]
 8000ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}

			/* Configure IO Direction mode (Input, Output, Alternate or Analog) */
			temp = GPIOx->MODER;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	61bb      	str	r3, [r7, #24]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0203 	and.w	r2, r3, #3
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
			GPIOx->MODER = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	601a      	str	r2, [r3, #0]

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U) {
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	f000 80b4 	beq.w	8001082 <HAL_GPIO_Init+0x2ee>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b60      	ldr	r3, [pc, #384]	@ (80010a0 <HAL_GPIO_Init+0x30c>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f22:	4a5f      	ldr	r2, [pc, #380]	@ (80010a0 <HAL_GPIO_Init+0x30c>)
 8000f24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f2a:	4b5d      	ldr	r3, [pc, #372]	@ (80010a0 <HAL_GPIO_Init+0x30c>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]

				temp = SYSCFG->EXTICR[position >> 2U];
 8000f36:	4a5b      	ldr	r2, [pc, #364]	@ (80010a4 <HAL_GPIO_Init+0x310>)
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	089b      	lsrs	r3, r3, #2
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f42:	61bb      	str	r3, [r7, #24]
				temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f003 0303 	and.w	r3, r3, #3
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	220f      	movs	r2, #15
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a52      	ldr	r2, [pc, #328]	@ (80010a8 <HAL_GPIO_Init+0x314>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d02b      	beq.n	8000fba <HAL_GPIO_Init+0x226>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a51      	ldr	r2, [pc, #324]	@ (80010ac <HAL_GPIO_Init+0x318>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d025      	beq.n	8000fb6 <HAL_GPIO_Init+0x222>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a50      	ldr	r2, [pc, #320]	@ (80010b0 <HAL_GPIO_Init+0x31c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d01f      	beq.n	8000fb2 <HAL_GPIO_Init+0x21e>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4f      	ldr	r2, [pc, #316]	@ (80010b4 <HAL_GPIO_Init+0x320>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d019      	beq.n	8000fae <HAL_GPIO_Init+0x21a>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4e      	ldr	r2, [pc, #312]	@ (80010b8 <HAL_GPIO_Init+0x324>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d013      	beq.n	8000faa <HAL_GPIO_Init+0x216>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4d      	ldr	r2, [pc, #308]	@ (80010bc <HAL_GPIO_Init+0x328>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d00d      	beq.n	8000fa6 <HAL_GPIO_Init+0x212>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4c      	ldr	r2, [pc, #304]	@ (80010c0 <HAL_GPIO_Init+0x32c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d007      	beq.n	8000fa2 <HAL_GPIO_Init+0x20e>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4b      	ldr	r2, [pc, #300]	@ (80010c4 <HAL_GPIO_Init+0x330>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d101      	bne.n	8000f9e <HAL_GPIO_Init+0x20a>
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	e00e      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000f9e:	2308      	movs	r3, #8
 8000fa0:	e00c      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000fa2:	2306      	movs	r3, #6
 8000fa4:	e00a      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000fa6:	2305      	movs	r3, #5
 8000fa8:	e008      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000faa:	2304      	movs	r3, #4
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e004      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e002      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <HAL_GPIO_Init+0x228>
 8000fba:	2300      	movs	r3, #0
						<< (4U * (position & 0x03U)));
 8000fbc:	69fa      	ldr	r2, [r7, #28]
 8000fbe:	f002 0203 	and.w	r2, r2, #3
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	4093      	lsls	r3, r2
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
				SYSCFG->EXTICR[position >> 2U] = temp;
 8000fcc:	4935      	ldr	r1, [pc, #212]	@ (80010a4 <HAL_GPIO_Init+0x310>)
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 8000fda:	4b3b      	ldr	r3, [pc, #236]	@ (80010c8 <HAL_GPIO_Init+0x334>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U) {
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x26a>
					temp |= iocurrent;
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
				}
				EXTI->RTSR = temp;
 8000ffe:	4a32      	ldr	r2, [pc, #200]	@ (80010c8 <HAL_GPIO_Init+0x334>)
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	6093      	str	r3, [r2, #8]

				temp = EXTI->FTSR;
 8001004:	4b30      	ldr	r3, [pc, #192]	@ (80010c8 <HAL_GPIO_Init+0x334>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U) {
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x294>
					temp |= iocurrent;
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
				}
				EXTI->FTSR = temp;
 8001028:	4a27      	ldr	r2, [pc, #156]	@ (80010c8 <HAL_GPIO_Init+0x334>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	60d3      	str	r3, [r2, #12]

				temp = EXTI->EMR;
 800102e:	4b26      	ldr	r3, [pc, #152]	@ (80010c8 <HAL_GPIO_Init+0x334>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U) {
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x2be>
					temp |= iocurrent;
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
				}
				EXTI->EMR = temp;
 8001052:	4a1d      	ldr	r2, [pc, #116]	@ (80010c8 <HAL_GPIO_Init+0x334>)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	6053      	str	r3, [r2, #4]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 8001058:	4b1b      	ldr	r3, [pc, #108]	@ (80010c8 <HAL_GPIO_Init+0x334>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & EXTI_IT) != 0x00U) {
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x2e8>
					temp |= iocurrent;
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
				}
				EXTI->IMR = temp;
 800107c:	4a12      	ldr	r2, [pc, #72]	@ (80010c8 <HAL_GPIO_Init+0x334>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	6013      	str	r3, [r2, #0]
	for (position = 0U; position < GPIO_NUMBER; position++) {
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3301      	adds	r3, #1
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	2b0f      	cmp	r3, #15
 800108c:	f67f ae90 	bls.w	8000db0 <HAL_GPIO_Init+0x1c>
			}
		}
	}
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3724      	adds	r7, #36	@ 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40013800 	.word	0x40013800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40020800 	.word	0x40020800
 80010b4:	40020c00 	.word	0x40020c00
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40021400 	.word	0x40021400
 80010c0:	40021800 	.word	0x40021800
 80010c4:	40021c00 	.word	0x40021c00
 80010c8:	40013c00 	.word	0x40013c00

080010cc <HAL_GPIO_ReadPin>:
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Pin specifies the port bit to read.
 *         This parameter can be GPIO_PIN_x where x can be (0..15).
 * @retval The input port pin value.
 */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	807b      	strh	r3, [r7, #2]
	GPIO_PinState bitstatus;

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));

	if ((GPIOx->IDR & GPIO_Pin) != (uint32_t) GPIO_PIN_RESET) {
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	691a      	ldr	r2, [r3, #16]
 80010dc:	887b      	ldrh	r3, [r7, #2]
 80010de:	4013      	ands	r3, r2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d002      	beq.n	80010ea <HAL_GPIO_ReadPin+0x1e>
		bitstatus = GPIO_PIN_SET;
 80010e4:	2301      	movs	r3, #1
 80010e6:	73fb      	strb	r3, [r7, #15]
 80010e8:	e001      	b.n	80010ee <HAL_GPIO_ReadPin+0x22>
	} else {
		bitstatus = GPIO_PIN_RESET;
 80010ea:	2300      	movs	r3, #0
 80010ec:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus;
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		GPIO_PinState PinState) {
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
 8001108:	4613      	mov	r3, r2
 800110a:	707b      	strb	r3, [r7, #1]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_WritePin+0x1e>
		GPIOx->BSRR = GPIO_Pin;
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
	}
}
 8001118:	e003      	b.n	8001122 <HAL_GPIO_WritePin+0x26>
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	041a      	lsls	r2, r3, #16
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	619a      	str	r2, [r3, #24]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <HAL_GPIO_TogglePin>:
 * @param  GPIOx Where x can be (A..K) to select the GPIO peripheral for STM32F429X device or
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Pin Specifies the pins to be toggled.
 * @retval None
 */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800112e:	b480      	push	{r7}
 8001130:	b085      	sub	sp, #20
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	460b      	mov	r3, r1
 8001138:	807b      	strh	r3, [r7, #2]

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));

	/* get current Output Data Register value */
	odr = GPIOx->ODR;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	60fb      	str	r3, [r7, #12]

	/* Set selected pins that were at low level, and reset ones that were high */
	GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001140:	887a      	ldrh	r2, [r7, #2]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4013      	ands	r3, r2
 8001146:	041a      	lsls	r2, r3, #16
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	43d9      	mvns	r1, r3
 800114c:	887b      	ldrh	r3, [r7, #2]
 800114e:	400b      	ands	r3, r1
 8001150:	431a      	orrs	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	619a      	str	r2, [r3, #24]
}
 8001156:	bf00      	nop
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <HAL_GPIO_EXTI_IRQHandler>:
/**
 * @brief  This function handles EXTI interrupt request.
 * @param  GPIO_Pin Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	80fb      	strh	r3, [r7, #6]
	/* EXTI line interrupt detected */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) {
 800116e:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001170:	695a      	ldr	r2, [r3, #20]
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	4013      	ands	r3, r2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d006      	beq.n	8001188 <HAL_GPIO_EXTI_IRQHandler+0x24>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800117a:	4a05      	ldr	r2, [pc, #20]	@ (8001190 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800117c:	88fb      	ldrh	r3, [r7, #6]
 800117e:	6153      	str	r3, [r2, #20]
		HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f9b0 	bl	80004e8 <HAL_GPIO_EXTI_Callback>
	}
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40013c00 	.word	0x40013c00

08001194 <HAL_RCC_OscConfig>:
 *         supported by this API. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(
		RCC_OscInitTypeDef *RCC_OscInitStruct) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	uint32_t pll_config;
	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_RCC_OscConfig+0x12>
		return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e267      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
	}

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d075      	beq.n	800129e <HAL_RCC_OscConfig+0x10a>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
		/* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80011b2:	4b88      	ldr	r3, [pc, #544]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 030c 	and.w	r3, r3, #12
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	d00c      	beq.n	80011d8 <HAL_RCC_OscConfig+0x44>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80011be:	4b85      	ldr	r3, [pc, #532]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 030c 	and.w	r3, r3, #12
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	d112      	bne.n	80011f0 <HAL_RCC_OscConfig+0x5c>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 80011ca:	4b82      	ldr	r3, [pc, #520]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80011d6:	d10b      	bne.n	80011f0 <HAL_RCC_OscConfig+0x5c>
								== RCC_PLLCFGR_PLLSRC_HSE))) {
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d8:	4b7e      	ldr	r3, [pc, #504]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d05b      	beq.n	800129c <HAL_RCC_OscConfig+0x108>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d157      	bne.n	800129c <HAL_RCC_OscConfig+0x108>
				return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e242      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011f8:	d106      	bne.n	8001208 <HAL_RCC_OscConfig+0x74>
 80011fa:	4b76      	ldr	r3, [pc, #472]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a75      	ldr	r2, [pc, #468]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001200:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	e01d      	b.n	8001244 <HAL_RCC_OscConfig+0xb0>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001210:	d10c      	bne.n	800122c <HAL_RCC_OscConfig+0x98>
 8001212:	4b70      	ldr	r3, [pc, #448]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a6f      	ldr	r2, [pc, #444]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001218:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	4b6d      	ldr	r3, [pc, #436]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a6c      	ldr	r2, [pc, #432]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001224:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	e00b      	b.n	8001244 <HAL_RCC_OscConfig+0xb0>
 800122c:	4b69      	ldr	r3, [pc, #420]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a68      	ldr	r2, [pc, #416]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001232:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	4b66      	ldr	r3, [pc, #408]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a65      	ldr	r2, [pc, #404]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 800123e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001242:	6013      	str	r3, [r2, #0]

			/* Check the HSE State */
			if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d013      	beq.n	8001274 <HAL_RCC_OscConfig+0xe0>
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 800124c:	f7ff fc60 	bl	8000b10 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0xd2>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8001254:	f7ff fc5c 	bl	8000b10 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b64      	cmp	r3, #100	@ 0x64
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0xd2>
						return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e207      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8001266:	4b5b      	ldr	r3, [pc, #364]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f0      	beq.n	8001254 <HAL_RCC_OscConfig+0xc0>
 8001272:	e014      	b.n	800129e <HAL_RCC_OscConfig+0x10a>
					}
				}
			} else {
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8001274:	f7ff fc4c 	bl	8000b10 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is bypassed or disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0xfa>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 800127c:	f7ff fc48 	bl	8000b10 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b64      	cmp	r3, #100	@ 0x64
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0xfa>
						return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e1f3      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 800128e:	4b51      	ldr	r3, [pc, #324]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0xe8>
 800129a:	e000      	b.n	800129e <HAL_RCC_OscConfig+0x10a>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129c:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d063      	beq.n	8001372 <HAL_RCC_OscConfig+0x1de>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80012aa:	4b4a      	ldr	r3, [pc, #296]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00b      	beq.n	80012ce <HAL_RCC_OscConfig+0x13a>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80012b6:	4b47      	ldr	r3, [pc, #284]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b08      	cmp	r3, #8
 80012c0:	d11c      	bne.n	80012fc <HAL_RCC_OscConfig+0x168>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 80012c2:	4b44      	ldr	r3, [pc, #272]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d116      	bne.n	80012fc <HAL_RCC_OscConfig+0x168>
								== RCC_PLLCFGR_PLLSRC_HSI))) {
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ce:	4b41      	ldr	r3, [pc, #260]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d005      	beq.n	80012e6 <HAL_RCC_OscConfig+0x152>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d001      	beq.n	80012e6 <HAL_RCC_OscConfig+0x152>
				return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e1c7      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
			}
			/* Otherwise, just the calibration is allowed */
			else {
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 80012e6:	4b3b      	ldr	r3, [pc, #236]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	4937      	ldr	r1, [pc, #220]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	600b      	str	r3, [r1, #0]
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fa:	e03a      	b.n	8001372 <HAL_RCC_OscConfig+0x1de>
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d020      	beq.n	8001346 <HAL_RCC_OscConfig+0x1b2>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 8001304:	4b34      	ldr	r3, [pc, #208]	@ (80013d8 <HAL_RCC_OscConfig+0x244>)
 8001306:	2201      	movs	r2, #1
 8001308:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 800130a:	f7ff fc01 	bl	8000b10 <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x190>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8001312:	f7ff fbfd 	bl	8000b10 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x190>
						return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e1a8      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8001324:	4b2b      	ldr	r3, [pc, #172]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f0      	beq.n	8001312 <HAL_RCC_OscConfig+0x17e>
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8001330:	4b28      	ldr	r3, [pc, #160]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	4925      	ldr	r1, [pc, #148]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001340:	4313      	orrs	r3, r2
 8001342:	600b      	str	r3, [r1, #0]
 8001344:	e015      	b.n	8001372 <HAL_RCC_OscConfig+0x1de>
						RCC_OscInitStruct->HSICalibrationValue);
			} else {
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 8001346:	4b24      	ldr	r3, [pc, #144]	@ (80013d8 <HAL_RCC_OscConfig+0x244>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 800134c:	f7ff fbe0 	bl	8000b10 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x1d2>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8001354:	f7ff fbdc 	bl	8000b10 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x1d2>
						return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e187      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8001366:	4b1b      	ldr	r3, [pc, #108]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f0      	bne.n	8001354 <HAL_RCC_OscConfig+0x1c0>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	2b00      	cmp	r3, #0
 800137c:	d036      	beq.n	80013ec <HAL_RCC_OscConfig+0x258>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d016      	beq.n	80013b4 <HAL_RCC_OscConfig+0x220>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 8001386:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <HAL_RCC_OscConfig+0x248>)
 8001388:	2201      	movs	r2, #1
 800138a:	601a      	str	r2, [r3, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 800138c:	f7ff fbc0 	bl	8000b10 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x212>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8001394:	f7ff fbbc 	bl	8000b10 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x212>
					return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e167      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 80013a6:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <HAL_RCC_OscConfig+0x240>)
 80013a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f0      	beq.n	8001394 <HAL_RCC_OscConfig+0x200>
 80013b2:	e01b      	b.n	80013ec <HAL_RCC_OscConfig+0x258>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 80013b4:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <HAL_RCC_OscConfig+0x248>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]

			/* Get Start Tick */
			tickstart = HAL_GetTick();
 80013ba:	f7ff fba9 	bl	8000b10 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 80013c0:	e00e      	b.n	80013e0 <HAL_RCC_OscConfig+0x24c>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 80013c2:	f7ff fba5 	bl	8000b10 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d907      	bls.n	80013e0 <HAL_RCC_OscConfig+0x24c>
					return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e150      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
 80013d4:	40023800 	.word	0x40023800
 80013d8:	42470000 	.word	0x42470000
 80013dc:	42470e80 	.word	0x42470e80
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 80013e0:	4b88      	ldr	r3, [pc, #544]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 80013e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1ea      	bne.n	80013c2 <HAL_RCC_OscConfig+0x22e>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 8097 	beq.w	8001528 <HAL_RCC_OscConfig+0x394>
			== RCC_OSCILLATORTYPE_LSE) {
		FlagStatus pwrclkchanged = RESET;
 80013fa:	2300      	movs	r3, #0
 80013fc:	75fb      	strb	r3, [r7, #23]
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 80013fe:	4b81      	ldr	r3, [pc, #516]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d10f      	bne.n	800142a <HAL_RCC_OscConfig+0x296>
			__HAL_RCC_PWR_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	4b7d      	ldr	r3, [pc, #500]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001412:	4a7c      	ldr	r2, [pc, #496]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001418:	6413      	str	r3, [r2, #64]	@ 0x40
 800141a:	4b7a      	ldr	r3, [pc, #488]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 8001426:	2301      	movs	r3, #1
 8001428:	75fb      	strb	r3, [r7, #23]
		}

		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 800142a:	4b77      	ldr	r3, [pc, #476]	@ (8001608 <HAL_RCC_OscConfig+0x474>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001432:	2b00      	cmp	r3, #0
 8001434:	d118      	bne.n	8001468 <HAL_RCC_OscConfig+0x2d4>
			/* Enable write access to Backup domain */
			SET_BIT(PWR->CR, PWR_CR_DBP);
 8001436:	4b74      	ldr	r3, [pc, #464]	@ (8001608 <HAL_RCC_OscConfig+0x474>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a73      	ldr	r2, [pc, #460]	@ (8001608 <HAL_RCC_OscConfig+0x474>)
 800143c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001440:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 8001442:	f7ff fb65 	bl	8000b10 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x2c8>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 800144a:	f7ff fb61 	bl	8000b10 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x2c8>
					return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e10c      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 800145c:	4b6a      	ldr	r3, [pc, #424]	@ (8001608 <HAL_RCC_OscConfig+0x474>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0f0      	beq.n	800144a <HAL_RCC_OscConfig+0x2b6>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d106      	bne.n	800147e <HAL_RCC_OscConfig+0x2ea>
 8001470:	4b64      	ldr	r3, [pc, #400]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 8001472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001474:	4a63      	ldr	r2, [pc, #396]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6713      	str	r3, [r2, #112]	@ 0x70
 800147c:	e01c      	b.n	80014b8 <HAL_RCC_OscConfig+0x324>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b05      	cmp	r3, #5
 8001484:	d10c      	bne.n	80014a0 <HAL_RCC_OscConfig+0x30c>
 8001486:	4b5f      	ldr	r3, [pc, #380]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 8001488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800148a:	4a5e      	ldr	r2, [pc, #376]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 800148c:	f043 0304 	orr.w	r3, r3, #4
 8001490:	6713      	str	r3, [r2, #112]	@ 0x70
 8001492:	4b5c      	ldr	r3, [pc, #368]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 8001494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001496:	4a5b      	ldr	r2, [pc, #364]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6713      	str	r3, [r2, #112]	@ 0x70
 800149e:	e00b      	b.n	80014b8 <HAL_RCC_OscConfig+0x324>
 80014a0:	4b58      	ldr	r3, [pc, #352]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 80014a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014a4:	4a57      	ldr	r2, [pc, #348]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 80014a6:	f023 0301 	bic.w	r3, r3, #1
 80014aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80014ac:	4b55      	ldr	r3, [pc, #340]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 80014ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014b0:	4a54      	ldr	r2, [pc, #336]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 80014b2:	f023 0304 	bic.w	r3, r3, #4
 80014b6:	6713      	str	r3, [r2, #112]	@ 0x70
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d015      	beq.n	80014ec <HAL_RCC_OscConfig+0x358>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80014c0:	f7ff fb26 	bl	8000b10 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80014c6:	e00a      	b.n	80014de <HAL_RCC_OscConfig+0x34a>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80014c8:	f7ff fb22 	bl	8000b10 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x34a>
					return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e0cb      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80014de:	4b49      	ldr	r3, [pc, #292]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 80014e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0ee      	beq.n	80014c8 <HAL_RCC_OscConfig+0x334>
 80014ea:	e014      	b.n	8001516 <HAL_RCC_OscConfig+0x382>
				}
			}
		} else {
			/* Get Start Tick */
			tickstart = HAL_GetTick();
 80014ec:	f7ff fb10 	bl	8000b10 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 80014f2:	e00a      	b.n	800150a <HAL_RCC_OscConfig+0x376>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80014f4:	f7ff fb0c 	bl	8000b10 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001502:	4293      	cmp	r3, r2
 8001504:	d901      	bls.n	800150a <HAL_RCC_OscConfig+0x376>
					return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e0b5      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 800150a:	4b3e      	ldr	r3, [pc, #248]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 800150c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1ee      	bne.n	80014f4 <HAL_RCC_OscConfig+0x360>
				}
			}
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 8001516:	7dfb      	ldrb	r3, [r7, #23]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d105      	bne.n	8001528 <HAL_RCC_OscConfig+0x394>
			__HAL_RCC_PWR_CLK_DISABLE();
 800151c:	4b39      	ldr	r3, [pc, #228]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001520:	4a38      	ldr	r2, [pc, #224]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 8001522:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001526:	6413      	str	r3, [r2, #64]	@ 0x40
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 80a1 	beq.w	8001674 <HAL_RCC_OscConfig+0x4e0>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL) {
 8001532:	4b34      	ldr	r3, [pc, #208]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 030c 	and.w	r3, r3, #12
 800153a:	2b08      	cmp	r3, #8
 800153c:	d05c      	beq.n	80015f8 <HAL_RCC_OscConfig+0x464>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d141      	bne.n	80015ca <HAL_RCC_OscConfig+0x436>
				assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
				assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
				assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8001546:	4b31      	ldr	r3, [pc, #196]	@ (800160c <HAL_RCC_OscConfig+0x478>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 800154c:	f7ff fae0 	bl	8000b10 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x3d2>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8001554:	f7ff fadc 	bl	8000b10 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x3d2>
						return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e087      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8001566:	4b27      	ldr	r3, [pc, #156]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f0      	bne.n	8001554 <HAL_RCC_OscConfig+0x3c0>
					}
				}

				/* Configure the main PLL clock source, multiplication and division factors. */
				WRITE_REG(RCC->PLLCFGR,
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69da      	ldr	r2, [r3, #28]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001580:	019b      	lsls	r3, r3, #6
 8001582:	431a      	orrs	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001588:	085b      	lsrs	r3, r3, #1
 800158a:	3b01      	subs	r3, #1
 800158c:	041b      	lsls	r3, r3, #16
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001594:	061b      	lsls	r3, r3, #24
 8001596:	491b      	ldr	r1, [pc, #108]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 8001598:	4313      	orrs	r3, r2
 800159a:	604b      	str	r3, [r1, #4]
						(RCC_OscInitStruct->PLL.PLLSource | RCC_OscInitStruct->PLL.PLLM | (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos) | (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
				/* Enable the main PLL. */
				__HAL_RCC_PLL_ENABLE();
 800159c:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <HAL_RCC_OscConfig+0x478>)
 800159e:	2201      	movs	r2, #1
 80015a0:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 80015a2:	f7ff fab5 	bl	8000b10 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x428>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80015aa:	f7ff fab1 	bl	8000b10 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x428>
						return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e05c      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80015bc:	4b11      	ldr	r3, [pc, #68]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x416>
 80015c8:	e054      	b.n	8001674 <HAL_RCC_OscConfig+0x4e0>
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 80015ca:	4b10      	ldr	r3, [pc, #64]	@ (800160c <HAL_RCC_OscConfig+0x478>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 80015d0:	f7ff fa9e 	bl	8000b10 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x456>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80015d8:	f7ff fa9a 	bl	8000b10 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x456>
						return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e045      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80015ea:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <HAL_RCC_OscConfig+0x470>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f0      	bne.n	80015d8 <HAL_RCC_OscConfig+0x444>
 80015f6:	e03d      	b.n	8001674 <HAL_RCC_OscConfig+0x4e0>
					}
				}
			}
		} else {
			/* Check if there is a request to disable the PLL used as System clock source */
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) {
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d107      	bne.n	8001610 <HAL_RCC_OscConfig+0x47c>
				return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e038      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
 8001604:	40023800 	.word	0x40023800
 8001608:	40007000 	.word	0x40007000
 800160c:	42470060 	.word	0x42470060
			} else {
				/* Do not return HAL_ERROR if request repeats the current configuration */
				pll_config = RCC->PLLCFGR;
 8001610:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <HAL_RCC_OscConfig+0x4ec>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
				if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d028      	beq.n	8001670 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
								!= RCC_OscInitStruct->PLL.PLLSource)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69db      	ldr	r3, [r3, #28]
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8001628:	429a      	cmp	r2, r3
 800162a:	d121      	bne.n	8001670 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
								!= (RCC_OscInitStruct->PLL.PLLM)
										<< RCC_PLLCFGR_PLLM_Pos)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a1b      	ldr	r3, [r3, #32]
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8001636:	429a      	cmp	r2, r3
 8001638:	d11a      	bne.n	8001670 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001640:	4013      	ands	r3, r2
								!= (RCC_OscInitStruct->PLL.PLLN)
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6a52      	ldr	r2, [r2, #36]	@ 0x24
										<< RCC_PLLCFGR_PLLN_Pos)
 8001646:	0192      	lsls	r2, r2, #6
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 8001648:	4293      	cmp	r3, r2
 800164a:	d111      	bne.n	8001670 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
								!= (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001656:	085b      	lsrs	r3, r3, #1
 8001658:	3b01      	subs	r3, #1
										<< RCC_PLLCFGR_PLLP_Pos)
 800165a:	041b      	lsls	r3, r3, #16
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 800165c:	429a      	cmp	r2, r3
 800165e:	d107      	bne.n	8001670 <HAL_RCC_OscConfig+0x4dc>
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
								!= (RCC_OscInitStruct->PLL.PLLQ
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
										<< RCC_PLLCFGR_PLLQ_Pos)))
 800166a:	061b      	lsls	r3, r3, #24
						|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 800166c:	429a      	cmp	r2, r3
 800166e:	d001      	beq.n	8001674 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
						{
					return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e000      	b.n	8001676 <HAL_RCC_OscConfig+0x4e2>
				}
			}
		}
	}
	return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3718      	adds	r7, #24
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800

08001684 <HAL_RCC_ClockConfig>:
 *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t FLatency) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
	uint32_t tickstart;

	/* Check Null pointer */
	if (RCC_ClkInitStruct == NULL) {
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <HAL_RCC_ClockConfig+0x14>
		return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e0cc      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
	/* To correctly read data from FLASH memory, the number of wait states (LATENCY)
	 must be correctly programmed according to the frequency of the CPU clock
	 (HCLK) and the supply voltage of the device. */

	/* Increasing the number of wait states because of higher CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 8001698:	4b68      	ldr	r3, [pc, #416]	@ (800183c <HAL_RCC_ClockConfig+0x1b8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d90c      	bls.n	80016c0 <HAL_RCC_ClockConfig+0x3c>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 80016a6:	4b65      	ldr	r3, [pc, #404]	@ (800183c <HAL_RCC_ClockConfig+0x1b8>)
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 80016ae:	4b63      	ldr	r3, [pc, #396]	@ (800183c <HAL_RCC_ClockConfig+0x1b8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d001      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x3c>
			return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e0b8      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
		}
	}

	/*-------------------------- HCLK Configuration --------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d020      	beq.n	800170e <HAL_RCC_ClockConfig+0x8a>
			== RCC_CLOCKTYPE_HCLK) {
		/* Set the highest APBx dividers in order to ensure that we do not go through
		 a non-spec phase whatever we decrease or increase HCLK. */
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x60>
				== RCC_CLOCKTYPE_PCLK1) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d8:	4b59      	ldr	r3, [pc, #356]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	4a58      	ldr	r2, [pc, #352]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80016e2:	6093      	str	r3, [r2, #8]
		}

		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d005      	beq.n	80016fc <HAL_RCC_ClockConfig+0x78>
				== RCC_CLOCKTYPE_PCLK2) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016f0:	4b53      	ldr	r3, [pc, #332]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	4a52      	ldr	r2, [pc, #328]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016fa:	6093      	str	r3, [r2, #8]
		}

		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016fc:	4b50      	ldr	r3, [pc, #320]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	494d      	ldr	r1, [pc, #308]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	4313      	orrs	r3, r2
 800170c:	608b      	str	r3, [r1, #8]
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d044      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x120>
			== RCC_CLOCKTYPE_SYSCLK) {
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* HSE is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d107      	bne.n	8001732 <HAL_RCC_ClockConfig+0xae>
			/* Check the HSE ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8001722:	4b47      	ldr	r3, [pc, #284]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d119      	bne.n	8001762 <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e07f      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
			}
		}
		/* PLL is selected as System Clock Source */
		else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b02      	cmp	r3, #2
 8001738:	d003      	beq.n	8001742 <HAL_RCC_ClockConfig+0xbe>
				|| (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)) {
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b03      	cmp	r3, #3
 8001740:	d107      	bne.n	8001752 <HAL_RCC_ClockConfig+0xce>
			/* Check the PLL ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8001742:	4b3f      	ldr	r3, [pc, #252]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d109      	bne.n	8001762 <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e06f      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
			}
		}
		/* HSI is selected as System Clock Source */
		else {
			/* Check the HSI ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8001752:	4b3b      	ldr	r3, [pc, #236]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e067      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
			}
		}

		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001762:	4b37      	ldr	r3, [pc, #220]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f023 0203 	bic.w	r2, r3, #3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	4934      	ldr	r1, [pc, #208]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001770:	4313      	orrs	r3, r2
 8001772:	608b      	str	r3, [r1, #8]

		/* Get Start Tick */
		tickstart = HAL_GetTick();
 8001774:	f7ff f9cc 	bl	8000b10 <HAL_GetTick>
 8001778:	60f8      	str	r0, [r7, #12]

		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 800177a:	e00a      	b.n	8001792 <HAL_RCC_ClockConfig+0x10e>
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 800177c:	f7ff f9c8 	bl	8000b10 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800178a:	4293      	cmp	r3, r2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_ClockConfig+0x10e>
				return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e04f      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8001792:	4b2b      	ldr	r3, [pc, #172]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 020c 	and.w	r2, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d1eb      	bne.n	800177c <HAL_RCC_ClockConfig+0xf8>
			}
		}
	}

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 80017a4:	4b25      	ldr	r3, [pc, #148]	@ (800183c <HAL_RCC_ClockConfig+0x1b8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d20c      	bcs.n	80017cc <HAL_RCC_ClockConfig+0x148>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 80017b2:	4b22      	ldr	r3, [pc, #136]	@ (800183c <HAL_RCC_ClockConfig+0x1b8>)
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 80017ba:	4b20      	ldr	r3, [pc, #128]	@ (800183c <HAL_RCC_ClockConfig+0x1b8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_ClockConfig+0x148>
			return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e032      	b.n	8001832 <HAL_RCC_ClockConfig+0x1ae>
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d008      	beq.n	80017ea <HAL_RCC_ClockConfig+0x166>
			== RCC_CLOCKTYPE_PCLK1) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 80017d8:	4b19      	ldr	r3, [pc, #100]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	4916      	ldr	r1, [pc, #88]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	608b      	str	r3, [r1, #8]
				RCC_ClkInitStruct->APB1CLKDivider);
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d009      	beq.n	800180a <HAL_RCC_ClockConfig+0x186>
			== RCC_CLOCKTYPE_PCLK2) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 80017f6:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	490e      	ldr	r1, [pc, #56]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	4313      	orrs	r3, r2
 8001808:	608b      	str	r3, [r1, #8]
				((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 800180a:	f000 f821 	bl	8001850 <HAL_RCC_GetSysClockFreq>
 800180e:	4602      	mov	r2, r0
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001810:	4b0b      	ldr	r3, [pc, #44]	@ (8001840 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	091b      	lsrs	r3, r3, #4
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	490a      	ldr	r1, [pc, #40]	@ (8001844 <HAL_RCC_ClockConfig+0x1c0>)
 800181c:	5ccb      	ldrb	r3, [r1, r3]
 800181e:	fa22 f303 	lsr.w	r3, r2, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8001822:	4a09      	ldr	r2, [pc, #36]	@ (8001848 <HAL_RCC_ClockConfig+0x1c4>)
 8001824:	6013      	str	r3, [r2, #0]

	/* Configure the source of time base considering new system clocks settings */
	HAL_InitTick(uwTickPrio);
 8001826:	4b09      	ldr	r3, [pc, #36]	@ (800184c <HAL_RCC_ClockConfig+0x1c8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff f92c 	bl	8000a88 <HAL_InitTick>

	return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023c00 	.word	0x40023c00
 8001840:	40023800 	.word	0x40023800
 8001844:	08002e40 	.word	0x08002e40
 8001848:	20000000 	.word	0x20000000
 800184c:	20000004 	.word	0x20000004

08001850 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
__weak uint32_t HAL_RCC_GetSysClockFreq(void) {
 8001850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001854:	b090      	sub	sp, #64	@ 0x40
 8001856:	af00      	add	r7, sp, #0
	uint32_t pllm = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t pllvco = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t pllp = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t sysclockfreq = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	63bb      	str	r3, [r7, #56]	@ 0x38

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 8001868:	4b59      	ldr	r3, [pc, #356]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 030c 	and.w	r3, r3, #12
 8001870:	2b08      	cmp	r3, #8
 8001872:	d00d      	beq.n	8001890 <HAL_RCC_GetSysClockFreq+0x40>
 8001874:	2b08      	cmp	r3, #8
 8001876:	f200 80a1 	bhi.w	80019bc <HAL_RCC_GetSysClockFreq+0x16c>
 800187a:	2b00      	cmp	r3, #0
 800187c:	d002      	beq.n	8001884 <HAL_RCC_GetSysClockFreq+0x34>
 800187e:	2b04      	cmp	r3, #4
 8001880:	d003      	beq.n	800188a <HAL_RCC_GetSysClockFreq+0x3a>
 8001882:	e09b      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0x16c>
	case RCC_CFGR_SWS_HSI: /* HSI used as system clock source */
	{
		sysclockfreq = HSI_VALUE;
 8001884:	4b53      	ldr	r3, [pc, #332]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001886:	63bb      	str	r3, [r7, #56]	@ 0x38
		break;
 8001888:	e09b      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x172>
	}
	case RCC_CFGR_SWS_HSE: /* HSE used as system clock  source */
	{
		sysclockfreq = HSE_VALUE;
 800188a:	4b53      	ldr	r3, [pc, #332]	@ (80019d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800188c:	63bb      	str	r3, [r7, #56]	@ 0x38
		break;
 800188e:	e098      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x172>
	}
	case RCC_CFGR_SWS_PLL: /* PLL used as system clock  source */
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		 SYSCLK = PLL_VCO / PLLP */
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001890:	4b4f      	ldr	r3, [pc, #316]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001898:	637b      	str	r3, [r7, #52]	@ 0x34
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 800189a:	4b4d      	ldr	r3, [pc, #308]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d028      	beq.n	80018f8 <HAL_RCC_GetSysClockFreq+0xa8>
			/* HSE used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 80018a6:	4b4a      	ldr	r3, [pc, #296]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80018a8:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80018aa:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 80018ac:	2200      	movs	r2, #0
 80018ae:	623b      	str	r3, [r7, #32]
 80018b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80018b8:	2100      	movs	r1, #0
 80018ba:	4b47      	ldr	r3, [pc, #284]	@ (80019d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80018bc:	fb03 f201 	mul.w	r2, r3, r1
 80018c0:	2300      	movs	r3, #0
 80018c2:	fb00 f303 	mul.w	r3, r0, r3
 80018c6:	4413      	add	r3, r2
 80018c8:	4a43      	ldr	r2, [pc, #268]	@ (80019d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80018ca:	fba0 1202 	umull	r1, r2, r0, r2
 80018ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018d0:	460a      	mov	r2, r1
 80018d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80018d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018d6:	4413      	add	r3, r2
 80018d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80018da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018dc:	2200      	movs	r2, #0
 80018de:	61bb      	str	r3, [r7, #24]
 80018e0:	61fa      	str	r2, [r7, #28]
 80018e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80018ea:	f7fe fc6d 	bl	80001c8 <__aeabi_uldivmod>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 80018f2:	4613      	mov	r3, r2
 80018f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018f6:	e053      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0x150>
		} else {
			/* HSI used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 80018f8:	4b35      	ldr	r3, [pc, #212]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80018fa:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80018fc:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 80018fe:	2200      	movs	r2, #0
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	617a      	str	r2, [r7, #20]
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800190a:	f04f 0b00 	mov.w	fp, #0
 800190e:	4652      	mov	r2, sl
 8001910:	465b      	mov	r3, fp
 8001912:	f04f 0000 	mov.w	r0, #0
 8001916:	f04f 0100 	mov.w	r1, #0
 800191a:	0159      	lsls	r1, r3, #5
 800191c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001920:	0150      	lsls	r0, r2, #5
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	ebb2 080a 	subs.w	r8, r2, sl
 800192a:	eb63 090b 	sbc.w	r9, r3, fp
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800193a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800193e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001942:	ebb2 0408 	subs.w	r4, r2, r8
 8001946:	eb63 0509 	sbc.w	r5, r3, r9
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	00eb      	lsls	r3, r5, #3
 8001954:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001958:	00e2      	lsls	r2, r4, #3
 800195a:	4614      	mov	r4, r2
 800195c:	461d      	mov	r5, r3
 800195e:	eb14 030a 	adds.w	r3, r4, sl
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	eb45 030b 	adc.w	r3, r5, fp
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	f04f 0300 	mov.w	r3, #0
 8001972:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001976:	4629      	mov	r1, r5
 8001978:	028b      	lsls	r3, r1, #10
 800197a:	4621      	mov	r1, r4
 800197c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001980:	4621      	mov	r1, r4
 8001982:	028a      	lsls	r2, r1, #10
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8001988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800198a:	2200      	movs	r2, #0
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	60fa      	str	r2, [r7, #12]
 8001990:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001994:	f7fe fc18 	bl	80001c8 <__aeabi_uldivmod>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 800199c:	4613      	mov	r3, r2
 800199e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 80019a0:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	0c1b      	lsrs	r3, r3, #16
 80019a6:	f003 0303 	and.w	r3, r3, #3
				+ 1U) * 2U);
 80019aa:	3301      	adds	r3, #1
		pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	633b      	str	r3, [r7, #48]	@ 0x30

		sysclockfreq = pllvco / pllp;
 80019b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80019b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b8:	63bb      	str	r3, [r7, #56]	@ 0x38
		break;
 80019ba:	e002      	b.n	80019c2 <HAL_RCC_GetSysClockFreq+0x172>
	}
	default: {
		sysclockfreq = HSI_VALUE;
 80019bc:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80019be:	63bb      	str	r3, [r7, #56]	@ 0x38
		break;
 80019c0:	bf00      	nop
	}
	}
	return sysclockfreq;
 80019c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3740      	adds	r7, #64	@ 0x40
 80019c8:	46bd      	mov	sp, r7
 80019ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800
 80019d4:	00f42400 	.word	0x00f42400
 80019d8:	017d7840 	.word	0x017d7840

080019dc <HAL_TIM_Base_Init>:
 *         due to DIR bit readonly in center aligned mode.
 *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	/* Check the TIM handle allocation */
	if (htim == NULL) {
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_TIM_Base_Init+0x12>
		return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e041      	b.n	8001a72 <HAL_TIM_Base_Init+0x96>
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
	assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
	assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

	if (htim->State == HAL_TIM_STATE_RESET) {
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d106      	bne.n	8001a08 <HAL_TIM_Base_Init+0x2c>
		/* Allocate lock resource and initialize it */
		htim->Lock = HAL_UNLOCKED;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_TIM_Base_MspInit(htim);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7fe ff50 	bl	80008a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

	/* Set the Time Base configuration */
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3304      	adds	r3, #4
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	f000 fa7e 	bl	8001f1c <TIM_Base_SetConfig>

	/* Initialize the DMA burst operation state */
	htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

	/* Initialize the TIM channels state */
	TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

	/* Initialize the TIM state*/
	htim->State = HAL_TIM_STATE_READY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

	return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <HAL_TIM_Base_Start_IT>:
/**
 * @brief  Starts the TIM Base generation in interrupt mode.
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim) {
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]

	/* Check the parameters */
	assert_param(IS_TIM_INSTANCE(htim->Instance));

	/* Check the TIM state */
	if (htim->State != HAL_TIM_STATE_READY) {
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d001      	beq.n	8001a94 <HAL_TIM_Base_Start_IT+0x18>
		return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e04e      	b.n	8001b32 <HAL_TIM_Base_Start_IT+0xb6>
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2202      	movs	r2, #2
 8001a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

	/* Enable the TIM Update interrupt */
	__HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0201 	orr.w	r2, r2, #1
 8001aaa:	60da      	str	r2, [r3, #12]

	/* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
	if (IS_TIM_SLAVE_INSTANCE(htim->Instance)) {
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a23      	ldr	r2, [pc, #140]	@ (8001b40 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d022      	beq.n	8001afc <HAL_TIM_Base_Start_IT+0x80>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001abe:	d01d      	beq.n	8001afc <HAL_TIM_Base_Start_IT+0x80>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a1f      	ldr	r2, [pc, #124]	@ (8001b44 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d018      	beq.n	8001afc <HAL_TIM_Base_Start_IT+0x80>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a1e      	ldr	r2, [pc, #120]	@ (8001b48 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d013      	beq.n	8001afc <HAL_TIM_Base_Start_IT+0x80>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a1c      	ldr	r2, [pc, #112]	@ (8001b4c <HAL_TIM_Base_Start_IT+0xd0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d00e      	beq.n	8001afc <HAL_TIM_Base_Start_IT+0x80>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a1b      	ldr	r2, [pc, #108]	@ (8001b50 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d009      	beq.n	8001afc <HAL_TIM_Base_Start_IT+0x80>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a19      	ldr	r2, [pc, #100]	@ (8001b54 <HAL_TIM_Base_Start_IT+0xd8>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d004      	beq.n	8001afc <HAL_TIM_Base_Start_IT+0x80>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a18      	ldr	r2, [pc, #96]	@ (8001b58 <HAL_TIM_Base_Start_IT+0xdc>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d111      	bne.n	8001b20 <HAL_TIM_Base_Start_IT+0xa4>
		tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	60fb      	str	r3, [r7, #12]
		if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2b06      	cmp	r3, #6
 8001b0c:	d010      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0xb4>
			__HAL_TIM_ENABLE(htim);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f042 0201 	orr.w	r2, r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]
		if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 8001b1e:	e007      	b.n	8001b30 <HAL_TIM_Base_Start_IT+0xb4>
		}
	} else {
		__HAL_TIM_ENABLE(htim);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0201 	orr.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
	}

	/* Return function status */
	return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40010000 	.word	0x40010000
 8001b44:	40000400 	.word	0x40000400
 8001b48:	40000800 	.word	0x40000800
 8001b4c:	40000c00 	.word	0x40000c00
 8001b50:	40010400 	.word	0x40010400
 8001b54:	40014000 	.word	0x40014000
 8001b58:	40001800 	.word	0x40001800

08001b5c <HAL_TIM_IRQHandler>:
/**
 * @brief  This function handles TIM interrupts requests.
 * @param  htim TIM  handle
 * @retval None
 */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
	uint32_t itsource = htim->Instance->DIER;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	60fb      	str	r3, [r7, #12]
	uint32_t itflag = htim->Instance->SR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	60bb      	str	r3, [r7, #8]

	/* Capture compare 1 event */
	if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1)) {
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d020      	beq.n	8001bc0 <HAL_TIM_IRQHandler+0x64>
		if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1)) {
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d01b      	beq.n	8001bc0 <HAL_TIM_IRQHandler+0x64>
			{
				__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f06f 0202 	mvn.w	r2, #2
 8001b90:	611a      	str	r2, [r3, #16]
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	771a      	strb	r2, [r3, #28]

				/* Input capture event */
				if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U) {
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_TIM_IRQHandler+0x52>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
					HAL_TIM_IC_CaptureCallback(htim);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f999 	bl	8001ede <HAL_TIM_IC_CaptureCallback>
 8001bac:	e005      	b.n	8001bba <HAL_TIM_IRQHandler+0x5e>
				else {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
					HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f98b 	bl	8001eca <HAL_TIM_OC_DelayElapsedCallback>
					HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f99c 	bl	8001ef2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
				}
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	771a      	strb	r2, [r3, #28]
			}
		}
	}
	/* Capture compare 2 event */
	if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2)) {
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d020      	beq.n	8001c0c <HAL_TIM_IRQHandler+0xb0>
		if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2)) {
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d01b      	beq.n	8001c0c <HAL_TIM_IRQHandler+0xb0>
			__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f06f 0204 	mvn.w	r2, #4
 8001bdc:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2202      	movs	r2, #2
 8001be2:	771a      	strb	r2, [r3, #28]
			/* Input capture event */
			if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U) {
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_TIM_IRQHandler+0x9e>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
				HAL_TIM_IC_CaptureCallback(htim);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f973 	bl	8001ede <HAL_TIM_IC_CaptureCallback>
 8001bf8:	e005      	b.n	8001c06 <HAL_TIM_IRQHandler+0xaa>
			else {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
				HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f965 	bl	8001eca <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f976 	bl	8001ef2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
			}
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	771a      	strb	r2, [r3, #28]
		}
	}
	/* Capture compare 3 event */
	if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3)) {
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d020      	beq.n	8001c58 <HAL_TIM_IRQHandler+0xfc>
		if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3)) {
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d01b      	beq.n	8001c58 <HAL_TIM_IRQHandler+0xfc>
			__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f06f 0208 	mvn.w	r2, #8
 8001c28:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2204      	movs	r2, #4
 8001c2e:	771a      	strb	r2, [r3, #28]
			/* Input capture event */
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U) {
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_TIM_IRQHandler+0xea>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
				HAL_TIM_IC_CaptureCallback(htim);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f94d 	bl	8001ede <HAL_TIM_IC_CaptureCallback>
 8001c44:	e005      	b.n	8001c52 <HAL_TIM_IRQHandler+0xf6>
			else {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
				HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f93f 	bl	8001eca <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f950 	bl	8001ef2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
			}
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	771a      	strb	r2, [r3, #28]
		}
	}
	/* Capture compare 4 event */
	if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4)) {
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	f003 0310 	and.w	r3, r3, #16
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d020      	beq.n	8001ca4 <HAL_TIM_IRQHandler+0x148>
		if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4)) {
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f003 0310 	and.w	r3, r3, #16
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d01b      	beq.n	8001ca4 <HAL_TIM_IRQHandler+0x148>
			__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f06f 0210 	mvn.w	r2, #16
 8001c74:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2208      	movs	r2, #8
 8001c7a:	771a      	strb	r2, [r3, #28]
			/* Input capture event */
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U) {
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_TIM_IRQHandler+0x136>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
				HAL_TIM_IC_CaptureCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f927 	bl	8001ede <HAL_TIM_IC_CaptureCallback>
 8001c90:	e005      	b.n	8001c9e <HAL_TIM_IRQHandler+0x142>
			else {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
				HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f919 	bl	8001eca <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f92a 	bl	8001ef2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
			}
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	771a      	strb	r2, [r3, #28]
		}
	}
	/* TIM Update event */
	if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE)) {
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00c      	beq.n	8001cc8 <HAL_TIM_IRQHandler+0x16c>
		if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE)) {
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d007      	beq.n	8001cc8 <HAL_TIM_IRQHandler+0x16c>
			__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f06f 0201 	mvn.w	r2, #1
 8001cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
			HAL_TIM_PeriodElapsedCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7fe fbf8 	bl	80004b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
		}
	}
	/* TIM Break input event */
	if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) {
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00c      	beq.n	8001cec <HAL_TIM_IRQHandler+0x190>
		if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK)) {
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d007      	beq.n	8001cec <HAL_TIM_IRQHandler+0x190>
			__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
			HAL_TIMEx_BreakCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 fae4 	bl	80022b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
		}
	}
	/* TIM Trigger detection event */
	if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER)) {
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00c      	beq.n	8001d10 <HAL_TIM_IRQHandler+0x1b4>
		if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER)) {
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d007      	beq.n	8001d10 <HAL_TIM_IRQHandler+0x1b4>
			__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
			HAL_TIM_TriggerCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f8fb 	bl	8001f06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
		}
	}
	/* TIM commutation event */
	if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM)) {
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	f003 0320 	and.w	r3, r3, #32
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00c      	beq.n	8001d34 <HAL_TIM_IRQHandler+0x1d8>
		if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM)) {
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f003 0320 	and.w	r3, r3, #32
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d007      	beq.n	8001d34 <HAL_TIM_IRQHandler+0x1d8>
			__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f06f 0220 	mvn.w	r2, #32
 8001d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
			HAL_TIMEx_CommutCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 fab6 	bl	80022a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
		}
	}
}
 8001d34:	bf00      	nop
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_TIM_ConfigClockSource>:
 * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
 *         contains the clock source information for the TIM peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim,
		const TIM_ClockConfigTypeDef *sClockSourceConfig) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001d46:	2300      	movs	r3, #0
 8001d48:	73fb      	strb	r3, [r7, #15]
	uint32_t tmpsmcr;

	/* Process Locked */
	__HAL_LOCK(htim);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <HAL_TIM_ConfigClockSource+0x1c>
 8001d54:	2302      	movs	r3, #2
 8001d56:	e0b4      	b.n	8001ec2 <HAL_TIM_ConfigClockSource+0x186>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	htim->State = HAL_TIM_STATE_BUSY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2202      	movs	r2, #2
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

	/* Check the parameters */
	assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

	/* Reset the SMS, TS, ECE, ETPS and ETRF bits */
	tmpsmcr = htim->Instance->SMCR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	60bb      	str	r3, [r7, #8]
	tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001d76:	60bb      	str	r3, [r7, #8]
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001d7e:	60bb      	str	r3, [r7, #8]
	htim->Instance->SMCR = tmpsmcr;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68ba      	ldr	r2, [r7, #8]
 8001d86:	609a      	str	r2, [r3, #8]

	switch (sClockSourceConfig->ClockSource) {
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d90:	d03e      	beq.n	8001e10 <HAL_TIM_ConfigClockSource+0xd4>
 8001d92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d96:	f200 8087 	bhi.w	8001ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8001d9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d9e:	f000 8086 	beq.w	8001eae <HAL_TIM_ConfigClockSource+0x172>
 8001da2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001da6:	d87f      	bhi.n	8001ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8001da8:	2b70      	cmp	r3, #112	@ 0x70
 8001daa:	d01a      	beq.n	8001de2 <HAL_TIM_ConfigClockSource+0xa6>
 8001dac:	2b70      	cmp	r3, #112	@ 0x70
 8001dae:	d87b      	bhi.n	8001ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8001db0:	2b60      	cmp	r3, #96	@ 0x60
 8001db2:	d050      	beq.n	8001e56 <HAL_TIM_ConfigClockSource+0x11a>
 8001db4:	2b60      	cmp	r3, #96	@ 0x60
 8001db6:	d877      	bhi.n	8001ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8001db8:	2b50      	cmp	r3, #80	@ 0x50
 8001dba:	d03c      	beq.n	8001e36 <HAL_TIM_ConfigClockSource+0xfa>
 8001dbc:	2b50      	cmp	r3, #80	@ 0x50
 8001dbe:	d873      	bhi.n	8001ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8001dc0:	2b40      	cmp	r3, #64	@ 0x40
 8001dc2:	d058      	beq.n	8001e76 <HAL_TIM_ConfigClockSource+0x13a>
 8001dc4:	2b40      	cmp	r3, #64	@ 0x40
 8001dc6:	d86f      	bhi.n	8001ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8001dc8:	2b30      	cmp	r3, #48	@ 0x30
 8001dca:	d064      	beq.n	8001e96 <HAL_TIM_ConfigClockSource+0x15a>
 8001dcc:	2b30      	cmp	r3, #48	@ 0x30
 8001dce:	d86b      	bhi.n	8001ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8001dd0:	2b20      	cmp	r3, #32
 8001dd2:	d060      	beq.n	8001e96 <HAL_TIM_ConfigClockSource+0x15a>
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	d867      	bhi.n	8001ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d05c      	beq.n	8001e96 <HAL_TIM_ConfigClockSource+0x15a>
 8001ddc:	2b10      	cmp	r3, #16
 8001dde:	d05a      	beq.n	8001e96 <HAL_TIM_ConfigClockSource+0x15a>
 8001de0:	e062      	b.n	8001ea8 <HAL_TIM_ConfigClockSource+0x16c>
		assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		/* Configure the ETR Clock source */
		TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	6899      	ldr	r1, [r3, #8]
				sClockSourceConfig->ClockPolarity,
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
				sClockSourceConfig->ClockFilter);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
		TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 8001df2:	f000 f9b9 	bl	8002168 <TIM_ETR_SetConfig>

		/* Select the External clock mode1 and the ETRF trigger */
		tmpsmcr = htim->Instance->SMCR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	60bb      	str	r3, [r7, #8]
		tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001e04:	60bb      	str	r3, [r7, #8]
		/* Write to TIMx SMCR */
		htim->Instance->SMCR = tmpsmcr;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	609a      	str	r2, [r3, #8]
		break;
 8001e0e:	e04f      	b.n	8001eb0 <HAL_TIM_ConfigClockSource+0x174>
		assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		/* Configure the ETR Clock source */
		TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6818      	ldr	r0, [r3, #0]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	6899      	ldr	r1, [r3, #8]
				sClockSourceConfig->ClockPolarity,
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685a      	ldr	r2, [r3, #4]
				sClockSourceConfig->ClockFilter);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
		TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 8001e20:	f000 f9a2 	bl	8002168 <TIM_ETR_SetConfig>
		/* Enable the External clock mode2 */
		htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e32:	609a      	str	r2, [r3, #8]
		break;
 8001e34:	e03c      	b.n	8001eb0 <HAL_TIM_ConfigClockSource+0x174>

		/* Check TI1 input conditioning related parameters */
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		TIM_TI1_ConfigInputStage(htim->Instance,
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6818      	ldr	r0, [r3, #0]
				sClockSourceConfig->ClockPolarity,
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	6859      	ldr	r1, [r3, #4]
				sClockSourceConfig->ClockFilter);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
		TIM_TI1_ConfigInputStage(htim->Instance,
 8001e42:	461a      	mov	r2, r3
 8001e44:	f000 f916 	bl	8002074 <TIM_TI1_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2150      	movs	r1, #80	@ 0x50
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 f96f 	bl	8002132 <TIM_ITRx_SetConfig>
		break;
 8001e54:	e02c      	b.n	8001eb0 <HAL_TIM_ConfigClockSource+0x174>

		/* Check TI2 input conditioning related parameters */
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		TIM_TI2_ConfigInputStage(htim->Instance,
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6818      	ldr	r0, [r3, #0]
				sClockSourceConfig->ClockPolarity,
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	6859      	ldr	r1, [r3, #4]
				sClockSourceConfig->ClockFilter);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
		TIM_TI2_ConfigInputStage(htim->Instance,
 8001e62:	461a      	mov	r2, r3
 8001e64:	f000 f935 	bl	80020d2 <TIM_TI2_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2160      	movs	r1, #96	@ 0x60
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 f95f 	bl	8002132 <TIM_ITRx_SetConfig>
		break;
 8001e74:	e01c      	b.n	8001eb0 <HAL_TIM_ConfigClockSource+0x174>

		/* Check TI1 input conditioning related parameters */
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		TIM_TI1_ConfigInputStage(htim->Instance,
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6818      	ldr	r0, [r3, #0]
				sClockSourceConfig->ClockPolarity,
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	6859      	ldr	r1, [r3, #4]
				sClockSourceConfig->ClockFilter);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
		TIM_TI1_ConfigInputStage(htim->Instance,
 8001e82:	461a      	mov	r2, r3
 8001e84:	f000 f8f6 	bl	8002074 <TIM_TI1_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2140      	movs	r1, #64	@ 0x40
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 f94f 	bl	8002132 <TIM_ITRx_SetConfig>
		break;
 8001e94:	e00c      	b.n	8001eb0 <HAL_TIM_ConfigClockSource+0x174>
	case TIM_CLOCKSOURCE_ITR2:
	case TIM_CLOCKSOURCE_ITR3: {
		/* Check whether or not the timer instance supports internal trigger input */
		assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

		TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	f000 f946 	bl	8002132 <TIM_ITRx_SetConfig>
		break;
 8001ea6:	e003      	b.n	8001eb0 <HAL_TIM_ConfigClockSource+0x174>
	}

	default:
		status = HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	73fb      	strb	r3, [r7, #15]
		break;
 8001eac:	e000      	b.n	8001eb0 <HAL_TIM_ConfigClockSource+0x174>
		break;
 8001eae:	bf00      	nop
	}
	htim->State = HAL_TIM_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

	__HAL_UNLOCK(htim);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	return status;
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_TIM_OC_DelayElapsedCallback>:
/**
 * @brief  Output Compare callback in non-blocking mode
 * @param  htim TIM OC handle
 * @retval None
 */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
	 */
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_TIM_IC_CaptureCallback>:
/**
 * @brief  Input Capture callback in non-blocking mode
 * @param  htim TIM IC handle
 * @retval None
 */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_IC_CaptureCallback could be implemented in the user file
	 */
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
 * @brief  PWM Pulse finished callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
	 */
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <HAL_TIM_TriggerCallback>:
/**
 * @brief  Hall Trigger detection callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim) {
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_TriggerCallback could be implemented in the user file
	 */
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <TIM_Base_SetConfig>:
 * @param  TIMx TIM peripheral
 * @param  Structure TIM Base configuration structure
 * @retval None
 */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx,
		const TIM_Base_InitTypeDef *Structure) {
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
	uint32_t tmpcr1;
	tmpcr1 = TIMx->CR1;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	60fb      	str	r3, [r7, #12]

	/* Set TIM Time Base Unit parameters ---------------------------------------*/
	if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx)) {
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a46      	ldr	r2, [pc, #280]	@ (8002048 <TIM_Base_SetConfig+0x12c>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d013      	beq.n	8001f5c <TIM_Base_SetConfig+0x40>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f3a:	d00f      	beq.n	8001f5c <TIM_Base_SetConfig+0x40>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a43      	ldr	r2, [pc, #268]	@ (800204c <TIM_Base_SetConfig+0x130>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d00b      	beq.n	8001f5c <TIM_Base_SetConfig+0x40>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a42      	ldr	r2, [pc, #264]	@ (8002050 <TIM_Base_SetConfig+0x134>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d007      	beq.n	8001f5c <TIM_Base_SetConfig+0x40>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a41      	ldr	r2, [pc, #260]	@ (8002054 <TIM_Base_SetConfig+0x138>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d003      	beq.n	8001f5c <TIM_Base_SetConfig+0x40>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a40      	ldr	r2, [pc, #256]	@ (8002058 <TIM_Base_SetConfig+0x13c>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d108      	bne.n	8001f6e <TIM_Base_SetConfig+0x52>
		/* Select the Counter Mode */
		tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f62:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= Structure->CounterMode;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
	}

	if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx)) {
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a35      	ldr	r2, [pc, #212]	@ (8002048 <TIM_Base_SetConfig+0x12c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d02b      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f7c:	d027      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a32      	ldr	r2, [pc, #200]	@ (800204c <TIM_Base_SetConfig+0x130>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d023      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a31      	ldr	r2, [pc, #196]	@ (8002050 <TIM_Base_SetConfig+0x134>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01f      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a30      	ldr	r2, [pc, #192]	@ (8002054 <TIM_Base_SetConfig+0x138>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d01b      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a2f      	ldr	r2, [pc, #188]	@ (8002058 <TIM_Base_SetConfig+0x13c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d017      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a2e      	ldr	r2, [pc, #184]	@ (800205c <TIM_Base_SetConfig+0x140>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d013      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a2d      	ldr	r2, [pc, #180]	@ (8002060 <TIM_Base_SetConfig+0x144>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00f      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a2c      	ldr	r2, [pc, #176]	@ (8002064 <TIM_Base_SetConfig+0x148>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d00b      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a2b      	ldr	r2, [pc, #172]	@ (8002068 <TIM_Base_SetConfig+0x14c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d007      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a2a      	ldr	r2, [pc, #168]	@ (800206c <TIM_Base_SetConfig+0x150>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d003      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a29      	ldr	r2, [pc, #164]	@ (8002070 <TIM_Base_SetConfig+0x154>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d108      	bne.n	8001fe0 <TIM_Base_SetConfig+0xc4>
		/* Set the clock division */
		tmpcr1 &= ~TIM_CR1_CKD;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fd4:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= (uint32_t) Structure->ClockDivision;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	60fb      	str	r3, [r7, #12]
	}

	/* Set the auto-reload preload */
	MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]

	TIMx->CR1 = tmpcr1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	601a      	str	r2, [r3, #0]

	/* Set the Autoreload value */
	TIMx->ARR = (uint32_t) Structure->Period;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	62da      	str	r2, [r3, #44]	@ 0x2c

	/* Set the Prescaler value */
	TIMx->PSC = Structure->Prescaler;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	629a      	str	r2, [r3, #40]	@ 0x28

	if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx)) {
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a10      	ldr	r2, [pc, #64]	@ (8002048 <TIM_Base_SetConfig+0x12c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d003      	beq.n	8002014 <TIM_Base_SetConfig+0xf8>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a12      	ldr	r2, [pc, #72]	@ (8002058 <TIM_Base_SetConfig+0x13c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d103      	bne.n	800201c <TIM_Base_SetConfig+0x100>
		/* Set the Repetition Counter value */
		TIMx->RCR = Structure->RepetitionCounter;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	/* Generate an update event to reload the Prescaler
	 and the repetition counter (only for advanced timer) value immediately */
	TIMx->EGR = TIM_EGR_UG;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	615a      	str	r2, [r3, #20]

	/* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
	if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE)) {
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b01      	cmp	r3, #1
 800202c:	d105      	bne.n	800203a <TIM_Base_SetConfig+0x11e>
		/* Clear the update flag */
		CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f023 0201 	bic.w	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	611a      	str	r2, [r3, #16]
	}
}
 800203a:	bf00      	nop
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40010000 	.word	0x40010000
 800204c:	40000400 	.word	0x40000400
 8002050:	40000800 	.word	0x40000800
 8002054:	40000c00 	.word	0x40000c00
 8002058:	40010400 	.word	0x40010400
 800205c:	40014000 	.word	0x40014000
 8002060:	40014400 	.word	0x40014400
 8002064:	40014800 	.word	0x40014800
 8002068:	40001800 	.word	0x40001800
 800206c:	40001c00 	.word	0x40001c00
 8002070:	40002000 	.word	0x40002000

08002074 <TIM_TI1_ConfigInputStage>:
 * @param  TIM_ICFilter Specifies the Input Capture Filter.
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity,
		uint32_t TIM_ICFilter) {
 8002074:	b480      	push	{r7}
 8002076:	b087      	sub	sp, #28
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
	uint32_t tmpccmr1;
	uint32_t tmpccer;

	/* Disable the Channel 1: Reset the CC1E Bit */
	tmpccer = TIMx->CCER;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	617b      	str	r3, [r7, #20]
	TIMx->CCER &= ~TIM_CCER_CC1E;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	f023 0201 	bic.w	r2, r3, #1
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	621a      	str	r2, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	613b      	str	r3, [r7, #16]

	/* Set the filter */
	tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800209e:	613b      	str	r3, [r7, #16]
	tmpccmr1 |= (TIM_ICFilter << 4U);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	011b      	lsls	r3, r3, #4
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]

	/* Select the Polarity and set the CC1E Bit */
	tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f023 030a 	bic.w	r3, r3, #10
 80020b0:	617b      	str	r3, [r7, #20]
	tmpccer |= TIM_ICPolarity;
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	617b      	str	r3, [r7, #20]

	/* Write to TIMx CCMR1 and CCER registers */
	TIMx->CCMR1 = tmpccmr1;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	621a      	str	r2, [r3, #32]
}
 80020c6:	bf00      	nop
 80020c8:	371c      	adds	r7, #28
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <TIM_TI2_ConfigInputStage>:
 * @param  TIM_ICFilter Specifies the Input Capture Filter.
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity,
		uint32_t TIM_ICFilter) {
 80020d2:	b480      	push	{r7}
 80020d4:	b087      	sub	sp, #28
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
	uint32_t tmpccmr1;
	uint32_t tmpccer;

	/* Disable the Channel 2: Reset the CC2E Bit */
	tmpccer = TIMx->CCER;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	617b      	str	r3, [r7, #20]
	TIMx->CCER &= ~TIM_CCER_CC2E;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	f023 0210 	bic.w	r2, r3, #16
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	621a      	str	r2, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	613b      	str	r3, [r7, #16]

	/* Set the filter */
	tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80020fc:	613b      	str	r3, [r7, #16]
	tmpccmr1 |= (TIM_ICFilter << 12U);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	031b      	lsls	r3, r3, #12
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]

	/* Select the Polarity and set the CC2E Bit */
	tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800210e:	617b      	str	r3, [r7, #20]
	tmpccer |= (TIM_ICPolarity << 4U);
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	011b      	lsls	r3, r3, #4
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	4313      	orrs	r3, r2
 8002118:	617b      	str	r3, [r7, #20]

	/* Write to TIMx CCMR1 and CCER registers */
	TIMx->CCMR1 = tmpccmr1;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	621a      	str	r2, [r3, #32]
}
 8002126:	bf00      	nop
 8002128:	371c      	adds	r7, #28
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <TIM_ITRx_SetConfig>:
 *            @arg TIM_TS_TI1FP1: Filtered Timer Input 1
 *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
 *            @arg TIM_TS_ETRF: External Trigger input
 * @retval None
 */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource) {
 8002132:	b480      	push	{r7}
 8002134:	b085      	sub	sp, #20
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
	uint32_t tmpsmcr;

	/* Get the TIMx SMCR register value */
	tmpsmcr = TIMx->SMCR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	60fb      	str	r3, [r7, #12]
	/* Reset the TS Bits */
	tmpsmcr &= ~TIM_SMCR_TS;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002148:	60fb      	str	r3, [r7, #12]
	/* Set the Input Trigger source and the slave mode*/
	tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4313      	orrs	r3, r2
 8002150:	f043 0307 	orr.w	r3, r3, #7
 8002154:	60fb      	str	r3, [r7, #12]
	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	609a      	str	r2, [r3, #8]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <TIM_ETR_SetConfig>:
 * @param  ExtTRGFilter External Trigger Filter.
 *          This parameter must be a value between 0x00 and 0x0F
 * @retval None
 */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
		uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter) {
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	603b      	str	r3, [r7, #0]
	uint32_t tmpsmcr;

	tmpsmcr = TIMx->SMCR;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	617b      	str	r3, [r7, #20]

	/* Reset the ETR Bits */
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002182:	617b      	str	r3, [r7, #20]

	/* Set the Prescaler, the Filter value and the Polarity */
	tmpsmcr |= (uint32_t) (TIM_ExtTRGPrescaler
			| (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	021a      	lsls	r2, r3, #8
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	431a      	orrs	r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	4313      	orrs	r3, r2
	tmpsmcr |= (uint32_t) (TIM_ExtTRGPrescaler
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	4313      	orrs	r3, r2
 8002194:	617b      	str	r3, [r7, #20]

	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	609a      	str	r2, [r3, #8]
}
 800219c:	bf00      	nop
 800219e:	371c      	adds	r7, #28
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_TIMEx_MasterConfigSynchronization>:
 *         contains the selected trigger output (TRGO) and the Master/Slave
 *         mode.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
		const TIM_MasterConfigTypeDef *sMasterConfig) {
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
	assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
	assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
	assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

	/* Check input state */
	__HAL_LOCK(htim);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80021bc:	2302      	movs	r3, #2
 80021be:	e05a      	b.n	8002276 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	/* Change the handler state */
	htim->State = HAL_TIM_STATE_BUSY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2202      	movs	r2, #2
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

	/* Get the TIMx CR2 register value */
	tmpcr2 = htim->Instance->CR2;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	60fb      	str	r3, [r7, #12]

	/* Get the TIMx SMCR register value */
	tmpsmcr = htim->Instance->SMCR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	60bb      	str	r3, [r7, #8]

	/* Reset the MMS Bits */
	tmpcr2 &= ~TIM_CR2_MMS;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021e6:	60fb      	str	r3, [r7, #12]
	/* Select the TRGO source */
	tmpcr2 |= sMasterConfig->MasterOutputTrigger;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]

	/* Update TIMx CR2 */
	htim->Instance->CR2 = tmpcr2;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	605a      	str	r2, [r3, #4]

	if (IS_TIM_SLAVE_INSTANCE(htim->Instance)) {
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a21      	ldr	r2, [pc, #132]	@ (8002284 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d022      	beq.n	800224a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800220c:	d01d      	beq.n	800224a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a1d      	ldr	r2, [pc, #116]	@ (8002288 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d018      	beq.n	800224a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a1b      	ldr	r2, [pc, #108]	@ (800228c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d013      	beq.n	800224a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a1a      	ldr	r2, [pc, #104]	@ (8002290 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d00e      	beq.n	800224a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a18      	ldr	r2, [pc, #96]	@ (8002294 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d009      	beq.n	800224a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a17      	ldr	r2, [pc, #92]	@ (8002298 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d004      	beq.n	800224a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a15      	ldr	r2, [pc, #84]	@ (800229c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d10c      	bne.n	8002264 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
		/* Reset the MSM Bit */
		tmpsmcr &= ~TIM_SMCR_MSM;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002250:	60bb      	str	r3, [r7, #8]
		/* Set master mode */
		tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	4313      	orrs	r3, r2
 800225a:	60bb      	str	r3, [r7, #8]

		/* Update TIMx SMCR */
		htim->Instance->SMCR = tmpsmcr;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	609a      	str	r2, [r3, #8]
	}

	/* Change the htim state */
	htim->State = HAL_TIM_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

	__HAL_UNLOCK(htim);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40010000 	.word	0x40010000
 8002288:	40000400 	.word	0x40000400
 800228c:	40000800 	.word	0x40000800
 8002290:	40000c00 	.word	0x40000c00
 8002294:	40010400 	.word	0x40010400
 8002298:	40014000 	.word	0x40014000
 800229c:	40001800 	.word	0x40001800

080022a0 <HAL_TIMEx_CommutCallback>:
/**
 * @brief  Commutation callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim) {
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIMEx_CommutCallback could be implemented in the user file
	 */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_TIMEx_BreakCallback>:
/**
 * @brief  Break detection callback in non-blocking mode
 * @param  htim TIM handle
 * @retval None
 */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim) {
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIMEx_BreakCallback could be implemented in the user file
	 */
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <SoftUartGpioReadPin>:

// Parity var
static uint8_t DV, PCount;

// Read RX single Pin Value
GPIO_PinState SoftUartGpioReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	807b      	strh	r3, [r7, #2]
	return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 80022d4:	887b      	ldrh	r3, [r7, #2]
 80022d6:	4619      	mov	r1, r3
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7fe fef7 	bl	80010cc <HAL_GPIO_ReadPin>
 80022de:	4603      	mov	r3, r0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <SoftUartGpioWritePin>:

// Write TX single Pin Value
void SoftUartGpioWritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		GPIO_PinState PinState) {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	807b      	strh	r3, [r7, #2]
 80022f4:	4613      	mov	r3, r2
 80022f6:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 80022f8:	787a      	ldrb	r2, [r7, #1]
 80022fa:	887b      	ldrh	r3, [r7, #2]
 80022fc:	4619      	mov	r1, r3
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7fe fefc 	bl	80010fc <HAL_GPIO_WritePin>
}
 8002304:	bf00      	nop
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <SoftUartInit>:

// Initial Soft Uart
SoftUartState_E SoftUartInit(uint8_t SoftUartNumber, GPIO_TypeDef *TxPort,
		uint16_t TxPin, GPIO_TypeDef *RxPort, uint16_t RxPin) {
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607b      	str	r3, [r7, #4]
 8002316:	4603      	mov	r3, r0
 8002318:	73fb      	strb	r3, [r7, #15]
 800231a:	4613      	mov	r3, r2
 800231c:	81bb      	strh	r3, [r7, #12]
	if (SoftUartNumber >= Number_Of_SoftUarts)
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <SoftUartInit+0x1c>
		return SoftUart_Error;
 8002324:	2301      	movs	r3, #1
 8002326:	e07c      	b.n	8002422 <SoftUartInit+0x116>

	SUart[SoftUartNumber].TxNComplated = 0;
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	4a41      	ldr	r2, [pc, #260]	@ (8002430 <SoftUartInit+0x124>)
 800232c:	015b      	lsls	r3, r3, #5
 800232e:	4413      	add	r3, r2
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]

	SUart[SoftUartNumber].RxBitCounter = 0;
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	4a3e      	ldr	r2, [pc, #248]	@ (8002430 <SoftUartInit+0x124>)
 8002338:	015b      	lsls	r3, r3, #5
 800233a:	4413      	add	r3, r2
 800233c:	3306      	adds	r3, #6
 800233e:	2200      	movs	r2, #0
 8002340:	701a      	strb	r2, [r3, #0]
	SUart[SoftUartNumber].RxBitShift = 0;
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	4a3a      	ldr	r2, [pc, #232]	@ (8002430 <SoftUartInit+0x124>)
 8002346:	015b      	lsls	r3, r3, #5
 8002348:	4413      	add	r3, r2
 800234a:	3305      	adds	r3, #5
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
	SUart[SoftUartNumber].RxIndex = 0;
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	4a37      	ldr	r2, [pc, #220]	@ (8002430 <SoftUartInit+0x124>)
 8002354:	015b      	lsls	r3, r3, #5
 8002356:	4413      	add	r3, r2
 8002358:	3309      	adds	r3, #9
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]

	SUart[SoftUartNumber].TxEnable = 0;
 800235e:	7bfb      	ldrb	r3, [r7, #15]
 8002360:	4a33      	ldr	r2, [pc, #204]	@ (8002430 <SoftUartInit+0x124>)
 8002362:	015b      	lsls	r3, r3, #5
 8002364:	4413      	add	r3, r2
 8002366:	3301      	adds	r3, #1
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
	SUart[SoftUartNumber].RxEnable = 0;
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	4a30      	ldr	r2, [pc, #192]	@ (8002430 <SoftUartInit+0x124>)
 8002370:	015b      	lsls	r3, r3, #5
 8002372:	4413      	add	r3, r2
 8002374:	3302      	adds	r3, #2
 8002376:	2200      	movs	r2, #0
 8002378:	701a      	strb	r2, [r3, #0]

	SUart[SoftUartNumber].TxBitCounter = 0;
 800237a:	7bfb      	ldrb	r3, [r7, #15]
 800237c:	4a2c      	ldr	r2, [pc, #176]	@ (8002430 <SoftUartInit+0x124>)
 800237e:	015b      	lsls	r3, r3, #5
 8002380:	4413      	add	r3, r2
 8002382:	3304      	adds	r3, #4
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
	SUart[SoftUartNumber].TxBitShift = 0;
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	4a29      	ldr	r2, [pc, #164]	@ (8002430 <SoftUartInit+0x124>)
 800238c:	015b      	lsls	r3, r3, #5
 800238e:	4413      	add	r3, r2
 8002390:	3303      	adds	r3, #3
 8002392:	2200      	movs	r2, #0
 8002394:	701a      	strb	r2, [r3, #0]
	SUart[SoftUartNumber].TxIndex = 0;
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	4a25      	ldr	r2, [pc, #148]	@ (8002430 <SoftUartInit+0x124>)
 800239a:	015b      	lsls	r3, r3, #5
 800239c:	4413      	add	r3, r2
 800239e:	3307      	adds	r3, #7
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]

	SUart[SoftUartNumber].TxSize = 0;
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	4a22      	ldr	r2, [pc, #136]	@ (8002430 <SoftUartInit+0x124>)
 80023a8:	015b      	lsls	r3, r3, #5
 80023aa:	4413      	add	r3, r2
 80023ac:	3308      	adds	r3, #8
 80023ae:	2200      	movs	r2, #0
 80023b0:	701a      	strb	r2, [r3, #0]

	SUart[SoftUartNumber].Buffer = &SUBuffer[SoftUartNumber];
 80023b2:	7bfa      	ldrb	r2, [r7, #15]
 80023b4:	7bf9      	ldrb	r1, [r7, #15]
 80023b6:	4613      	mov	r3, r2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	4413      	add	r3, r2
 80023bc:	015b      	lsls	r3, r3, #5
 80023be:	4a1d      	ldr	r2, [pc, #116]	@ (8002434 <SoftUartInit+0x128>)
 80023c0:	441a      	add	r2, r3
 80023c2:	481b      	ldr	r0, [pc, #108]	@ (8002430 <SoftUartInit+0x124>)
 80023c4:	014b      	lsls	r3, r1, #5
 80023c6:	4403      	add	r3, r0
 80023c8:	330c      	adds	r3, #12
 80023ca:	601a      	str	r2, [r3, #0]

	SUart[SoftUartNumber].RxPort = RxPort;
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	4a18      	ldr	r2, [pc, #96]	@ (8002430 <SoftUartInit+0x124>)
 80023d0:	015b      	lsls	r3, r3, #5
 80023d2:	4413      	add	r3, r2
 80023d4:	3318      	adds	r3, #24
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	601a      	str	r2, [r3, #0]
	SUart[SoftUartNumber].RxPin = RxPin;
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	4a14      	ldr	r2, [pc, #80]	@ (8002430 <SoftUartInit+0x124>)
 80023de:	015b      	lsls	r3, r3, #5
 80023e0:	4413      	add	r3, r2
 80023e2:	331c      	adds	r3, #28
 80023e4:	8b3a      	ldrh	r2, [r7, #24]
 80023e6:	801a      	strh	r2, [r3, #0]

	SUart[SoftUartNumber].TxPort = TxPort;
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	4a11      	ldr	r2, [pc, #68]	@ (8002430 <SoftUartInit+0x124>)
 80023ec:	015b      	lsls	r3, r3, #5
 80023ee:	4413      	add	r3, r2
 80023f0:	3310      	adds	r3, #16
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	601a      	str	r2, [r3, #0]
	SUart[SoftUartNumber].TxPin = TxPin;
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002430 <SoftUartInit+0x124>)
 80023fa:	015b      	lsls	r3, r3, #5
 80023fc:	4413      	add	r3, r2
 80023fe:	3314      	adds	r3, #20
 8002400:	89ba      	ldrh	r2, [r7, #12]
 8002402:	801a      	strh	r2, [r3, #0]

	SUart[SoftUartNumber].RxTimingFlag = 0;
 8002404:	7bfb      	ldrb	r3, [r7, #15]
 8002406:	4a0a      	ldr	r2, [pc, #40]	@ (8002430 <SoftUartInit+0x124>)
 8002408:	015b      	lsls	r3, r3, #5
 800240a:	4413      	add	r3, r2
 800240c:	331e      	adds	r3, #30
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
	SUart[SoftUartNumber].RxBitOffset = 0;
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	4a06      	ldr	r2, [pc, #24]	@ (8002430 <SoftUartInit+0x124>)
 8002416:	015b      	lsls	r3, r3, #5
 8002418:	4413      	add	r3, r2
 800241a:	331f      	adds	r3, #31
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]

	return SoftUart_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	200000ec 	.word	0x200000ec
 8002434:	2000010c 	.word	0x2000010c

08002438 <SoftUartTransmitBit>:

// Send one bit to TX pin
void SoftUartTransmitBit(SoftUart_S *SU, uint8_t Bit0_1) {
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	70fb      	strb	r3, [r7, #3]
	SoftUartGpioWritePin(SU->TxPort, SU->TxPin, (GPIO_PinState) Bit0_1);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6918      	ldr	r0, [r3, #16]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	8a9b      	ldrh	r3, [r3, #20]
 800244c:	78fa      	ldrb	r2, [r7, #3]
 800244e:	4619      	mov	r1, r3
 8002450:	f7ff ff4a 	bl	80022e8 <SoftUartGpioWritePin>
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <SoftUartTxProcess>:
	SUart[SoftUartNumber].RxIndex -= Len;
	return SoftUart_OK;
}

// Soft Uart Transmit Data Process
void SoftUartTxProcess(SoftUart_S *SU) {
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
	if (SU->TxEnable) {
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	785b      	ldrb	r3, [r3, #1]
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 8090 	beq.w	800258e <SoftUartTxProcess+0x132>
		// Start
		if (SU->TxBitCounter == 0) {
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	791b      	ldrb	r3, [r3, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d113      	bne.n	800249e <SoftUartTxProcess+0x42>
			SU->TxNComplated = 1;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	701a      	strb	r2, [r3, #0]
			SU->TxBitShift = 0;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	70da      	strb	r2, [r3, #3]
			SoftUartTransmitBit(SU, 0);
 8002482:	2100      	movs	r1, #0
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7ff ffd7 	bl	8002438 <SoftUartTransmitBit>
			SU->TxBitCounter++;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	791b      	ldrb	r3, [r3, #4]
 800248e:	3301      	adds	r3, #1
 8002490:	b2da      	uxtb	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	711a      	strb	r2, [r3, #4]
			PCount = 0;
 8002496:	4b40      	ldr	r3, [pc, #256]	@ (8002598 <SoftUartTxProcess+0x13c>)
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
				SU->TxNComplated = 0;
				SU->TxEnable = 0;
			}
		}
	}
}
 800249c:	e077      	b.n	800258e <SoftUartTxProcess+0x132>
		else if (SU->TxBitCounter < (SoftUart_DATA_LEN + 1)) {
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	791b      	ldrb	r3, [r3, #4]
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d82c      	bhi.n	8002500 <SoftUartTxProcess+0xa4>
			DV = ((SU->Buffer->Tx[SU->TxIndex]) >> (SU->TxBitShift)) & 0x01;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	79d2      	ldrb	r2, [r2, #7]
 80024ae:	5c9b      	ldrb	r3, [r3, r2]
 80024b0:	461a      	mov	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	78db      	ldrb	r3, [r3, #3]
 80024b6:	fa42 f303 	asr.w	r3, r2, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	4b36      	ldr	r3, [pc, #216]	@ (800259c <SoftUartTxProcess+0x140>)
 80024c4:	701a      	strb	r2, [r3, #0]
			SoftUartTransmitBit(SU, DV);
 80024c6:	4b35      	ldr	r3, [pc, #212]	@ (800259c <SoftUartTxProcess+0x140>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	4619      	mov	r1, r3
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff ffb3 	bl	8002438 <SoftUartTransmitBit>
			SU->TxBitCounter++;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	791b      	ldrb	r3, [r3, #4]
 80024d6:	3301      	adds	r3, #1
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	711a      	strb	r2, [r3, #4]
			SU->TxBitShift++;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	78db      	ldrb	r3, [r3, #3]
 80024e2:	3301      	adds	r3, #1
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	70da      	strb	r2, [r3, #3]
			if (DV)
 80024ea:	4b2c      	ldr	r3, [pc, #176]	@ (800259c <SoftUartTxProcess+0x140>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d04d      	beq.n	800258e <SoftUartTxProcess+0x132>
				PCount++;
 80024f2:	4b29      	ldr	r3, [pc, #164]	@ (8002598 <SoftUartTxProcess+0x13c>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	3301      	adds	r3, #1
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4b27      	ldr	r3, [pc, #156]	@ (8002598 <SoftUartTxProcess+0x13c>)
 80024fc:	701a      	strb	r2, [r3, #0]
}
 80024fe:	e046      	b.n	800258e <SoftUartTxProcess+0x132>
		else if (SU->TxBitCounter < SoftUart_IDEF_LEN_C1) {
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	791b      	ldrb	r3, [r3, #4]
 8002504:	2b08      	cmp	r3, #8
 8002506:	d813      	bhi.n	8002530 <SoftUartTxProcess+0xd4>
			DV = PCount % 2;
 8002508:	4b23      	ldr	r3, [pc, #140]	@ (8002598 <SoftUartTxProcess+0x13c>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	b2da      	uxtb	r2, r3
 8002512:	4b22      	ldr	r3, [pc, #136]	@ (800259c <SoftUartTxProcess+0x140>)
 8002514:	701a      	strb	r2, [r3, #0]
			SoftUartTransmitBit(SU, DV);
 8002516:	4b21      	ldr	r3, [pc, #132]	@ (800259c <SoftUartTxProcess+0x140>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	4619      	mov	r1, r3
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ff8b 	bl	8002438 <SoftUartTransmitBit>
			SU->TxBitCounter++;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	791b      	ldrb	r3, [r3, #4]
 8002526:	3301      	adds	r3, #1
 8002528:	b2da      	uxtb	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	711a      	strb	r2, [r3, #4]
}
 800252e:	e02e      	b.n	800258e <SoftUartTxProcess+0x132>
		else if (SU->TxBitCounter < SoftUart_IDEF_LEN_C2) {
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	791b      	ldrb	r3, [r3, #4]
 8002534:	2b09      	cmp	r3, #9
 8002536:	d80a      	bhi.n	800254e <SoftUartTxProcess+0xf2>
			SoftUartTransmitBit(SU, 1);
 8002538:	2101      	movs	r1, #1
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ff7c 	bl	8002438 <SoftUartTransmitBit>
			SU->TxBitCounter++;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	791b      	ldrb	r3, [r3, #4]
 8002544:	3301      	adds	r3, #1
 8002546:	b2da      	uxtb	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	711a      	strb	r2, [r3, #4]
}
 800254c:	e01f      	b.n	800258e <SoftUartTxProcess+0x132>
		else if (SU->TxBitCounter == SoftUart_IDEF_LEN_C2) {
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	791b      	ldrb	r3, [r3, #4]
 8002552:	2b0a      	cmp	r3, #10
 8002554:	d11b      	bne.n	800258e <SoftUartTxProcess+0x132>
			SU->TxBitCounter = 0;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	711a      	strb	r2, [r3, #4]
			SU->TxIndex++;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	79db      	ldrb	r3, [r3, #7]
 8002560:	3301      	adds	r3, #1
 8002562:	b2da      	uxtb	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	71da      	strb	r2, [r3, #7]
			if (SU->TxSize > SU->TxIndex) {
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	7a1a      	ldrb	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	79db      	ldrb	r3, [r3, #7]
 8002570:	429a      	cmp	r2, r3
 8002572:	d906      	bls.n	8002582 <SoftUartTxProcess+0x126>
				SU->TxNComplated = 1;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	701a      	strb	r2, [r3, #0]
				SU->TxEnable = 1;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	705a      	strb	r2, [r3, #1]
}
 8002580:	e005      	b.n	800258e <SoftUartTxProcess+0x132>
				SU->TxNComplated = 0;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	701a      	strb	r2, [r3, #0]
				SU->TxEnable = 0;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	705a      	strb	r2, [r3, #1]
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	2000016e 	.word	0x2000016e
 800259c:	2000016d 	.word	0x2000016d

080025a0 <SoftUartRxDataBitProcess>:

// Soft Uart Receive Data Process
void SoftUartRxDataBitProcess(SoftUart_S *SU, uint8_t B0_1) {
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	70fb      	strb	r3, [r7, #3]
	if (SU->RxEnable) {
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	789b      	ldrb	r3, [r3, #2]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d067      	beq.n	8002684 <SoftUartRxDataBitProcess+0xe4>
		// Start
		if (SU->RxBitCounter == 0) {
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	799b      	ldrb	r3, [r3, #6]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d114      	bne.n	80025e6 <SoftUartRxDataBitProcess+0x46>
			// Start Bit is 0
			if (B0_1)
 80025bc:	78fb      	ldrb	r3, [r7, #3]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d15f      	bne.n	8002682 <SoftUartRxDataBitProcess+0xe2>
				return;

			SU->RxBitShift = 0;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	715a      	strb	r2, [r3, #5]
			SU->RxBitCounter++;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	799b      	ldrb	r3, [r3, #6]
 80025cc:	3301      	adds	r3, #1
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	719a      	strb	r2, [r3, #6]
			SU->Buffer->Rx[SU->RxIndex] = 0;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	7a52      	ldrb	r2, [r2, #9]
 80025dc:	4413      	add	r3, r2
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2020 	strb.w	r2, [r3, #32]
 80025e4:	e04e      	b.n	8002684 <SoftUartRxDataBitProcess+0xe4>
		}
		// Data
		else if (SU->RxBitCounter < (SoftUart_DATA_LEN + 1)) {
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	799b      	ldrb	r3, [r3, #6]
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d826      	bhi.n	800263c <SoftUartRxDataBitProcess+0x9c>
			SU->Buffer->Rx[SU->RxIndex] |= ((B0_1 & 0x01) << SU->RxBitShift);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	7a52      	ldrb	r2, [r2, #9]
 80025f6:	4413      	add	r3, r2
 80025f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025fc:	b25a      	sxtb	r2, r3
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	7949      	ldrb	r1, [r1, #5]
 8002608:	408b      	lsls	r3, r1
 800260a:	b25b      	sxtb	r3, r3
 800260c:	4313      	orrs	r3, r2
 800260e:	b258      	sxtb	r0, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	7a52      	ldrb	r2, [r2, #9]
 8002618:	4611      	mov	r1, r2
 800261a:	b2c2      	uxtb	r2, r0
 800261c:	440b      	add	r3, r1
 800261e:	f883 2020 	strb.w	r2, [r3, #32]
			SU->RxBitCounter++;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	799b      	ldrb	r3, [r3, #6]
 8002626:	3301      	adds	r3, #1
 8002628:	b2da      	uxtb	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	719a      	strb	r2, [r3, #6]
			SU->RxBitShift++;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	795b      	ldrb	r3, [r3, #5]
 8002632:	3301      	adds	r3, #1
 8002634:	b2da      	uxtb	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	715a      	strb	r2, [r3, #5]
 800263a:	e023      	b.n	8002684 <SoftUartRxDataBitProcess+0xe4>
		}
		// Parity
		else if (SU->RxBitCounter < SoftUart_IDEF_LEN_C1) {
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	799b      	ldrb	r3, [r3, #6]
 8002640:	2b08      	cmp	r3, #8
 8002642:	d806      	bhi.n	8002652 <SoftUartRxDataBitProcess+0xb2>
			// Need to be check
			// B0_1;
			SU->RxBitCounter++;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	799b      	ldrb	r3, [r3, #6]
 8002648:	3301      	adds	r3, #1
 800264a:	b2da      	uxtb	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	719a      	strb	r2, [r3, #6]
 8002650:	e018      	b.n	8002684 <SoftUartRxDataBitProcess+0xe4>
		}
		// Stop & Complete
		else if (SU->RxBitCounter < SoftUart_IDEF_LEN_C2) {
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	799b      	ldrb	r3, [r3, #6]
 8002656:	2b09      	cmp	r3, #9
 8002658:	d814      	bhi.n	8002684 <SoftUartRxDataBitProcess+0xe4>
			SU->RxBitCounter = 0;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	719a      	strb	r2, [r3, #6]
			SU->RxTimingFlag = 0;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	779a      	strb	r2, [r3, #30]

			//Stop Bit must be 1
			if (B0_1) {
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00b      	beq.n	8002684 <SoftUartRxDataBitProcess+0xe4>
				// Received successfully
				// Change RX Buffer Index
				if ((SU->RxIndex) < (SoftUartRxBufferSize - 1))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	7a5b      	ldrb	r3, [r3, #9]
 8002670:	2b3e      	cmp	r3, #62	@ 0x3e
 8002672:	d807      	bhi.n	8002684 <SoftUartRxDataBitProcess+0xe4>
					(SU->RxIndex)++;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	7a5b      	ldrb	r3, [r3, #9]
 8002678:	3301      	adds	r3, #1
 800267a:	b2da      	uxtb	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	725a      	strb	r2, [r3, #9]
 8002680:	e000      	b.n	8002684 <SoftUartRxDataBitProcess+0xe4>
				return;
 8002682:	bf00      	nop
			}
			// if not : ERROR -> Overwrite data
		}
	}
}
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <SoftUartPuts>:
	while (SUart[SoftUartNumber].TxNComplated)
		;
}

// Copy Data to Transmit Buffer and Start Sending
SoftUartState_E SoftUartPuts(uint8_t SoftUartNumber, uint8_t *Data, uint8_t Len) {
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	6039      	str	r1, [r7, #0]
 800269a:	71fb      	strb	r3, [r7, #7]
 800269c:	4613      	mov	r3, r2
 800269e:	71bb      	strb	r3, [r7, #6]
	int i;

	if (SoftUartNumber >= Number_Of_SoftUarts)
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <SoftUartPuts+0x1a>
		return SoftUart_Error;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e03d      	b.n	8002726 <SoftUartPuts+0x96>
	if (SUart[SoftUartNumber].TxNComplated)
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	4a21      	ldr	r2, [pc, #132]	@ (8002734 <SoftUartPuts+0xa4>)
 80026ae:	015b      	lsls	r3, r3, #5
 80026b0:	4413      	add	r3, r2
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <SoftUartPuts+0x2e>
		return SoftUart_Error;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e033      	b.n	8002726 <SoftUartPuts+0x96>

	SUart[SoftUartNumber].TxIndex = 0;
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002734 <SoftUartPuts+0xa4>)
 80026c2:	015b      	lsls	r3, r3, #5
 80026c4:	4413      	add	r3, r2
 80026c6:	3307      	adds	r3, #7
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
	SUart[SoftUartNumber].TxSize = Len;
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	4a19      	ldr	r2, [pc, #100]	@ (8002734 <SoftUartPuts+0xa4>)
 80026d0:	015b      	lsls	r3, r3, #5
 80026d2:	4413      	add	r3, r2
 80026d4:	3308      	adds	r3, #8
 80026d6:	79ba      	ldrb	r2, [r7, #6]
 80026d8:	701a      	strb	r2, [r3, #0]

	for (i = 0; i < Len; i++) {
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	e010      	b.n	8002702 <SoftUartPuts+0x72>
		SUart[SoftUartNumber].Buffer->Tx[i] = Data[i];
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	4413      	add	r3, r2
 80026e6:	79fa      	ldrb	r2, [r7, #7]
 80026e8:	4912      	ldr	r1, [pc, #72]	@ (8002734 <SoftUartPuts+0xa4>)
 80026ea:	0152      	lsls	r2, r2, #5
 80026ec:	440a      	add	r2, r1
 80026ee:	320c      	adds	r2, #12
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	7819      	ldrb	r1, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4413      	add	r3, r2
 80026f8:	460a      	mov	r2, r1
 80026fa:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < Len; i++) {
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	3301      	adds	r3, #1
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	79bb      	ldrb	r3, [r7, #6]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	429a      	cmp	r2, r3
 8002708:	dbea      	blt.n	80026e0 <SoftUartPuts+0x50>
	}

	SUart[SoftUartNumber].TxNComplated = 1;
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	4a09      	ldr	r2, [pc, #36]	@ (8002734 <SoftUartPuts+0xa4>)
 800270e:	015b      	lsls	r3, r3, #5
 8002710:	4413      	add	r3, r2
 8002712:	2201      	movs	r2, #1
 8002714:	701a      	strb	r2, [r3, #0]
	SUart[SoftUartNumber].TxEnable = 1;
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	4a06      	ldr	r2, [pc, #24]	@ (8002734 <SoftUartPuts+0xa4>)
 800271a:	015b      	lsls	r3, r3, #5
 800271c:	4413      	add	r3, r2
 800271e:	3301      	adds	r3, #1
 8002720:	2201      	movs	r2, #1
 8002722:	701a      	strb	r2, [r3, #0]

	return SoftUart_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	200000ec 	.word	0x200000ec

08002738 <SoftUartScanRxPorts>:

// Capture RX and Get BitOffset
uint8_t SoftUartScanRxPorts(void) {
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
	int i;
	uint8_t Buffer = 0x00, Bit;
 800273e:	2300      	movs	r3, #0
 8002740:	70fb      	strb	r3, [r7, #3]

	for (i = 0; i < Number_Of_SoftUarts; i++) {
 8002742:	2300      	movs	r3, #0
 8002744:	607b      	str	r3, [r7, #4]
 8002746:	e050      	b.n	80027ea <SoftUartScanRxPorts+0xb2>
		// Read RX GPIO Value
		Bit = SoftUartGpioReadPin(SUart[i].RxPort, SUart[i].RxPin);
 8002748:	4a2c      	ldr	r2, [pc, #176]	@ (80027fc <SoftUartScanRxPorts+0xc4>)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	015b      	lsls	r3, r3, #5
 800274e:	4413      	add	r3, r2
 8002750:	3318      	adds	r3, #24
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4929      	ldr	r1, [pc, #164]	@ (80027fc <SoftUartScanRxPorts+0xc4>)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	015b      	lsls	r3, r3, #5
 800275a:	440b      	add	r3, r1
 800275c:	331c      	adds	r3, #28
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	4619      	mov	r1, r3
 8002762:	4610      	mov	r0, r2
 8002764:	f7ff fdb0 	bl	80022c8 <SoftUartGpioReadPin>
 8002768:	4603      	mov	r3, r0
 800276a:	70bb      	strb	r3, [r7, #2]

		// Starting conditions
		if (!SUart[i].RxBitCounter && !SUart[i].RxTimingFlag && !Bit) {
 800276c:	4a23      	ldr	r2, [pc, #140]	@ (80027fc <SoftUartScanRxPorts+0xc4>)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	015b      	lsls	r3, r3, #5
 8002772:	4413      	add	r3, r2
 8002774:	3306      	adds	r3, #6
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d127      	bne.n	80027cc <SoftUartScanRxPorts+0x94>
 800277c:	4a1f      	ldr	r2, [pc, #124]	@ (80027fc <SoftUartScanRxPorts+0xc4>)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	015b      	lsls	r3, r3, #5
 8002782:	4413      	add	r3, r2
 8002784:	331e      	adds	r3, #30
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d11f      	bne.n	80027cc <SoftUartScanRxPorts+0x94>
 800278c:	78bb      	ldrb	r3, [r7, #2]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d11c      	bne.n	80027cc <SoftUartScanRxPorts+0x94>
			// Save RX Bit Offset
			// Calculate middle position of data puls
			SUart[i].RxBitOffset = ((SU_Timer + 2) % 5);
 8002792:	4b1b      	ldr	r3, [pc, #108]	@ (8002800 <SoftUartScanRxPorts+0xc8>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	b2db      	uxtb	r3, r3
 8002798:	1c9a      	adds	r2, r3, #2
 800279a:	4b1a      	ldr	r3, [pc, #104]	@ (8002804 <SoftUartScanRxPorts+0xcc>)
 800279c:	fb83 1302 	smull	r1, r3, r3, r2
 80027a0:	1059      	asrs	r1, r3, #1
 80027a2:	17d3      	asrs	r3, r2, #31
 80027a4:	1ac9      	subs	r1, r1, r3
 80027a6:	460b      	mov	r3, r1
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	1ad1      	subs	r1, r2, r3
 80027ae:	b2c9      	uxtb	r1, r1
 80027b0:	4a12      	ldr	r2, [pc, #72]	@ (80027fc <SoftUartScanRxPorts+0xc4>)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	015b      	lsls	r3, r3, #5
 80027b6:	4413      	add	r3, r2
 80027b8:	331f      	adds	r3, #31
 80027ba:	460a      	mov	r2, r1
 80027bc:	701a      	strb	r2, [r3, #0]

			// Timing Offset is Set
			SUart[i].RxTimingFlag = 1;
 80027be:	4a0f      	ldr	r2, [pc, #60]	@ (80027fc <SoftUartScanRxPorts+0xc4>)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	015b      	lsls	r3, r3, #5
 80027c4:	4413      	add	r3, r2
 80027c6:	331e      	adds	r3, #30
 80027c8:	2201      	movs	r2, #1
 80027ca:	701a      	strb	r2, [r3, #0]
		}

		// Add all RX GPIO State to Buffer
		Buffer |= ((Bit & 0x01) << i);
 80027cc:	78bb      	ldrb	r3, [r7, #2]
 80027ce:	f003 0201 	and.w	r2, r3, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	b25a      	sxtb	r2, r3
 80027da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027de:	4313      	orrs	r3, r2
 80027e0:	b25b      	sxtb	r3, r3
 80027e2:	70fb      	strb	r3, [r7, #3]
	for (i = 0; i < Number_Of_SoftUarts; i++) {
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3301      	adds	r3, #1
 80027e8:	607b      	str	r3, [r7, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	ddab      	ble.n	8002748 <SoftUartScanRxPorts+0x10>
	}
	return Buffer;
 80027f0:	78fb      	ldrb	r3, [r7, #3]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	200000ec 	.word	0x200000ec
 8002800:	2000016c 	.word	0x2000016c
 8002804:	66666667 	.word	0x66666667

08002808 <SoftUartHandler>:

// SoftUartHandler must call in interrupt every 0.2*(1/BR)
// if BR=9600 then 0.2*(1/9600)=20.8333333 uS
void SoftUartHandler(void) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
	int i;
	uint8_t SU_DBuffer;

	// Capture RX and Get BitOffset
	SU_DBuffer = SoftUartScanRxPorts();
 800280e:	f7ff ff93 	bl	8002738 <SoftUartScanRxPorts>
 8002812:	4603      	mov	r3, r0
 8002814:	70fb      	strb	r3, [r7, #3]

	for (i = 0; i < Number_Of_SoftUarts; i++) {
 8002816:	2300      	movs	r3, #0
 8002818:	607b      	str	r3, [r7, #4]
 800281a:	e01c      	b.n	8002856 <SoftUartHandler+0x4e>
		// Receive Data if we in middle data pulse position
		if (SUart[i].RxBitOffset == SU_Timer) {
 800281c:	4a23      	ldr	r2, [pc, #140]	@ (80028ac <SoftUartHandler+0xa4>)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	015b      	lsls	r3, r3, #5
 8002822:	4413      	add	r3, r2
 8002824:	331f      	adds	r3, #31
 8002826:	781a      	ldrb	r2, [r3, #0]
 8002828:	4b21      	ldr	r3, [pc, #132]	@ (80028b0 <SoftUartHandler+0xa8>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	429a      	cmp	r2, r3
 8002830:	d10e      	bne.n	8002850 <SoftUartHandler+0x48>
			SoftUartRxDataBitProcess(&SUart[i], ((SU_DBuffer >> i) & 0x01));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	015b      	lsls	r3, r3, #5
 8002836:	4a1d      	ldr	r2, [pc, #116]	@ (80028ac <SoftUartHandler+0xa4>)
 8002838:	1898      	adds	r0, r3, r2
 800283a:	78fa      	ldrb	r2, [r7, #3]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	fa42 f303 	asr.w	r3, r2, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	b2db      	uxtb	r3, r3
 800284a:	4619      	mov	r1, r3
 800284c:	f7ff fea8 	bl	80025a0 <SoftUartRxDataBitProcess>
	for (i = 0; i < Number_Of_SoftUarts; i++) {
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3301      	adds	r3, #1
 8002854:	607b      	str	r3, [r7, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	dddf      	ble.n	800281c <SoftUartHandler+0x14>
		}
	}

	// Sending always happens in the first time slot
	if (SU_Timer == 0) {
 800285c:	4b14      	ldr	r3, [pc, #80]	@ (80028b0 <SoftUartHandler+0xa8>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10f      	bne.n	8002886 <SoftUartHandler+0x7e>
		// Transmit Data
		for (i = 0; i < Number_Of_SoftUarts; i++) {
 8002866:	2300      	movs	r3, #0
 8002868:	607b      	str	r3, [r7, #4]
 800286a:	e009      	b.n	8002880 <SoftUartHandler+0x78>
			SoftUartTxProcess(&SUart[i]);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	015b      	lsls	r3, r3, #5
 8002870:	4a0e      	ldr	r2, [pc, #56]	@ (80028ac <SoftUartHandler+0xa4>)
 8002872:	4413      	add	r3, r2
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff fdf1 	bl	800245c <SoftUartTxProcess>
		for (i = 0; i < Number_Of_SoftUarts; i++) {
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3301      	adds	r3, #1
 800287e:	607b      	str	r3, [r7, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	ddf2      	ble.n	800286c <SoftUartHandler+0x64>
		}
	}

	// Timing process
	SU_Timer++;
 8002886:	4b0a      	ldr	r3, [pc, #40]	@ (80028b0 <SoftUartHandler+0xa8>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	3301      	adds	r3, #1
 800288e:	b2da      	uxtb	r2, r3
 8002890:	4b07      	ldr	r3, [pc, #28]	@ (80028b0 <SoftUartHandler+0xa8>)
 8002892:	701a      	strb	r2, [r3, #0]
	if (SU_Timer >= 5)
 8002894:	4b06      	ldr	r3, [pc, #24]	@ (80028b0 <SoftUartHandler+0xa8>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b04      	cmp	r3, #4
 800289c:	d902      	bls.n	80028a4 <SoftUartHandler+0x9c>
		SU_Timer = 0;
 800289e:	4b04      	ldr	r3, [pc, #16]	@ (80028b0 <SoftUartHandler+0xa8>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]
}
 80028a4:	bf00      	nop
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	200000ec 	.word	0x200000ec
 80028b0:	2000016c 	.word	0x2000016c

080028b4 <getNumMotors>:
    // 可以继续添加更多电机...
};


// 获取电机数量
static inline uint8_t getNumMotors(void) {
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
    return sizeof(motors) / sizeof(motors[0]);
 80028b8:	2301      	movs	r3, #1
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <motors_setup>:

// 初始化电机组
void motors_setup(void) {
 80028c4:	b590      	push	{r4, r7, lr}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af02      	add	r7, sp, #8
    for (size_t i = 0; i < getNumMotors(); ++i) {
 80028ca:	2300      	movs	r3, #0
 80028cc:	607b      	str	r3, [r7, #4]
 80028ce:	e07a      	b.n	80029c6 <motors_setup+0x102>
        // 检查是否有有效的 UART 端口配置
        if (motors[i].port_uart != NULL && motors[i].pin_uart != 0) {
 80028d0:	4943      	ldr	r1, [pc, #268]	@ (80029e0 <motors_setup+0x11c>)
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	4413      	add	r3, r2
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	440b      	add	r3, r1
 80028de:	3328      	adds	r3, #40	@ 0x28
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d06c      	beq.n	80029c0 <motors_setup+0xfc>
 80028e6:	493e      	ldr	r1, [pc, #248]	@ (80029e0 <motors_setup+0x11c>)
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4413      	add	r3, r2
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	440b      	add	r3, r1
 80028f4:	332c      	adds	r3, #44	@ 0x2c
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d061      	beq.n	80029c0 <motors_setup+0xfc>
            // 初始化电机的 UART 端口
            SoftUartInit(motors[i].uart_index, motors[i].port_uart, motors[i].pin_uart, NULL, 0);
 80028fc:	4938      	ldr	r1, [pc, #224]	@ (80029e0 <motors_setup+0x11c>)
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	4413      	add	r3, r2
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	440b      	add	r3, r1
 800290a:	332e      	adds	r3, #46	@ 0x2e
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	b2d8      	uxtb	r0, r3
 8002910:	4933      	ldr	r1, [pc, #204]	@ (80029e0 <motors_setup+0x11c>)
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4413      	add	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	440b      	add	r3, r1
 800291e:	3328      	adds	r3, #40	@ 0x28
 8002920:	6819      	ldr	r1, [r3, #0]
 8002922:	4c2f      	ldr	r4, [pc, #188]	@ (80029e0 <motors_setup+0x11c>)
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4413      	add	r3, r2
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	4423      	add	r3, r4
 8002930:	332c      	adds	r3, #44	@ 0x2c
 8002932:	881a      	ldrh	r2, [r3, #0]
 8002934:	2300      	movs	r3, #0
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	2300      	movs	r3, #0
 800293a:	f7ff fce7 	bl	800230c <SoftUartInit>
            // 串口参数初始化
        	TMC2209_Init(motors[i].uart_index);
 800293e:	4928      	ldr	r1, [pc, #160]	@ (80029e0 <motors_setup+0x11c>)
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4413      	add	r3, r2
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	440b      	add	r3, r1
 800294c:	332e      	adds	r3, #46	@ 0x2e
 800294e:	881b      	ldrh	r3, [r3, #0]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	4618      	mov	r0, r3
 8002954:	f000 f922 	bl	8002b9c <TMC2209_Init>
        	// 电流100%
        	TMC2209_setRunCurrent_100(motors[i].uart_index);
 8002958:	4921      	ldr	r1, [pc, #132]	@ (80029e0 <motors_setup+0x11c>)
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	4413      	add	r3, r2
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	440b      	add	r3, r1
 8002966:	332e      	adds	r3, #46	@ 0x2e
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	b2db      	uxtb	r3, r3
 800296c:	4618      	mov	r0, r3
 800296e:	f000 f961 	bl	8002c34 <TMC2209_setRunCurrent_100>
//        	TMC2209_setRunCurrent(motors[i].uart_index,50);
        	// 使能coolstep
        	TMC2209_enableCoolStep(motors[i].uart_index);
 8002972:	491b      	ldr	r1, [pc, #108]	@ (80029e0 <motors_setup+0x11c>)
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4413      	add	r3, r2
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	440b      	add	r3, r1
 8002980:	332e      	adds	r3, #46	@ 0x2e
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	4618      	mov	r0, r3
 8002988:	f000 f970 	bl	8002c6c <TMC2209_enableCoolStep>
        	// 使能电机
        	TMC2209_enable(motors[i].uart_index);
 800298c:	4914      	ldr	r1, [pc, #80]	@ (80029e0 <motors_setup+0x11c>)
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	4413      	add	r3, r2
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	440b      	add	r3, r1
 800299a:	332e      	adds	r3, #46	@ 0x2e
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 f92b 	bl	8002bfc <TMC2209_enable>
        	// 使能堵转检测
        	TMC2209_enableStallGuard(motors[i].uart_index);
 80029a6:	490e      	ldr	r1, [pc, #56]	@ (80029e0 <motors_setup+0x11c>)
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	4413      	add	r3, r2
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	440b      	add	r3, r1
 80029b4:	332e      	adds	r3, #46	@ 0x2e
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 f972 	bl	8002ca4 <TMC2209_enableStallGuard>
    for (size_t i = 0; i < getNumMotors(); ++i) {
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3301      	adds	r3, #1
 80029c4:	607b      	str	r3, [r7, #4]
 80029c6:	f7ff ff75 	bl	80028b4 <getNumMotors>
 80029ca:	4603      	mov	r3, r0
 80029cc:	461a      	mov	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4293      	cmp	r3, r2
 80029d2:	f4ff af7d 	bcc.w	80028d0 <motors_setup+0xc>
        }
    }
}
 80029d6:	bf00      	nop
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd90      	pop	{r4, r7, pc}
 80029e0:	2000000c 	.word	0x2000000c

080029e4 <TMC2209_startStepperMotor>:


// 启动特定编号的电机
void TMC2209_startStepperMotor(uint8_t motorIndex, uint32_t steps, float speed, int8_t direction) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80029f2:	73fb      	strb	r3, [r7, #15]
 80029f4:	4613      	mov	r3, r2
 80029f6:	73bb      	strb	r3, [r7, #14]
    if (motorIndex < getNumMotors()) {
 80029f8:	f7ff ff5c 	bl	80028b4 <getNumMotors>
 80029fc:	4603      	mov	r3, r0
 80029fe:	461a      	mov	r2, r3
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d231      	bcs.n	8002a6a <TMC2209_startStepperMotor+0x86>
        StepperMotorControl *motor = &motors[motorIndex];
 8002a06:	7bfa      	ldrb	r2, [r7, #15]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	4413      	add	r3, r2
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	4a18      	ldr	r2, [pc, #96]	@ (8002a74 <TMC2209_startStepperMotor+0x90>)
 8002a12:	4413      	add	r3, r2
 8002a14:	617b      	str	r3, [r7, #20]
        motor->targetSteps = steps;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	601a      	str	r2, [r3, #0]
        motor->currentSteps = 0;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	605a      	str	r2, [r3, #4]
        motor->speed = speed;
 8002a22:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a2a:	ee17 2a90 	vmov	r2, s15
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	609a      	str	r2, [r3, #8]
        motor->direction = direction;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	7bba      	ldrb	r2, [r7, #14]
 8002a36:	731a      	strb	r2, [r3, #12]
        motor->isActive = 1;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	735a      	strb	r2, [r3, #13]

        // 设置使能信号
        HAL_GPIO_WritePin(motor->port_en, motor->pin_en, GPIO_PIN_RESET);
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	6918      	ldr	r0, [r3, #16]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	8a9b      	ldrh	r3, [r3, #20]
 8002a46:	2200      	movs	r2, #0
 8002a48:	4619      	mov	r1, r3
 8002a4a:	f7fe fb57 	bl	80010fc <HAL_GPIO_WritePin>

        // 设置初始方向
        HAL_GPIO_WritePin(motor->port_dir, motor->pin_dir, (direction > 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	6998      	ldr	r0, [r3, #24]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	8b99      	ldrh	r1, [r3, #28]
 8002a56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	bfcc      	ite	gt
 8002a5e:	2301      	movgt	r3, #1
 8002a60:	2300      	movle	r3, #0
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	461a      	mov	r2, r3
 8002a66:	f7fe fb49 	bl	80010fc <HAL_GPIO_WritePin>
    }
}
 8002a6a:	bf00      	nop
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	2000000c 	.word	0x2000000c

08002a78 <TMC2209_stepHandler>:



// 定时器周期结束回调函数
void TMC2209_stepHandler(void){
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < getNumMotors(); ++i) {
 8002a7e:	2300      	movs	r3, #0
 8002a80:	71fb      	strb	r3, [r7, #7]
 8002a82:	e03d      	b.n	8002b00 <TMC2209_stepHandler+0x88>
           StepperMotorControl *motor = &motors[i];
 8002a84:	79fa      	ldrb	r2, [r7, #7]
 8002a86:	4613      	mov	r3, r2
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	4413      	add	r3, r2
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	4a22      	ldr	r2, [pc, #136]	@ (8002b18 <TMC2209_stepHandler+0xa0>)
 8002a90:	4413      	add	r3, r2
 8002a92:	603b      	str	r3, [r7, #0]
           if (motor->isActive) {
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	7b5b      	ldrb	r3, [r3, #13]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d02e      	beq.n	8002afa <TMC2209_stepHandler+0x82>
               // 发送脉冲信号
               HAL_GPIO_TogglePin(motor->port_step, motor->pin_step);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	6a1a      	ldr	r2, [r3, #32]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	f7fe fb41 	bl	800112e <HAL_GPIO_TogglePin>

               // 更新步数计数器
               motor->currentSteps += motor->direction;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	f992 200c 	ldrsb.w	r2, [r2, #12]
 8002ab6:	441a      	add	r2, r3
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	605a      	str	r2, [r3, #4]

               // 检查是否达到目标步数
               if ((motor->direction > 0 && motor->currentSteps >= motor->targetSteps) ||
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	dd05      	ble.n	8002ad2 <TMC2209_stepHandler+0x5a>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d208      	bcs.n	8002ae4 <TMC2209_stepHandler+0x6c>
                   (motor->direction < 0 && motor->currentSteps <= 0)) {
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	f993 300c 	ldrsb.w	r3, [r3, #12]
               if ((motor->direction > 0 && motor->currentSteps >= motor->targetSteps) ||
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	da0e      	bge.n	8002afa <TMC2209_stepHandler+0x82>
                   (motor->direction < 0 && motor->currentSteps <= 0)) {
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10a      	bne.n	8002afa <TMC2209_stepHandler+0x82>
                   motor->isActive = 0;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	735a      	strb	r2, [r3, #13]
                   // 关闭使能信号
                   HAL_GPIO_WritePin(motor->port_en, motor->pin_en, GPIO_PIN_RESET);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	6918      	ldr	r0, [r3, #16]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	8a9b      	ldrh	r3, [r3, #20]
 8002af2:	2200      	movs	r2, #0
 8002af4:	4619      	mov	r1, r3
 8002af6:	f7fe fb01 	bl	80010fc <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < getNumMotors(); ++i) {
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	3301      	adds	r3, #1
 8002afe:	71fb      	strb	r3, [r7, #7]
 8002b00:	f7ff fed8 	bl	80028b4 <getNumMotors>
 8002b04:	4603      	mov	r3, r0
 8002b06:	461a      	mov	r2, r3
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d3ba      	bcc.n	8002a84 <TMC2209_stepHandler+0xc>
                   // 可选: 执行完成后的回调或通知主程序
               }
           }
       }
}
 8002b0e:	bf00      	nop
 8002b10:	bf00      	nop
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	2000000c 	.word	0x2000000c

08002b1c <TMC2209_sendRawMessage>:

// 软件串口发送原始消息
void TMC2209_sendRawMessage(uint8_t instance, const uint8_t *message, size_t length) {
 8002b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b20:	b087      	sub	sp, #28
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	4603      	mov	r3, r0
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	73fb      	strb	r3, [r7, #15]
 8002b2c:	466b      	mov	r3, sp
 8002b2e:	461e      	mov	r6, r3
    // 创建一个非const的中间缓冲区
    uint8_t tempBuffer[length];
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	460b      	mov	r3, r1
 8002b34:	3b01      	subs	r3, #1
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	2300      	movs	r3, #0
 8002b3a:	4688      	mov	r8, r1
 8002b3c:	4699      	mov	r9, r3
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b52:	2300      	movs	r3, #0
 8002b54:	460c      	mov	r4, r1
 8002b56:	461d      	mov	r5, r3
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	00eb      	lsls	r3, r5, #3
 8002b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b66:	00e2      	lsls	r2, r4, #3
 8002b68:	1dcb      	adds	r3, r1, #7
 8002b6a:	08db      	lsrs	r3, r3, #3
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	ebad 0d03 	sub.w	sp, sp, r3
 8002b72:	466b      	mov	r3, sp
 8002b74:	3300      	adds	r3, #0
 8002b76:	613b      	str	r3, [r7, #16]
    memcpy(tempBuffer, message, length);
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	68b9      	ldr	r1, [r7, #8]
 8002b7c:	6938      	ldr	r0, [r7, #16]
 8002b7e:	f000 f8ed 	bl	8002d5c <memcpy>

    // 使用中间缓冲区调用 SoftUartPuts
    SoftUartPuts(instance, tempBuffer, length);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
 8002b88:	6939      	ldr	r1, [r7, #16]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fd80 	bl	8002690 <SoftUartPuts>
 8002b90:	46b5      	mov	sp, r6
}
 8002b92:	bf00      	nop
 8002b94:	371c      	adds	r7, #28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002b9c <TMC2209_Init>:

	return crc;
}

// TMC2209初始化，512细分
void TMC2209_Init(uint8_t instance) {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b0a4      	sub	sp, #144	@ 0x90
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	71fb      	strb	r3, [r7, #7]
	const uint8_t msg_setup[][8] = { { 0x05, 0x00, 0x80, 0x00, 0x00, 0x01, 0xC0,
 8002ba6:	4a14      	ldr	r2, [pc, #80]	@ (8002bf8 <TMC2209_Init+0x5c>)
 8002ba8:	f107 030c 	add.w	r3, r7, #12
 8002bac:	4611      	mov	r1, r2
 8002bae:	2280      	movs	r2, #128	@ 0x80
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 f8d3 	bl	8002d5c <memcpy>
					0x19 }, { 0x05, 0x00, 0x90, 0x00, 0x01, 0x00, 0x00, 0x5B },
			{ 0x05, 0x00, 0xEC, 0x10, 0x01, 0x00, 0x50, 0xD9 }, { 0x05, 0x00,
					0xF0, 0xC1, 0x09, 0x00, 0x24, 0x45 }, { 0x05, 0x00, 0xF0,
					0xC1, 0x01, 0x00, 0x24, 0xE7 } };
    // 发送设置消息（逐条发送）
    for (size_t i = 0; i < sizeof(msg_setup) / sizeof(msg_setup[0]); ++i) {
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002bbc:	e012      	b.n	8002be4 <TMC2209_Init+0x48>
        TMC2209_sendRawMessage(instance, msg_setup[i], sizeof(msg_setup[i]));
 8002bbe:	f107 020c 	add.w	r2, r7, #12
 8002bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	18d1      	adds	r1, r2, r3
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	2208      	movs	r2, #8
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff ffa4 	bl	8002b1c <TMC2209_sendRawMessage>
        HAL_Delay(10); // 短暂延迟以确保每条消息都被正确接收
 8002bd4:	200a      	movs	r0, #10
 8002bd6:	f7fd ffa7 	bl	8000b28 <HAL_Delay>
    for (size_t i = 0; i < sizeof(msg_setup) / sizeof(msg_setup[0]); ++i) {
 8002bda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bde:	3301      	adds	r3, #1
 8002be0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002be4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002be8:	2b0f      	cmp	r3, #15
 8002bea:	d9e8      	bls.n	8002bbe <TMC2209_Init+0x22>
    }
}
 8002bec:	bf00      	nop
 8002bee:	bf00      	nop
 8002bf0:	3790      	adds	r7, #144	@ 0x90
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	08002d90 	.word	0x08002d90

08002bfc <TMC2209_enable>:



// TMC2209启动
void TMC2209_enable(uint8_t instance) {
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	71fb      	strb	r3, [r7, #7]
	const uint8_t msg_enable[] = { 0x05, 0x00, 0xEC, 0x10, 0x01, 0x00, 0x53,
 8002c06:	4a0a      	ldr	r2, [pc, #40]	@ (8002c30 <TMC2209_enable+0x34>)
 8002c08:	f107 0308 	add.w	r3, r7, #8
 8002c0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c10:	e883 0003 	stmia.w	r3, {r0, r1}
			0x97 };
	TMC2209_sendRawMessage(instance, msg_enable, sizeof(msg_enable));
 8002c14:	f107 0108 	add.w	r1, r7, #8
 8002c18:	79fb      	ldrb	r3, [r7, #7]
 8002c1a:	2208      	movs	r2, #8
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff ff7d 	bl	8002b1c <TMC2209_sendRawMessage>
	HAL_Delay(10);
 8002c22:	200a      	movs	r0, #10
 8002c24:	f7fd ff80 	bl	8000b28 <HAL_Delay>
}
 8002c28:	bf00      	nop
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	08002e10 	.word	0x08002e10

08002c34 <TMC2209_setRunCurrent_100>:
	HAL_Delay(10);
}


// TMC2209设置电机运行电流100%
void TMC2209_setRunCurrent_100(uint8_t instance) {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	71fb      	strb	r3, [r7, #7]
	const uint8_t msg_current[] = { 0x05, 0x00, 0x90, 0x00, 0x01, 0x1F, 0x00,
 8002c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c68 <TMC2209_setRunCurrent_100+0x34>)
 8002c40:	f107 0308 	add.w	r3, r7, #8
 8002c44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c48:	e883 0003 	stmia.w	r3, {r0, r1}
			0xE7 };
	TMC2209_sendRawMessage(instance, msg_current, sizeof(msg_current));
 8002c4c:	f107 0108 	add.w	r1, r7, #8
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	2208      	movs	r2, #8
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff ff61 	bl	8002b1c <TMC2209_sendRawMessage>
	HAL_Delay(10);
 8002c5a:	200a      	movs	r0, #10
 8002c5c:	f7fd ff64 	bl	8000b28 <HAL_Delay>
}
 8002c60:	bf00      	nop
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	08002e20 	.word	0x08002e20

08002c6c <TMC2209_enableCoolStep>:
    HAL_Delay(10); // 等待一段时间确保消息被正确处理
}


// TMC2209启用coolstep
void TMC2209_enableCoolStep(uint8_t instance) {
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	71fb      	strb	r3, [r7, #7]
	const uint8_t msg_enable[] = { 0x05, 0x00, 0xEC, 0x10, 0x01, 0x00, 0x53,
 8002c76:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca0 <TMC2209_enableCoolStep+0x34>)
 8002c78:	f107 0308 	add.w	r3, r7, #8
 8002c7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c80:	e883 0003 	stmia.w	r3, {r0, r1}
			0x97 };
	TMC2209_sendRawMessage(instance, msg_enable, sizeof(msg_enable));
 8002c84:	f107 0108 	add.w	r1, r7, #8
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	2208      	movs	r2, #8
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff ff45 	bl	8002b1c <TMC2209_sendRawMessage>
	HAL_Delay(10);
 8002c92:	200a      	movs	r0, #10
 8002c94:	f7fd ff48 	bl	8000b28 <HAL_Delay>
}
 8002c98:	bf00      	nop
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	08002e10 	.word	0x08002e10

08002ca4 <TMC2209_enableStallGuard>:

// TMC2209使能堵转检测功能和diag引脚输出
void TMC2209_enableStallGuard(uint8_t instance) {
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	71fb      	strb	r3, [r7, #7]
	// 使能diag输出
	const uint8_t msg_tcoolthrs[] = { 0x05, 0x00, 0x94, 0x00, 0x00, 0xFF, 0xFF, 0x10 };
 8002cae:	4a13      	ldr	r2, [pc, #76]	@ (8002cfc <TMC2209_enableStallGuard+0x58>)
 8002cb0:	f107 0310 	add.w	r3, r7, #16
 8002cb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cb8:	e883 0003 	stmia.w	r3, {r0, r1}
	TMC2209_sendRawMessage(instance, msg_tcoolthrs, sizeof(msg_tcoolthrs));
 8002cbc:	f107 0110 	add.w	r1, r7, #16
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	2208      	movs	r2, #8
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ff29 	bl	8002b1c <TMC2209_sendRawMessage>
	HAL_Delay(10);
 8002cca:	200a      	movs	r0, #10
 8002ccc:	f7fd ff2c 	bl	8000b28 <HAL_Delay>
	// 设置阈值
	const uint8_t msg_sgthrs[] = { 0x05, 0x00, 0xC0, 0x00, 0x00, 0x10, 0x00, 0x83 };
 8002cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8002d00 <TMC2209_enableStallGuard+0x5c>)
 8002cd2:	f107 0308 	add.w	r3, r7, #8
 8002cd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002cda:	e883 0003 	stmia.w	r3, {r0, r1}
	TMC2209_sendRawMessage(instance, msg_sgthrs, sizeof(msg_sgthrs));
 8002cde:	f107 0108 	add.w	r1, r7, #8
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff ff18 	bl	8002b1c <TMC2209_sendRawMessage>
	HAL_Delay(10);
 8002cec:	200a      	movs	r0, #10
 8002cee:	f7fd ff1b 	bl	8000b28 <HAL_Delay>
}
 8002cf2:	bf00      	nop
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	08002e30 	.word	0x08002e30
 8002d00:	08002e38 	.word	0x08002e38

08002d04 <memset>:
 8002d04:	4402      	add	r2, r0
 8002d06:	4603      	mov	r3, r0
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d100      	bne.n	8002d0e <memset+0xa>
 8002d0c:	4770      	bx	lr
 8002d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d12:	e7f9      	b.n	8002d08 <memset+0x4>

08002d14 <__libc_init_array>:
 8002d14:	b570      	push	{r4, r5, r6, lr}
 8002d16:	4d0d      	ldr	r5, [pc, #52]	@ (8002d4c <__libc_init_array+0x38>)
 8002d18:	4c0d      	ldr	r4, [pc, #52]	@ (8002d50 <__libc_init_array+0x3c>)
 8002d1a:	1b64      	subs	r4, r4, r5
 8002d1c:	10a4      	asrs	r4, r4, #2
 8002d1e:	2600      	movs	r6, #0
 8002d20:	42a6      	cmp	r6, r4
 8002d22:	d109      	bne.n	8002d38 <__libc_init_array+0x24>
 8002d24:	4d0b      	ldr	r5, [pc, #44]	@ (8002d54 <__libc_init_array+0x40>)
 8002d26:	4c0c      	ldr	r4, [pc, #48]	@ (8002d58 <__libc_init_array+0x44>)
 8002d28:	f000 f826 	bl	8002d78 <_init>
 8002d2c:	1b64      	subs	r4, r4, r5
 8002d2e:	10a4      	asrs	r4, r4, #2
 8002d30:	2600      	movs	r6, #0
 8002d32:	42a6      	cmp	r6, r4
 8002d34:	d105      	bne.n	8002d42 <__libc_init_array+0x2e>
 8002d36:	bd70      	pop	{r4, r5, r6, pc}
 8002d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d3c:	4798      	blx	r3
 8002d3e:	3601      	adds	r6, #1
 8002d40:	e7ee      	b.n	8002d20 <__libc_init_array+0xc>
 8002d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d46:	4798      	blx	r3
 8002d48:	3601      	adds	r6, #1
 8002d4a:	e7f2      	b.n	8002d32 <__libc_init_array+0x1e>
 8002d4c:	08002e58 	.word	0x08002e58
 8002d50:	08002e58 	.word	0x08002e58
 8002d54:	08002e58 	.word	0x08002e58
 8002d58:	08002e5c 	.word	0x08002e5c

08002d5c <memcpy>:
 8002d5c:	440a      	add	r2, r1
 8002d5e:	4291      	cmp	r1, r2
 8002d60:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d64:	d100      	bne.n	8002d68 <memcpy+0xc>
 8002d66:	4770      	bx	lr
 8002d68:	b510      	push	{r4, lr}
 8002d6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d72:	4291      	cmp	r1, r2
 8002d74:	d1f9      	bne.n	8002d6a <memcpy+0xe>
 8002d76:	bd10      	pop	{r4, pc}

08002d78 <_init>:
 8002d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7a:	bf00      	nop
 8002d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d7e:	bc08      	pop	{r3}
 8002d80:	469e      	mov	lr, r3
 8002d82:	4770      	bx	lr

08002d84 <_fini>:
 8002d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d86:	bf00      	nop
 8002d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d8a:	bc08      	pop	{r3}
 8002d8c:	469e      	mov	lr, r3
 8002d8e:	4770      	bx	lr
