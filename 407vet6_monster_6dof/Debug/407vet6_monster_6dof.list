
407vet6_monster_6dof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000318c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003314  08003314  00004314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003324  08003324  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003324  08003324  00004324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800332c  0800332c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800332c  0800332c  0000432c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003330  08003330  00004330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003334  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000180  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000018c  2000018c  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a224  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b0d  00000000  00000000  0000f260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac0  00000000  00000000  00010d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000084d  00000000  00000000  00011830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000202d3  00000000  00000000  0001207d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c6c7  00000000  00000000  00032350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8a18  00000000  00000000  0003ea17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010742f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002cd0  00000000  00000000  00107474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  0010a144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080032fc 	.word	0x080032fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080032fc 	.word	0x080032fc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// 定时器中断
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	// 软件串口
	if (htim->Instance == TIM5) {
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a07      	ldr	r2, [pc, #28]	@ (80004e4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d101      	bne.n	80004ce <HAL_TIM_PeriodElapsedCallback+0x16>
		SoftUartHandler();
 80004ca:	f002 fb1f 	bl	8002b0c <SoftUartHandler>
	}
	// 脉冲驱动
	if (htim->Instance == TIM6) {
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a05      	ldr	r2, [pc, #20]	@ (80004e8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d101      	bne.n	80004dc <HAL_TIM_PeriodElapsedCallback+0x24>
		TMC2209_stepHandler();
 80004d8:	f002 fe4a 	bl	8003170 <TMC2209_stepHandler>
	}
}
 80004dc:	bf00      	nop
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40000c00 	.word	0x40000c00
 80004e8:	40001000 	.word	0x40001000

080004ec <HAL_GPIO_EXTI_Callback>:


// 外部中断堵转检测
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	4603      	mov	r3, r0
 80004f4:	80fb      	strh	r3, [r7, #6]
	// driver0
	if (GPIO_Pin == GPIO_PIN_14) {
 80004f6:	88fb      	ldrh	r3, [r7, #6]
 80004f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80004fc:	d10f      	bne.n	800051e <HAL_GPIO_EXTI_Callback+0x32>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_14) == GPIO_PIN_SET) {
 80004fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000502:	483c      	ldr	r0, [pc, #240]	@ (80005f4 <HAL_GPIO_EXTI_Callback+0x108>)
 8000504:	f000 ff64 	bl	80013d0 <HAL_GPIO_ReadPin>
 8000508:	4603      	mov	r3, r0
 800050a:	2b01      	cmp	r3, #1
 800050c:	d107      	bne.n	800051e <HAL_GPIO_EXTI_Callback+0x32>
			HAL_GPIO_WritePin(motors[0].port_en, motors[0].pin_en, GPIO_PIN_SET);
 800050e:	4b3a      	ldr	r3, [pc, #232]	@ (80005f8 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	4a39      	ldr	r2, [pc, #228]	@ (80005f8 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000514:	8b11      	ldrh	r1, [r2, #24]
 8000516:	2201      	movs	r2, #1
 8000518:	4618      	mov	r0, r3
 800051a:	f000 ff71 	bl	8001400 <HAL_GPIO_WritePin>
		}
	}
	// driver1
	if (GPIO_Pin == GPIO_PIN_15) {
 800051e:	88fb      	ldrh	r3, [r7, #6]
 8000520:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000524:	d110      	bne.n	8000548 <HAL_GPIO_EXTI_Callback+0x5c>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_SET) {
 8000526:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800052a:	4832      	ldr	r0, [pc, #200]	@ (80005f4 <HAL_GPIO_EXTI_Callback+0x108>)
 800052c:	f000 ff50 	bl	80013d0 <HAL_GPIO_ReadPin>
 8000530:	4603      	mov	r3, r0
 8000532:	2b01      	cmp	r3, #1
 8000534:	d108      	bne.n	8000548 <HAL_GPIO_EXTI_Callback+0x5c>
			HAL_GPIO_WritePin(motors[1].port_en, motors[1].pin_en, GPIO_PIN_SET);
 8000536:	4b30      	ldr	r3, [pc, #192]	@ (80005f8 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800053a:	4a2f      	ldr	r2, [pc, #188]	@ (80005f8 <HAL_GPIO_EXTI_Callback+0x10c>)
 800053c:	f8b2 104c 	ldrh.w	r1, [r2, #76]	@ 0x4c
 8000540:	2201      	movs	r2, #1
 8000542:	4618      	mov	r0, r3
 8000544:	f000 ff5c 	bl	8001400 <HAL_GPIO_WritePin>
		}
	}
	if (GPIO_Pin == GPIO_PIN_13) {
 8000548:	88fb      	ldrh	r3, [r7, #6]
 800054a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800054e:	d122      	bne.n	8000596 <HAL_GPIO_EXTI_Callback+0xaa>
		// driver2
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET) {
 8000550:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000554:	4829      	ldr	r0, [pc, #164]	@ (80005fc <HAL_GPIO_EXTI_Callback+0x110>)
 8000556:	f000 ff3b 	bl	80013d0 <HAL_GPIO_ReadPin>
 800055a:	4603      	mov	r3, r0
 800055c:	2b01      	cmp	r3, #1
 800055e:	d108      	bne.n	8000572 <HAL_GPIO_EXTI_Callback+0x86>
			HAL_GPIO_WritePin(motors[2].port_en, motors[2].pin_en, GPIO_PIN_SET);
 8000560:	4b25      	ldr	r3, [pc, #148]	@ (80005f8 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000562:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000564:	4a24      	ldr	r2, [pc, #144]	@ (80005f8 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000566:	f8b2 1080 	ldrh.w	r1, [r2, #128]	@ 0x80
 800056a:	2201      	movs	r2, #1
 800056c:	4618      	mov	r0, r3
 800056e:	f000 ff47 	bl	8001400 <HAL_GPIO_WritePin>
		}
		// driver4
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13) == GPIO_PIN_SET) {
 8000572:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000576:	481f      	ldr	r0, [pc, #124]	@ (80005f4 <HAL_GPIO_EXTI_Callback+0x108>)
 8000578:	f000 ff2a 	bl	80013d0 <HAL_GPIO_ReadPin>
 800057c:	4603      	mov	r3, r0
 800057e:	2b01      	cmp	r3, #1
 8000580:	d109      	bne.n	8000596 <HAL_GPIO_EXTI_Callback+0xaa>
			HAL_GPIO_WritePin(motors[4].port_en, motors[4].pin_en, GPIO_PIN_SET);
 8000582:	4b1d      	ldr	r3, [pc, #116]	@ (80005f8 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000584:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000588:	4a1b      	ldr	r2, [pc, #108]	@ (80005f8 <HAL_GPIO_EXTI_Callback+0x10c>)
 800058a:	f8b2 10e8 	ldrh.w	r1, [r2, #232]	@ 0xe8
 800058e:	2201      	movs	r2, #1
 8000590:	4618      	mov	r0, r3
 8000592:	f000 ff35 	bl	8001400 <HAL_GPIO_WritePin>
		}
	}
	// driver3
	if (GPIO_Pin == GPIO_PIN_12) {
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800059c:	d111      	bne.n	80005c2 <HAL_GPIO_EXTI_Callback+0xd6>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET) {
 800059e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005a2:	4816      	ldr	r0, [pc, #88]	@ (80005fc <HAL_GPIO_EXTI_Callback+0x110>)
 80005a4:	f000 ff14 	bl	80013d0 <HAL_GPIO_ReadPin>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d109      	bne.n	80005c2 <HAL_GPIO_EXTI_Callback+0xd6>
			HAL_GPIO_WritePin(motors[3].port_en, motors[3].pin_en, GPIO_PIN_SET);
 80005ae:	4b12      	ldr	r3, [pc, #72]	@ (80005f8 <HAL_GPIO_EXTI_Callback+0x10c>)
 80005b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80005b4:	4a10      	ldr	r2, [pc, #64]	@ (80005f8 <HAL_GPIO_EXTI_Callback+0x10c>)
 80005b6:	f8b2 10b4 	ldrh.w	r1, [r2, #180]	@ 0xb4
 80005ba:	2201      	movs	r2, #1
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 ff1f 	bl	8001400 <HAL_GPIO_WritePin>
		}
	}
	// driver5
	if (GPIO_Pin == GPIO_PIN_5) {
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	2b20      	cmp	r3, #32
 80005c6:	d110      	bne.n	80005ea <HAL_GPIO_EXTI_Callback+0xfe>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET) {
 80005c8:	2120      	movs	r1, #32
 80005ca:	480d      	ldr	r0, [pc, #52]	@ (8000600 <HAL_GPIO_EXTI_Callback+0x114>)
 80005cc:	f000 ff00 	bl	80013d0 <HAL_GPIO_ReadPin>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d109      	bne.n	80005ea <HAL_GPIO_EXTI_Callback+0xfe>
			HAL_GPIO_WritePin(motors[5].port_en, motors[5].pin_en, GPIO_PIN_SET);
 80005d6:	4b08      	ldr	r3, [pc, #32]	@ (80005f8 <HAL_GPIO_EXTI_Callback+0x10c>)
 80005d8:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80005dc:	4a06      	ldr	r2, [pc, #24]	@ (80005f8 <HAL_GPIO_EXTI_Callback+0x10c>)
 80005de:	f8b2 111c 	ldrh.w	r1, [r2, #284]	@ 0x11c
 80005e2:	2201      	movs	r2, #1
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 ff0b 	bl	8001400 <HAL_GPIO_WritePin>
		}
	}
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40020000 	.word	0x40020000
 80005f8:	20000158 	.word	0x20000158
 80005fc:	40020400 	.word	0x40020400
 8000600:	40020800 	.word	0x40020800

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fb9e 	bl	8000d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f882 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f96a 	bl	80008e8 <MX_GPIO_Init>
  MX_TIM5_Init();
 8000614:	f000 f8e8 	bl	80007e8 <MX_TIM5_Init>
  MX_TIM6_Init();
 8000618:	f000 f932 	bl	8000880 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	// 启动串口定时器
	if (HAL_TIM_Base_Start_IT(&htim5) != HAL_OK) {
 800061c:	483b      	ldr	r0, [pc, #236]	@ (800070c <main+0x108>)
 800061e:	f001 fbaf 	bl	8001d80 <HAL_TIM_Base_Start_IT>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <main+0x28>
		Error_Handler();
 8000628:	f000 fa80 	bl	8000b2c <Error_Handler>
	}
	// 启动脉冲定时器
	if (HAL_TIM_Base_Start_IT(&htim6) != HAL_OK) {
 800062c:	4838      	ldr	r0, [pc, #224]	@ (8000710 <main+0x10c>)
 800062e:	f001 fba7 	bl	8001d80 <HAL_TIM_Base_Start_IT>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <main+0x38>
		Error_Handler();
 8000638:	f000 fa78 	bl	8000b2c <Error_Handler>
	}


// 初始化电机组
	motors_define();
 800063c:	f002 fc80 	bl	8002f40 <motors_define>
	motors_driver_setup();
 8000640:	f002 fcd0 	bl	8002fe4 <motors_driver_setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

		TMC2209_startStepperMotor(0, 400 * 16, 100, -1);
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2264      	movs	r2, #100	@ 0x64
 800064a:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 800064e:	2000      	movs	r0, #0
 8000650:	f002 fd42 	bl	80030d8 <TMC2209_startStepperMotor>
		TMC2209_startStepperMotor(1, 400 * 16, 100, -1);
 8000654:	f04f 33ff 	mov.w	r3, #4294967295
 8000658:	2264      	movs	r2, #100	@ 0x64
 800065a:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 800065e:	2001      	movs	r0, #1
 8000660:	f002 fd3a 	bl	80030d8 <TMC2209_startStepperMotor>
		TMC2209_startStepperMotor(2, 400 * 16, 100, -1);
 8000664:	f04f 33ff 	mov.w	r3, #4294967295
 8000668:	2264      	movs	r2, #100	@ 0x64
 800066a:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 800066e:	2002      	movs	r0, #2
 8000670:	f002 fd32 	bl	80030d8 <TMC2209_startStepperMotor>
		TMC2209_startStepperMotor(3, 400 * 16, 100, -1);
 8000674:	f04f 33ff 	mov.w	r3, #4294967295
 8000678:	2264      	movs	r2, #100	@ 0x64
 800067a:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 800067e:	2003      	movs	r0, #3
 8000680:	f002 fd2a 	bl	80030d8 <TMC2209_startStepperMotor>
		TMC2209_startStepperMotor(4, 400 * 16, 100, -1);
 8000684:	f04f 33ff 	mov.w	r3, #4294967295
 8000688:	2264      	movs	r2, #100	@ 0x64
 800068a:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 800068e:	2004      	movs	r0, #4
 8000690:	f002 fd22 	bl	80030d8 <TMC2209_startStepperMotor>
		TMC2209_startStepperMotor(5, 400 * 16, 100, -1);
 8000694:	f04f 33ff 	mov.w	r3, #4294967295
 8000698:	2264      	movs	r2, #100	@ 0x64
 800069a:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 800069e:	2005      	movs	r0, #5
 80006a0:	f002 fd1a 	bl	80030d8 <TMC2209_startStepperMotor>
		HAL_Delay(2000);
 80006a4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006a8:	f000 fbc0 	bl	8000e2c <HAL_Delay>

			// 脉冲驱动
			TMC2209_startStepperMotor(0, 400 * 16, 100, 1);
 80006ac:	2301      	movs	r3, #1
 80006ae:	2264      	movs	r2, #100	@ 0x64
 80006b0:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 80006b4:	2000      	movs	r0, #0
 80006b6:	f002 fd0f 	bl	80030d8 <TMC2209_startStepperMotor>
			TMC2209_startStepperMotor(1, 400 * 16, 100, 1);
 80006ba:	2301      	movs	r3, #1
 80006bc:	2264      	movs	r2, #100	@ 0x64
 80006be:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 80006c2:	2001      	movs	r0, #1
 80006c4:	f002 fd08 	bl	80030d8 <TMC2209_startStepperMotor>
			TMC2209_startStepperMotor(2, 400 * 16, 100, 1);
 80006c8:	2301      	movs	r3, #1
 80006ca:	2264      	movs	r2, #100	@ 0x64
 80006cc:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 80006d0:	2002      	movs	r0, #2
 80006d2:	f002 fd01 	bl	80030d8 <TMC2209_startStepperMotor>
			TMC2209_startStepperMotor(3, 400 * 16, 100, 1);
 80006d6:	2301      	movs	r3, #1
 80006d8:	2264      	movs	r2, #100	@ 0x64
 80006da:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 80006de:	2003      	movs	r0, #3
 80006e0:	f002 fcfa 	bl	80030d8 <TMC2209_startStepperMotor>
			TMC2209_startStepperMotor(4, 400 * 16, 100, 1);
 80006e4:	2301      	movs	r3, #1
 80006e6:	2264      	movs	r2, #100	@ 0x64
 80006e8:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 80006ec:	2004      	movs	r0, #4
 80006ee:	f002 fcf3 	bl	80030d8 <TMC2209_startStepperMotor>
			TMC2209_startStepperMotor(5, 400 * 16, 100, 1);
 80006f2:	2301      	movs	r3, #1
 80006f4:	2264      	movs	r2, #100	@ 0x64
 80006f6:	f44f 51c8 	mov.w	r1, #6400	@ 0x1900
 80006fa:	2005      	movs	r0, #5
 80006fc:	f002 fcec 	bl	80030d8 <TMC2209_startStepperMotor>
			HAL_Delay(2000);
 8000700:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000704:	f000 fb92 	bl	8000e2c <HAL_Delay>
		TMC2209_startStepperMotor(0, 400 * 16, 100, -1);
 8000708:	bf00      	nop
 800070a:	e79b      	b.n	8000644 <main+0x40>
 800070c:	20000028 	.word	0x20000028
 8000710:	20000070 	.word	0x20000070

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	@ 0x50
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	2230      	movs	r2, #48	@ 0x30
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f002 fdb0 	bl	8003288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	4b28      	ldr	r3, [pc, #160]	@ (80007e0 <SystemClock_Config+0xcc>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000740:	4a27      	ldr	r2, [pc, #156]	@ (80007e0 <SystemClock_Config+0xcc>)
 8000742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000746:	6413      	str	r3, [r2, #64]	@ 0x40
 8000748:	4b25      	ldr	r3, [pc, #148]	@ (80007e0 <SystemClock_Config+0xcc>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	4b22      	ldr	r3, [pc, #136]	@ (80007e4 <SystemClock_Config+0xd0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a21      	ldr	r2, [pc, #132]	@ (80007e4 <SystemClock_Config+0xd0>)
 800075e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	4b1f      	ldr	r3, [pc, #124]	@ (80007e4 <SystemClock_Config+0xd0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000770:	2302      	movs	r3, #2
 8000772:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000774:	2301      	movs	r3, #1
 8000776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000778:	2310      	movs	r3, #16
 800077a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077c:	2302      	movs	r3, #2
 800077e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000780:	2300      	movs	r3, #0
 8000782:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000784:	2308      	movs	r3, #8
 8000786:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000788:	2348      	movs	r3, #72	@ 0x48
 800078a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800078c:	2302      	movs	r3, #2
 800078e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000790:	2304      	movs	r3, #4
 8000792:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	4618      	mov	r0, r3
 800079a:	f000 fe7d 	bl	8001498 <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007a4:	f000 f9c2 	bl	8000b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	230f      	movs	r3, #15
 80007aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ac:	2302      	movs	r3, #2
 80007ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2102      	movs	r1, #2
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 f8de 	bl	8001988 <HAL_RCC_ClockConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007d2:	f000 f9ab 	bl	8000b2c <Error_Handler>
  }
}
 80007d6:	bf00      	nop
 80007d8:	3750      	adds	r7, #80	@ 0x50
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fc:	463b      	mov	r3, r7
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000804:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <MX_TIM5_Init+0x90>)
 8000806:	4a1d      	ldr	r2, [pc, #116]	@ (800087c <MX_TIM5_Init+0x94>)
 8000808:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 75-1;
 800080a:	4b1b      	ldr	r3, [pc, #108]	@ (8000878 <MX_TIM5_Init+0x90>)
 800080c:	224a      	movs	r2, #74	@ 0x4a
 800080e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000810:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <MX_TIM5_Init+0x90>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10-1;
 8000816:	4b18      	ldr	r3, [pc, #96]	@ (8000878 <MX_TIM5_Init+0x90>)
 8000818:	2209      	movs	r2, #9
 800081a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081c:	4b16      	ldr	r3, [pc, #88]	@ (8000878 <MX_TIM5_Init+0x90>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000822:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <MX_TIM5_Init+0x90>)
 8000824:	2280      	movs	r2, #128	@ 0x80
 8000826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000828:	4813      	ldr	r0, [pc, #76]	@ (8000878 <MX_TIM5_Init+0x90>)
 800082a:	f001 fa59 	bl	8001ce0 <HAL_TIM_Base_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8000834:	f000 f97a 	bl	8000b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000838:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800083c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800083e:	f107 0308 	add.w	r3, r7, #8
 8000842:	4619      	mov	r1, r3
 8000844:	480c      	ldr	r0, [pc, #48]	@ (8000878 <MX_TIM5_Init+0x90>)
 8000846:	f001 fbfb 	bl	8002040 <HAL_TIM_ConfigClockSource>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 8000850:	f000 f96c 	bl	8000b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000854:	2300      	movs	r3, #0
 8000856:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800085c:	463b      	mov	r3, r7
 800085e:	4619      	mov	r1, r3
 8000860:	4805      	ldr	r0, [pc, #20]	@ (8000878 <MX_TIM5_Init+0x90>)
 8000862:	f001 fe23 	bl	80024ac <HAL_TIMEx_MasterConfigSynchronization>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 800086c:	f000 f95e 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	3718      	adds	r7, #24
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000028 	.word	0x20000028
 800087c:	40000c00 	.word	0x40000c00

08000880 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000886:	463b      	mov	r3, r7
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800088e:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <MX_TIM6_Init+0x60>)
 8000890:	4a14      	ldr	r2, [pc, #80]	@ (80008e4 <MX_TIM6_Init+0x64>)
 8000892:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 8000894:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <MX_TIM6_Init+0x60>)
 8000896:	2247      	movs	r2, #71	@ 0x47
 8000898:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089a:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <MX_TIM6_Init+0x60>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <MX_TIM6_Init+0x60>)
 80008a2:	2263      	movs	r2, #99	@ 0x63
 80008a4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <MX_TIM6_Init+0x60>)
 80008a8:	2280      	movs	r2, #128	@ 0x80
 80008aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008ac:	480c      	ldr	r0, [pc, #48]	@ (80008e0 <MX_TIM6_Init+0x60>)
 80008ae:	f001 fa17 	bl	8001ce0 <HAL_TIM_Base_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 80008b8:	f000 f938 	bl	8000b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008bc:	2300      	movs	r3, #0
 80008be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008c4:	463b      	mov	r3, r7
 80008c6:	4619      	mov	r1, r3
 80008c8:	4805      	ldr	r0, [pc, #20]	@ (80008e0 <MX_TIM6_Init+0x60>)
 80008ca:	f001 fdef 	bl	80024ac <HAL_TIMEx_MasterConfigSynchronization>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 80008d4:	f000 f92a 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000070 	.word	0x20000070
 80008e4:	40001000 	.word	0x40001000

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	@ 0x28
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
 8000902:	4b84      	ldr	r3, [pc, #528]	@ (8000b14 <MX_GPIO_Init+0x22c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a83      	ldr	r2, [pc, #524]	@ (8000b14 <MX_GPIO_Init+0x22c>)
 8000908:	f043 0310 	orr.w	r3, r3, #16
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b81      	ldr	r3, [pc, #516]	@ (8000b14 <MX_GPIO_Init+0x22c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0310 	and.w	r3, r3, #16
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	4b7d      	ldr	r3, [pc, #500]	@ (8000b14 <MX_GPIO_Init+0x22c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a7c      	ldr	r2, [pc, #496]	@ (8000b14 <MX_GPIO_Init+0x22c>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b7a      	ldr	r3, [pc, #488]	@ (8000b14 <MX_GPIO_Init+0x22c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
 800093a:	4b76      	ldr	r3, [pc, #472]	@ (8000b14 <MX_GPIO_Init+0x22c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a75      	ldr	r2, [pc, #468]	@ (8000b14 <MX_GPIO_Init+0x22c>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b73      	ldr	r3, [pc, #460]	@ (8000b14 <MX_GPIO_Init+0x22c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b6f      	ldr	r3, [pc, #444]	@ (8000b14 <MX_GPIO_Init+0x22c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a6e      	ldr	r2, [pc, #440]	@ (8000b14 <MX_GPIO_Init+0x22c>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b6c      	ldr	r3, [pc, #432]	@ (8000b14 <MX_GPIO_Init+0x22c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b68      	ldr	r3, [pc, #416]	@ (8000b14 <MX_GPIO_Init+0x22c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a67      	ldr	r2, [pc, #412]	@ (8000b14 <MX_GPIO_Init+0x22c>)
 8000978:	f043 0308 	orr.w	r3, r3, #8
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b65      	ldr	r3, [pc, #404]	@ (8000b14 <MX_GPIO_Init+0x22c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0308 	and.w	r3, r3, #8
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_0
 800098a:	2200      	movs	r2, #0
 800098c:	2137      	movs	r1, #55	@ 0x37
 800098e:	4862      	ldr	r0, [pc, #392]	@ (8000b18 <MX_GPIO_Init+0x230>)
 8000990:	f000 fd36 	bl	8001400 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, d1_uart_Pin|d0_uart_Pin, GPIO_PIN_SET);
 8000994:	2201      	movs	r2, #1
 8000996:	2148      	movs	r1, #72	@ 0x48
 8000998:	485f      	ldr	r0, [pc, #380]	@ (8000b18 <MX_GPIO_Init+0x230>)
 800099a:	f000 fd31 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80009a4:	485d      	ldr	r0, [pc, #372]	@ (8000b1c <MX_GPIO_Init+0x234>)
 80009a6:	f000 fd2b 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, d5_uart_Pin|d4_uart_Pin, GPIO_PIN_SET);
 80009aa:	2201      	movs	r2, #1
 80009ac:	2111      	movs	r1, #17
 80009ae:	485c      	ldr	r0, [pc, #368]	@ (8000b20 <MX_GPIO_Init+0x238>)
 80009b0:	f000 fd26 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 80009b4:	2200      	movs	r2, #0
 80009b6:	21ee      	movs	r1, #238	@ 0xee
 80009b8:	4859      	ldr	r0, [pc, #356]	@ (8000b20 <MX_GPIO_Init+0x238>)
 80009ba:	f000 fd21 	bl	8001400 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, d3_uart_Pin|d2_uart_Pin, GPIO_PIN_SET);
 80009be:	2201      	movs	r2, #1
 80009c0:	2188      	movs	r1, #136	@ 0x88
 80009c2:	4858      	ldr	r0, [pc, #352]	@ (8000b24 <MX_GPIO_Init+0x23c>)
 80009c4:	f000 fd1c 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2170      	movs	r1, #112	@ 0x70
 80009cc:	4855      	ldr	r0, [pc, #340]	@ (8000b24 <MX_GPIO_Init+0x23c>)
 80009ce:	f000 fd17 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE5 PE0
                           PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_0
 80009d2:	2337      	movs	r3, #55	@ 0x37
 80009d4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	484b      	ldr	r0, [pc, #300]	@ (8000b18 <MX_GPIO_Init+0x230>)
 80009ea:	f000 fb55 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pins : d1_uart_Pin d0_uart_Pin */
  GPIO_InitStruct.Pin = d1_uart_Pin|d0_uart_Pin;
 80009ee:	2348      	movs	r3, #72	@ 0x48
 80009f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	4844      	ldr	r0, [pc, #272]	@ (8000b18 <MX_GPIO_Init+0x230>)
 8000a06:	f000 fb47 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a0a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	483e      	ldr	r0, [pc, #248]	@ (8000b1c <MX_GPIO_Init+0x234>)
 8000a24:	f000 fb38 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a28:	2320      	movs	r3, #32
 8000a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4837      	ldr	r0, [pc, #220]	@ (8000b1c <MX_GPIO_Init+0x234>)
 8000a3e:	f000 fb2b 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a48:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	4832      	ldr	r0, [pc, #200]	@ (8000b24 <MX_GPIO_Init+0x23c>)
 8000a5a:	f000 fb1d 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a5e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a64:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	482c      	ldr	r0, [pc, #176]	@ (8000b28 <MX_GPIO_Init+0x240>)
 8000a76:	f000 fb0f 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pins : d5_uart_Pin d4_uart_Pin */
  GPIO_InitStruct.Pin = d5_uart_Pin|d4_uart_Pin;
 8000a7a:	2311      	movs	r3, #17
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4823      	ldr	r0, [pc, #140]	@ (8000b20 <MX_GPIO_Init+0x238>)
 8000a92:	f000 fb01 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD1 PD2 PD3 PD5
                           PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
 8000a96:	23ee      	movs	r3, #238	@ 0xee
 8000a98:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	481c      	ldr	r0, [pc, #112]	@ (8000b20 <MX_GPIO_Init+0x238>)
 8000aae:	f000 faf3 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pins : d3_uart_Pin d2_uart_Pin */
  GPIO_InitStruct.Pin = d3_uart_Pin|d2_uart_Pin;
 8000ab2:	2388      	movs	r3, #136	@ 0x88
 8000ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4816      	ldr	r0, [pc, #88]	@ (8000b24 <MX_GPIO_Init+0x23c>)
 8000aca:	f000 fae5 	bl	8001098 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000ace:	2370      	movs	r3, #112	@ 0x70
 8000ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480f      	ldr	r0, [pc, #60]	@ (8000b24 <MX_GPIO_Init+0x23c>)
 8000ae6:	f000 fad7 	bl	8001098 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	2017      	movs	r0, #23
 8000af0:	f000 fa9b 	bl	800102a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000af4:	2017      	movs	r0, #23
 8000af6:	f000 fab4 	bl	8001062 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	2028      	movs	r0, #40	@ 0x28
 8000b00:	f000 fa93 	bl	800102a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b04:	2028      	movs	r0, #40	@ 0x28
 8000b06:	f000 faac 	bl	8001062 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b0a:	bf00      	nop
 8000b0c:	3728      	adds	r7, #40	@ 0x28
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40020800 	.word	0x40020800
 8000b20:	40020c00 	.word	0x40020c00
 8000b24:	40020400 	.word	0x40020400
 8000b28:	40020000 	.word	0x40020000

08000b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b30:	b672      	cpsid	i
}
 8000b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <Error_Handler+0x8>

08000b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	4b10      	ldr	r3, [pc, #64]	@ (8000b84 <HAL_MspInit+0x4c>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b46:	4a0f      	ldr	r2, [pc, #60]	@ (8000b84 <HAL_MspInit+0x4c>)
 8000b48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b84 <HAL_MspInit+0x4c>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	603b      	str	r3, [r7, #0]
 8000b5e:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <HAL_MspInit+0x4c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b62:	4a08      	ldr	r2, [pc, #32]	@ (8000b84 <HAL_MspInit+0x4c>)
 8000b64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b6a:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <HAL_MspInit+0x4c>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800

08000b88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a1c      	ldr	r2, [pc, #112]	@ (8000c08 <HAL_TIM_Base_MspInit+0x80>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d116      	bne.n	8000bc8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c0c <HAL_TIM_Base_MspInit+0x84>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	4a1a      	ldr	r2, [pc, #104]	@ (8000c0c <HAL_TIM_Base_MspInit+0x84>)
 8000ba4:	f043 0308 	orr.w	r3, r3, #8
 8000ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000baa:	4b18      	ldr	r3, [pc, #96]	@ (8000c0c <HAL_TIM_Base_MspInit+0x84>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bae:	f003 0308 	and.w	r3, r3, #8
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2100      	movs	r1, #0
 8000bba:	2032      	movs	r0, #50	@ 0x32
 8000bbc:	f000 fa35 	bl	800102a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000bc0:	2032      	movs	r0, #50	@ 0x32
 8000bc2:	f000 fa4e 	bl	8001062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000bc6:	e01a      	b.n	8000bfe <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM6)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a10      	ldr	r2, [pc, #64]	@ (8000c10 <HAL_TIM_Base_MspInit+0x88>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d115      	bne.n	8000bfe <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c0c <HAL_TIM_Base_MspInit+0x84>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bda:	4a0c      	ldr	r2, [pc, #48]	@ (8000c0c <HAL_TIM_Base_MspInit+0x84>)
 8000bdc:	f043 0310 	orr.w	r3, r3, #16
 8000be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be2:	4b0a      	ldr	r3, [pc, #40]	@ (8000c0c <HAL_TIM_Base_MspInit+0x84>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be6:	f003 0310 	and.w	r3, r3, #16
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2036      	movs	r0, #54	@ 0x36
 8000bf4:	f000 fa19 	bl	800102a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bf8:	2036      	movs	r0, #54	@ 0x36
 8000bfa:	f000 fa32 	bl	8001062 <HAL_NVIC_EnableIRQ>
}
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40000c00 	.word	0x40000c00
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40001000 	.word	0x40001000

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <NMI_Handler+0x4>

08000c1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <BusFault_Handler+0x4>

08000c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <UsageFault_Handler+0x4>

08000c3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6a:	f000 f8bf 	bl	8000dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000c76:	2020      	movs	r0, #32
 8000c78:	f000 fbf6 	bl	8001468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000c84:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000c88:	f000 fbee 	bl	8001468 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c8c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c90:	f000 fbea 	bl	8001468 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000c94:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000c98:	f000 fbe6 	bl	8001468 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000c9c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000ca0:	f000 fbe2 	bl	8001468 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000cac:	4802      	ldr	r0, [pc, #8]	@ (8000cb8 <TIM5_IRQHandler+0x10>)
 8000cae:	f001 f8d7 	bl	8001e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000028 	.word	0x20000028

08000cbc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cc0:	4802      	ldr	r0, [pc, #8]	@ (8000ccc <TIM6_DAC_IRQHandler+0x10>)
 8000cc2:	f001 f8cd 	bl	8001e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000070 	.word	0x20000070

08000cd0 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory 
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000cd4:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <SystemInit+0x20>)
 8000cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cda:	4a05      	ldr	r2, [pc, #20]	@ (8000cf0 <SystemInit+0x20>)
 8000cdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ce0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cf4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d2c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cf8:	f7ff ffea 	bl	8000cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cfc:	480c      	ldr	r0, [pc, #48]	@ (8000d30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cfe:	490d      	ldr	r1, [pc, #52]	@ (8000d34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d00:	4a0d      	ldr	r2, [pc, #52]	@ (8000d38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d04:	e002      	b.n	8000d0c <LoopCopyDataInit>

08000d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0a:	3304      	adds	r3, #4

08000d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d10:	d3f9      	bcc.n	8000d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d12:	4a0a      	ldr	r2, [pc, #40]	@ (8000d3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d14:	4c0a      	ldr	r4, [pc, #40]	@ (8000d40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d18:	e001      	b.n	8000d1e <LoopFillZerobss>

08000d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d1c:	3204      	adds	r2, #4

08000d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d20:	d3fb      	bcc.n	8000d1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d22:	f002 fab9 	bl	8003298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d26:	f7ff fc6d 	bl	8000604 <main>
  bx  lr    
 8000d2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d34:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d38:	08003334 	.word	0x08003334
  ldr r2, =_sbss
 8000d3c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d40:	2000018c 	.word	0x2000018c

08000d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d44:	e7fe      	b.n	8000d44 <ADC_IRQHandler>
	...

08000d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <HAL_Init+0x40>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0d      	ldr	r2, [pc, #52]	@ (8000d88 <HAL_Init+0x40>)
 8000d52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d58:	4b0b      	ldr	r3, [pc, #44]	@ (8000d88 <HAL_Init+0x40>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d88 <HAL_Init+0x40>)
 8000d5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d64:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <HAL_Init+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a07      	ldr	r2, [pc, #28]	@ (8000d88 <HAL_Init+0x40>)
 8000d6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d70:	2003      	movs	r0, #3
 8000d72:	f000 f94f 	bl	8001014 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d76:	200f      	movs	r0, #15
 8000d78:	f000 f808 	bl	8000d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d7c:	f7ff fedc 	bl	8000b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023c00 	.word	0x40023c00

08000d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d94:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <HAL_InitTick+0x54>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <HAL_InitTick+0x58>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 f967 	bl	800107e <HAL_SYSTICK_Config>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e00e      	b.n	8000dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b0f      	cmp	r3, #15
 8000dbe:	d80a      	bhi.n	8000dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc8:	f000 f92f 	bl	800102a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dcc:	4a06      	ldr	r2, [pc, #24]	@ (8000de8 <HAL_InitTick+0x5c>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e000      	b.n	8000dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000000 	.word	0x20000000
 8000de4:	20000008 	.word	0x20000008
 8000de8:	20000004 	.word	0x20000004

08000dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df0:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <HAL_IncTick+0x20>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <HAL_IncTick+0x24>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a04      	ldr	r2, [pc, #16]	@ (8000e10 <HAL_IncTick+0x24>)
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	200000b8 	.word	0x200000b8

08000e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return uwTick;
 8000e18:	4b03      	ldr	r3, [pc, #12]	@ (8000e28 <HAL_GetTick+0x14>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	200000b8 	.word	0x200000b8

08000e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e34:	f7ff ffee 	bl	8000e14 <HAL_GetTick>
 8000e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e44:	d005      	beq.n	8000e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e46:	4b0a      	ldr	r3, [pc, #40]	@ (8000e70 <HAL_Delay+0x44>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4413      	add	r3, r2
 8000e50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e52:	bf00      	nop
 8000e54:	f7ff ffde 	bl	8000e14 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d8f7      	bhi.n	8000e54 <HAL_Delay+0x28>
  {
  }
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000008 	.word	0x20000008

08000e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea6:	4a04      	ldr	r2, [pc, #16]	@ (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	60d3      	str	r3, [r2, #12]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	@ (8000ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	f003 0307 	and.w	r3, r3, #7
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	db0b      	blt.n	8000f02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	f003 021f 	and.w	r2, r3, #31
 8000ef0:	4907      	ldr	r1, [pc, #28]	@ (8000f10 <__NVIC_EnableIRQ+0x38>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	095b      	lsrs	r3, r3, #5
 8000ef8:	2001      	movs	r0, #1
 8000efa:	fa00 f202 	lsl.w	r2, r0, r2
 8000efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000e100 	.word	0xe000e100

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db0a      	blt.n	8000f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	490c      	ldr	r1, [pc, #48]	@ (8000f60 <__NVIC_SetPriority+0x4c>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f3c:	e00a      	b.n	8000f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4908      	ldr	r1, [pc, #32]	@ (8000f64 <__NVIC_SetPriority+0x50>)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	3b04      	subs	r3, #4
 8000f4c:	0112      	lsls	r2, r2, #4
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	440b      	add	r3, r1
 8000f52:	761a      	strb	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	@ 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f1c3 0307 	rsb	r3, r3, #7
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	bf28      	it	cs
 8000f86:	2304      	movcs	r3, #4
 8000f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d902      	bls.n	8000f98 <NVIC_EncodePriority+0x30>
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3b03      	subs	r3, #3
 8000f96:	e000      	b.n	8000f9a <NVIC_EncodePriority+0x32>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	401a      	ands	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43d9      	mvns	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	4313      	orrs	r3, r2
         );
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	@ 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fe0:	d301      	bcc.n	8000fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00f      	b.n	8001006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8001010 <SysTick_Config+0x40>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fee:	210f      	movs	r1, #15
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f7ff ff8e 	bl	8000f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff8:	4b05      	ldr	r3, [pc, #20]	@ (8001010 <SysTick_Config+0x40>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffe:	4b04      	ldr	r3, [pc, #16]	@ (8001010 <SysTick_Config+0x40>)
 8001000:	2207      	movs	r2, #7
 8001002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	e000e010 	.word	0xe000e010

08001014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ff29 	bl	8000e74 <__NVIC_SetPriorityGrouping>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
 8001036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800103c:	f7ff ff3e 	bl	8000ebc <__NVIC_GetPriorityGrouping>
 8001040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	6978      	ldr	r0, [r7, #20]
 8001048:	f7ff ff8e 	bl	8000f68 <NVIC_EncodePriority>
 800104c:	4602      	mov	r2, r0
 800104e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff5d 	bl	8000f14 <__NVIC_SetPriority>
}
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff31 	bl	8000ed8 <__NVIC_EnableIRQ>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ffa2 	bl	8000fd0 <SysTick_Config>
 800108c:	4603      	mov	r3, r0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	@ 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
 80010b2:	e16b      	b.n	800138c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010b4:	2201      	movs	r2, #1
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	f040 815a 	bne.w	8001386 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d005      	beq.n	80010ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d130      	bne.n	800114c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	2203      	movs	r2, #3
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	68da      	ldr	r2, [r3, #12]
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001120:	2201      	movs	r2, #1
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	091b      	lsrs	r3, r3, #4
 8001136:	f003 0201 	and.w	r2, r3, #1
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	2b03      	cmp	r3, #3
 8001156:	d017      	beq.n	8001188 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	2203      	movs	r2, #3
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d123      	bne.n	80011dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	08da      	lsrs	r2, r3, #3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3208      	adds	r2, #8
 800119c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	f003 0307 	and.w	r3, r3, #7
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	220f      	movs	r2, #15
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	691a      	ldr	r2, [r3, #16]
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	08da      	lsrs	r2, r3, #3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3208      	adds	r2, #8
 80011d6:	69b9      	ldr	r1, [r7, #24]
 80011d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	2203      	movs	r2, #3
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0203 	and.w	r2, r3, #3
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001218:	2b00      	cmp	r3, #0
 800121a:	f000 80b4 	beq.w	8001386 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b60      	ldr	r3, [pc, #384]	@ (80013a4 <HAL_GPIO_Init+0x30c>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001226:	4a5f      	ldr	r2, [pc, #380]	@ (80013a4 <HAL_GPIO_Init+0x30c>)
 8001228:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800122c:	6453      	str	r3, [r2, #68]	@ 0x44
 800122e:	4b5d      	ldr	r3, [pc, #372]	@ (80013a4 <HAL_GPIO_Init+0x30c>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001232:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800123a:	4a5b      	ldr	r2, [pc, #364]	@ (80013a8 <HAL_GPIO_Init+0x310>)
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	089b      	lsrs	r3, r3, #2
 8001240:	3302      	adds	r3, #2
 8001242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	220f      	movs	r2, #15
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a52      	ldr	r2, [pc, #328]	@ (80013ac <HAL_GPIO_Init+0x314>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d02b      	beq.n	80012be <HAL_GPIO_Init+0x226>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a51      	ldr	r2, [pc, #324]	@ (80013b0 <HAL_GPIO_Init+0x318>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d025      	beq.n	80012ba <HAL_GPIO_Init+0x222>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a50      	ldr	r2, [pc, #320]	@ (80013b4 <HAL_GPIO_Init+0x31c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d01f      	beq.n	80012b6 <HAL_GPIO_Init+0x21e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4f      	ldr	r2, [pc, #316]	@ (80013b8 <HAL_GPIO_Init+0x320>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d019      	beq.n	80012b2 <HAL_GPIO_Init+0x21a>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4e      	ldr	r2, [pc, #312]	@ (80013bc <HAL_GPIO_Init+0x324>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d013      	beq.n	80012ae <HAL_GPIO_Init+0x216>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4d      	ldr	r2, [pc, #308]	@ (80013c0 <HAL_GPIO_Init+0x328>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d00d      	beq.n	80012aa <HAL_GPIO_Init+0x212>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4c      	ldr	r2, [pc, #304]	@ (80013c4 <HAL_GPIO_Init+0x32c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d007      	beq.n	80012a6 <HAL_GPIO_Init+0x20e>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a4b      	ldr	r2, [pc, #300]	@ (80013c8 <HAL_GPIO_Init+0x330>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d101      	bne.n	80012a2 <HAL_GPIO_Init+0x20a>
 800129e:	2307      	movs	r3, #7
 80012a0:	e00e      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012a2:	2308      	movs	r3, #8
 80012a4:	e00c      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012a6:	2306      	movs	r3, #6
 80012a8:	e00a      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012aa:	2305      	movs	r3, #5
 80012ac:	e008      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012ae:	2304      	movs	r3, #4
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012b2:	2303      	movs	r3, #3
 80012b4:	e004      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e002      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <HAL_GPIO_Init+0x228>
 80012be:	2300      	movs	r3, #0
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	f002 0203 	and.w	r2, r2, #3
 80012c6:	0092      	lsls	r2, r2, #2
 80012c8:	4093      	lsls	r3, r2
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012d0:	4935      	ldr	r1, [pc, #212]	@ (80013a8 <HAL_GPIO_Init+0x310>)
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012de:	4b3b      	ldr	r3, [pc, #236]	@ (80013cc <HAL_GPIO_Init+0x334>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001302:	4a32      	ldr	r2, [pc, #200]	@ (80013cc <HAL_GPIO_Init+0x334>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001308:	4b30      	ldr	r3, [pc, #192]	@ (80013cc <HAL_GPIO_Init+0x334>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800132c:	4a27      	ldr	r2, [pc, #156]	@ (80013cc <HAL_GPIO_Init+0x334>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001332:	4b26      	ldr	r3, [pc, #152]	@ (80013cc <HAL_GPIO_Init+0x334>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001356:	4a1d      	ldr	r2, [pc, #116]	@ (80013cc <HAL_GPIO_Init+0x334>)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800135c:	4b1b      	ldr	r3, [pc, #108]	@ (80013cc <HAL_GPIO_Init+0x334>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001380:	4a12      	ldr	r2, [pc, #72]	@ (80013cc <HAL_GPIO_Init+0x334>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3301      	adds	r3, #1
 800138a:	61fb      	str	r3, [r7, #28]
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	2b0f      	cmp	r3, #15
 8001390:	f67f ae90 	bls.w	80010b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3724      	adds	r7, #36	@ 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40013800 	.word	0x40013800
 80013ac:	40020000 	.word	0x40020000
 80013b0:	40020400 	.word	0x40020400
 80013b4:	40020800 	.word	0x40020800
 80013b8:	40020c00 	.word	0x40020c00
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40021400 	.word	0x40021400
 80013c4:	40021800 	.word	0x40021800
 80013c8:	40021c00 	.word	0x40021c00
 80013cc:	40013c00 	.word	0x40013c00

080013d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	887b      	ldrh	r3, [r7, #2]
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d002      	beq.n	80013ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013e8:	2301      	movs	r3, #1
 80013ea:	73fb      	strb	r3, [r7, #15]
 80013ec:	e001      	b.n	80013f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	807b      	strh	r3, [r7, #2]
 800140c:	4613      	mov	r3, r2
 800140e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001410:	787b      	ldrb	r3, [r7, #1]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001416:	887a      	ldrh	r2, [r7, #2]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800141c:	e003      	b.n	8001426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800141e:	887b      	ldrh	r3, [r7, #2]
 8001420:	041a      	lsls	r2, r3, #16
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	619a      	str	r2, [r3, #24]
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001432:	b480      	push	{r7}
 8001434:	b085      	sub	sp, #20
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	460b      	mov	r3, r1
 800143c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001444:	887a      	ldrh	r2, [r7, #2]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4013      	ands	r3, r2
 800144a:	041a      	lsls	r2, r3, #16
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	43d9      	mvns	r1, r3
 8001450:	887b      	ldrh	r3, [r7, #2]
 8001452:	400b      	ands	r3, r1
 8001454:	431a      	orrs	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	619a      	str	r2, [r3, #24]
}
 800145a:	bf00      	nop
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001472:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001474:	695a      	ldr	r2, [r3, #20]
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	4013      	ands	r3, r2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d006      	beq.n	800148c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800147e:	4a05      	ldr	r2, [pc, #20]	@ (8001494 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f830 	bl	80004ec <HAL_GPIO_EXTI_Callback>
  }
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40013c00 	.word	0x40013c00

08001498 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e267      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d075      	beq.n	80015a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014b6:	4b88      	ldr	r3, [pc, #544]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	2b04      	cmp	r3, #4
 80014c0:	d00c      	beq.n	80014dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014c2:	4b85      	ldr	r3, [pc, #532]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	d112      	bne.n	80014f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ce:	4b82      	ldr	r3, [pc, #520]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014da:	d10b      	bne.n	80014f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014dc:	4b7e      	ldr	r3, [pc, #504]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d05b      	beq.n	80015a0 <HAL_RCC_OscConfig+0x108>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d157      	bne.n	80015a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e242      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014fc:	d106      	bne.n	800150c <HAL_RCC_OscConfig+0x74>
 80014fe:	4b76      	ldr	r3, [pc, #472]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a75      	ldr	r2, [pc, #468]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	e01d      	b.n	8001548 <HAL_RCC_OscConfig+0xb0>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001514:	d10c      	bne.n	8001530 <HAL_RCC_OscConfig+0x98>
 8001516:	4b70      	ldr	r3, [pc, #448]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a6f      	ldr	r2, [pc, #444]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 800151c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	4b6d      	ldr	r3, [pc, #436]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a6c      	ldr	r2, [pc, #432]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	e00b      	b.n	8001548 <HAL_RCC_OscConfig+0xb0>
 8001530:	4b69      	ldr	r3, [pc, #420]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a68      	ldr	r2, [pc, #416]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001536:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	4b66      	ldr	r3, [pc, #408]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a65      	ldr	r2, [pc, #404]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001542:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001546:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d013      	beq.n	8001578 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001550:	f7ff fc60 	bl	8000e14 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001558:	f7ff fc5c 	bl	8000e14 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b64      	cmp	r3, #100	@ 0x64
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e207      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156a:	4b5b      	ldr	r3, [pc, #364]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f0      	beq.n	8001558 <HAL_RCC_OscConfig+0xc0>
 8001576:	e014      	b.n	80015a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001578:	f7ff fc4c 	bl	8000e14 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001580:	f7ff fc48 	bl	8000e14 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b64      	cmp	r3, #100	@ 0x64
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e1f3      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001592:	4b51      	ldr	r3, [pc, #324]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f0      	bne.n	8001580 <HAL_RCC_OscConfig+0xe8>
 800159e:	e000      	b.n	80015a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d063      	beq.n	8001676 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015ae:	4b4a      	ldr	r3, [pc, #296]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 030c 	and.w	r3, r3, #12
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00b      	beq.n	80015d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ba:	4b47      	ldr	r3, [pc, #284]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015c2:	2b08      	cmp	r3, #8
 80015c4:	d11c      	bne.n	8001600 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015c6:	4b44      	ldr	r3, [pc, #272]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d116      	bne.n	8001600 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d2:	4b41      	ldr	r3, [pc, #260]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d005      	beq.n	80015ea <HAL_RCC_OscConfig+0x152>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d001      	beq.n	80015ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e1c7      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ea:	4b3b      	ldr	r3, [pc, #236]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	4937      	ldr	r1, [pc, #220]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fe:	e03a      	b.n	8001676 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d020      	beq.n	800164a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001608:	4b34      	ldr	r3, [pc, #208]	@ (80016dc <HAL_RCC_OscConfig+0x244>)
 800160a:	2201      	movs	r2, #1
 800160c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160e:	f7ff fc01 	bl	8000e14 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001616:	f7ff fbfd 	bl	8000e14 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e1a8      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001628:	4b2b      	ldr	r3, [pc, #172]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001634:	4b28      	ldr	r3, [pc, #160]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	4925      	ldr	r1, [pc, #148]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 8001644:	4313      	orrs	r3, r2
 8001646:	600b      	str	r3, [r1, #0]
 8001648:	e015      	b.n	8001676 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800164a:	4b24      	ldr	r3, [pc, #144]	@ (80016dc <HAL_RCC_OscConfig+0x244>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001650:	f7ff fbe0 	bl	8000e14 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001658:	f7ff fbdc 	bl	8000e14 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e187      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800166a:	4b1b      	ldr	r3, [pc, #108]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	2b00      	cmp	r3, #0
 8001680:	d036      	beq.n	80016f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d016      	beq.n	80016b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800168a:	4b15      	ldr	r3, [pc, #84]	@ (80016e0 <HAL_RCC_OscConfig+0x248>)
 800168c:	2201      	movs	r2, #1
 800168e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001690:	f7ff fbc0 	bl	8000e14 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001698:	f7ff fbbc 	bl	8000e14 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e167      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016aa:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <HAL_RCC_OscConfig+0x240>)
 80016ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f0      	beq.n	8001698 <HAL_RCC_OscConfig+0x200>
 80016b6:	e01b      	b.n	80016f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b8:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <HAL_RCC_OscConfig+0x248>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016be:	f7ff fba9 	bl	8000e14 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c4:	e00e      	b.n	80016e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c6:	f7ff fba5 	bl	8000e14 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d907      	bls.n	80016e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e150      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
 80016d8:	40023800 	.word	0x40023800
 80016dc:	42470000 	.word	0x42470000
 80016e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e4:	4b88      	ldr	r3, [pc, #544]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 80016e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1ea      	bne.n	80016c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 8097 	beq.w	800182c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016fe:	2300      	movs	r3, #0
 8001700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001702:	4b81      	ldr	r3, [pc, #516]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10f      	bne.n	800172e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	4b7d      	ldr	r3, [pc, #500]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001716:	4a7c      	ldr	r2, [pc, #496]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800171c:	6413      	str	r3, [r2, #64]	@ 0x40
 800171e:	4b7a      	ldr	r3, [pc, #488]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800172a:	2301      	movs	r3, #1
 800172c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172e:	4b77      	ldr	r3, [pc, #476]	@ (800190c <HAL_RCC_OscConfig+0x474>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001736:	2b00      	cmp	r3, #0
 8001738:	d118      	bne.n	800176c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800173a:	4b74      	ldr	r3, [pc, #464]	@ (800190c <HAL_RCC_OscConfig+0x474>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a73      	ldr	r2, [pc, #460]	@ (800190c <HAL_RCC_OscConfig+0x474>)
 8001740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001746:	f7ff fb65 	bl	8000e14 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800174e:	f7ff fb61 	bl	8000e14 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e10c      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001760:	4b6a      	ldr	r3, [pc, #424]	@ (800190c <HAL_RCC_OscConfig+0x474>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f0      	beq.n	800174e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d106      	bne.n	8001782 <HAL_RCC_OscConfig+0x2ea>
 8001774:	4b64      	ldr	r3, [pc, #400]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 8001776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001778:	4a63      	ldr	r2, [pc, #396]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001780:	e01c      	b.n	80017bc <HAL_RCC_OscConfig+0x324>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2b05      	cmp	r3, #5
 8001788:	d10c      	bne.n	80017a4 <HAL_RCC_OscConfig+0x30c>
 800178a:	4b5f      	ldr	r3, [pc, #380]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 800178c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800178e:	4a5e      	ldr	r2, [pc, #376]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	6713      	str	r3, [r2, #112]	@ 0x70
 8001796:	4b5c      	ldr	r3, [pc, #368]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 8001798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800179a:	4a5b      	ldr	r2, [pc, #364]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80017a2:	e00b      	b.n	80017bc <HAL_RCC_OscConfig+0x324>
 80017a4:	4b58      	ldr	r3, [pc, #352]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 80017a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a8:	4a57      	ldr	r2, [pc, #348]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 80017aa:	f023 0301 	bic.w	r3, r3, #1
 80017ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80017b0:	4b55      	ldr	r3, [pc, #340]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 80017b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017b4:	4a54      	ldr	r2, [pc, #336]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 80017b6:	f023 0304 	bic.w	r3, r3, #4
 80017ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d015      	beq.n	80017f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c4:	f7ff fb26 	bl	8000e14 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ca:	e00a      	b.n	80017e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017cc:	f7ff fb22 	bl	8000e14 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017da:	4293      	cmp	r3, r2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e0cb      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e2:	4b49      	ldr	r3, [pc, #292]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 80017e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0ee      	beq.n	80017cc <HAL_RCC_OscConfig+0x334>
 80017ee:	e014      	b.n	800181a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f0:	f7ff fb10 	bl	8000e14 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f6:	e00a      	b.n	800180e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f8:	f7ff fb0c 	bl	8000e14 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001806:	4293      	cmp	r3, r2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e0b5      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180e:	4b3e      	ldr	r3, [pc, #248]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 8001810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1ee      	bne.n	80017f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800181a:	7dfb      	ldrb	r3, [r7, #23]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d105      	bne.n	800182c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001820:	4b39      	ldr	r3, [pc, #228]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 8001822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001824:	4a38      	ldr	r2, [pc, #224]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 8001826:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800182a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 80a1 	beq.w	8001978 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001836:	4b34      	ldr	r3, [pc, #208]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	2b08      	cmp	r3, #8
 8001840:	d05c      	beq.n	80018fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d141      	bne.n	80018ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184a:	4b31      	ldr	r3, [pc, #196]	@ (8001910 <HAL_RCC_OscConfig+0x478>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff fae0 	bl	8000e14 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001858:	f7ff fadc 	bl	8000e14 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e087      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186a:	4b27      	ldr	r3, [pc, #156]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69da      	ldr	r2, [r3, #28]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001884:	019b      	lsls	r3, r3, #6
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188c:	085b      	lsrs	r3, r3, #1
 800188e:	3b01      	subs	r3, #1
 8001890:	041b      	lsls	r3, r3, #16
 8001892:	431a      	orrs	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001898:	061b      	lsls	r3, r3, #24
 800189a:	491b      	ldr	r1, [pc, #108]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 800189c:	4313      	orrs	r3, r2
 800189e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001910 <HAL_RCC_OscConfig+0x478>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a6:	f7ff fab5 	bl	8000e14 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ae:	f7ff fab1 	bl	8000e14 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e05c      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c0:	4b11      	ldr	r3, [pc, #68]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0x416>
 80018cc:	e054      	b.n	8001978 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ce:	4b10      	ldr	r3, [pc, #64]	@ (8001910 <HAL_RCC_OscConfig+0x478>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d4:	f7ff fa9e 	bl	8000e14 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018dc:	f7ff fa9a 	bl	8000e14 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e045      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ee:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <HAL_RCC_OscConfig+0x470>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x444>
 80018fa:	e03d      	b.n	8001978 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d107      	bne.n	8001914 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e038      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
 8001908:	40023800 	.word	0x40023800
 800190c:	40007000 	.word	0x40007000
 8001910:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001914:	4b1b      	ldr	r3, [pc, #108]	@ (8001984 <HAL_RCC_OscConfig+0x4ec>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d028      	beq.n	8001974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800192c:	429a      	cmp	r2, r3
 800192e:	d121      	bne.n	8001974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193a:	429a      	cmp	r2, r3
 800193c:	d11a      	bne.n	8001974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001944:	4013      	ands	r3, r2
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800194a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800194c:	4293      	cmp	r3, r2
 800194e:	d111      	bne.n	8001974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195a:	085b      	lsrs	r3, r3, #1
 800195c:	3b01      	subs	r3, #1
 800195e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001960:	429a      	cmp	r2, r3
 8001962:	d107      	bne.n	8001974 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001970:	429a      	cmp	r2, r3
 8001972:	d001      	beq.n	8001978 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e000      	b.n	800197a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800

08001988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0cc      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800199c:	4b68      	ldr	r3, [pc, #416]	@ (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d90c      	bls.n	80019c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019aa:	4b65      	ldr	r3, [pc, #404]	@ (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b2:	4b63      	ldr	r3, [pc, #396]	@ (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d001      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0b8      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d020      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019dc:	4b59      	ldr	r3, [pc, #356]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	4a58      	ldr	r2, [pc, #352]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019f4:	4b53      	ldr	r3, [pc, #332]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4a52      	ldr	r2, [pc, #328]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a00:	4b50      	ldr	r3, [pc, #320]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	494d      	ldr	r1, [pc, #308]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d044      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d107      	bne.n	8001a36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a26:	4b47      	ldr	r3, [pc, #284]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d119      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e07f      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d003      	beq.n	8001a46 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a42:	2b03      	cmp	r3, #3
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a46:	4b3f      	ldr	r3, [pc, #252]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d109      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e06f      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a56:	4b3b      	ldr	r3, [pc, #236]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e067      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a66:	4b37      	ldr	r3, [pc, #220]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f023 0203 	bic.w	r2, r3, #3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4934      	ldr	r1, [pc, #208]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a78:	f7ff f9cc 	bl	8000e14 <HAL_GetTick>
 8001a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7e:	e00a      	b.n	8001a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a80:	f7ff f9c8 	bl	8000e14 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e04f      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a96:	4b2b      	ldr	r3, [pc, #172]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 020c 	and.w	r2, r3, #12
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d1eb      	bne.n	8001a80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa8:	4b25      	ldr	r3, [pc, #148]	@ (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d20c      	bcs.n	8001ad0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab6:	4b22      	ldr	r3, [pc, #136]	@ (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001abe:	4b20      	ldr	r3, [pc, #128]	@ (8001b40 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d001      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e032      	b.n	8001b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d008      	beq.n	8001aee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001adc:	4b19      	ldr	r3, [pc, #100]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	4916      	ldr	r1, [pc, #88]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d009      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001afa:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	490e      	ldr	r1, [pc, #56]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b0e:	f000 f821 	bl	8001b54 <HAL_RCC_GetSysClockFreq>
 8001b12:	4602      	mov	r2, r0
 8001b14:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	490a      	ldr	r1, [pc, #40]	@ (8001b48 <HAL_RCC_ClockConfig+0x1c0>)
 8001b20:	5ccb      	ldrb	r3, [r1, r3]
 8001b22:	fa22 f303 	lsr.w	r3, r2, r3
 8001b26:	4a09      	ldr	r2, [pc, #36]	@ (8001b4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b2a:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <HAL_RCC_ClockConfig+0x1c8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff f92c 	bl	8000d8c <HAL_InitTick>

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023c00 	.word	0x40023c00
 8001b44:	40023800 	.word	0x40023800
 8001b48:	08003314 	.word	0x08003314
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	20000004 	.word	0x20000004

08001b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b58:	b090      	sub	sp, #64	@ 0x40
 8001b5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b6c:	4b59      	ldr	r3, [pc, #356]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 030c 	and.w	r3, r3, #12
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d00d      	beq.n	8001b94 <HAL_RCC_GetSysClockFreq+0x40>
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	f200 80a1 	bhi.w	8001cc0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d002      	beq.n	8001b88 <HAL_RCC_GetSysClockFreq+0x34>
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d003      	beq.n	8001b8e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b86:	e09b      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b88:	4b53      	ldr	r3, [pc, #332]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b8c:	e09b      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b8e:	4b53      	ldr	r3, [pc, #332]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x188>)
 8001b90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b92:	e098      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b94:	4b4f      	ldr	r3, [pc, #316]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b9c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b9e:	4b4d      	ldr	r3, [pc, #308]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d028      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001baa:	4b4a      	ldr	r3, [pc, #296]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	099b      	lsrs	r3, r3, #6
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	623b      	str	r3, [r7, #32]
 8001bb4:	627a      	str	r2, [r7, #36]	@ 0x24
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4b47      	ldr	r3, [pc, #284]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x188>)
 8001bc0:	fb03 f201 	mul.w	r2, r3, r1
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	fb00 f303 	mul.w	r3, r0, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	4a43      	ldr	r2, [pc, #268]	@ (8001cdc <HAL_RCC_GetSysClockFreq+0x188>)
 8001bce:	fba0 1202 	umull	r1, r2, r0, r2
 8001bd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bd4:	460a      	mov	r2, r1
 8001bd6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001bd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bda:	4413      	add	r3, r2
 8001bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001be0:	2200      	movs	r2, #0
 8001be2:	61bb      	str	r3, [r7, #24]
 8001be4:	61fa      	str	r2, [r7, #28]
 8001be6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001bee:	f7fe faeb 	bl	80001c8 <__aeabi_uldivmod>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bfa:	e053      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bfc:	4b35      	ldr	r3, [pc, #212]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	099b      	lsrs	r3, r3, #6
 8001c02:	2200      	movs	r2, #0
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	617a      	str	r2, [r7, #20]
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c0e:	f04f 0b00 	mov.w	fp, #0
 8001c12:	4652      	mov	r2, sl
 8001c14:	465b      	mov	r3, fp
 8001c16:	f04f 0000 	mov.w	r0, #0
 8001c1a:	f04f 0100 	mov.w	r1, #0
 8001c1e:	0159      	lsls	r1, r3, #5
 8001c20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c24:	0150      	lsls	r0, r2, #5
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	ebb2 080a 	subs.w	r8, r2, sl
 8001c2e:	eb63 090b 	sbc.w	r9, r3, fp
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c46:	ebb2 0408 	subs.w	r4, r2, r8
 8001c4a:	eb63 0509 	sbc.w	r5, r3, r9
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	00eb      	lsls	r3, r5, #3
 8001c58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c5c:	00e2      	lsls	r2, r4, #3
 8001c5e:	4614      	mov	r4, r2
 8001c60:	461d      	mov	r5, r3
 8001c62:	eb14 030a 	adds.w	r3, r4, sl
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	eb45 030b 	adc.w	r3, r5, fp
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c7a:	4629      	mov	r1, r5
 8001c7c:	028b      	lsls	r3, r1, #10
 8001c7e:	4621      	mov	r1, r4
 8001c80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c84:	4621      	mov	r1, r4
 8001c86:	028a      	lsls	r2, r1, #10
 8001c88:	4610      	mov	r0, r2
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c8e:	2200      	movs	r2, #0
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	60fa      	str	r2, [r7, #12]
 8001c94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c98:	f7fe fa96 	bl	80001c8 <__aeabi_uldivmod>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	0c1b      	lsrs	r3, r3, #16
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001cb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001cbe:	e002      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cc0:	4b05      	ldr	r3, [pc, #20]	@ (8001cd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3740      	adds	r7, #64	@ 0x40
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	00f42400 	.word	0x00f42400
 8001cdc:	017d7840 	.word	0x017d7840

08001ce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e041      	b.n	8001d76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d106      	bne.n	8001d0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7fe ff3e 	bl	8000b88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4610      	mov	r0, r2
 8001d20:	f000 fa7e 	bl	8002220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d001      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e04e      	b.n	8001e36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a23      	ldr	r2, [pc, #140]	@ (8001e44 <HAL_TIM_Base_Start_IT+0xc4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d022      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dc2:	d01d      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8001e48 <HAL_TIM_Base_Start_IT+0xc8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d018      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8001e4c <HAL_TIM_Base_Start_IT+0xcc>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d013      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a1c      	ldr	r2, [pc, #112]	@ (8001e50 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00e      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a1b      	ldr	r2, [pc, #108]	@ (8001e54 <HAL_TIM_Base_Start_IT+0xd4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d009      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a19      	ldr	r2, [pc, #100]	@ (8001e58 <HAL_TIM_Base_Start_IT+0xd8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d004      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x80>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a18      	ldr	r2, [pc, #96]	@ (8001e5c <HAL_TIM_Base_Start_IT+0xdc>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d111      	bne.n	8001e24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	d010      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 0201 	orr.w	r2, r2, #1
 8001e20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e22:	e007      	b.n	8001e34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0201 	orr.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40010000 	.word	0x40010000
 8001e48:	40000400 	.word	0x40000400
 8001e4c:	40000800 	.word	0x40000800
 8001e50:	40000c00 	.word	0x40000c00
 8001e54:	40010400 	.word	0x40010400
 8001e58:	40014000 	.word	0x40014000
 8001e5c:	40001800 	.word	0x40001800

08001e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d020      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d01b      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0202 	mvn.w	r2, #2
 8001e94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f999 	bl	80021e2 <HAL_TIM_IC_CaptureCallback>
 8001eb0:	e005      	b.n	8001ebe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f98b 	bl	80021ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f99c 	bl	80021f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d020      	beq.n	8001f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d01b      	beq.n	8001f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0204 	mvn.w	r2, #4
 8001ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f973 	bl	80021e2 <HAL_TIM_IC_CaptureCallback>
 8001efc:	e005      	b.n	8001f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f965 	bl	80021ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f976 	bl	80021f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d020      	beq.n	8001f5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d01b      	beq.n	8001f5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0208 	mvn.w	r2, #8
 8001f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2204      	movs	r2, #4
 8001f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f94d 	bl	80021e2 <HAL_TIM_IC_CaptureCallback>
 8001f48:	e005      	b.n	8001f56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f93f 	bl	80021ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f950 	bl	80021f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f003 0310 	and.w	r3, r3, #16
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d020      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f003 0310 	and.w	r3, r3, #16
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d01b      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0210 	mvn.w	r2, #16
 8001f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2208      	movs	r2, #8
 8001f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f927 	bl	80021e2 <HAL_TIM_IC_CaptureCallback>
 8001f94:	e005      	b.n	8001fa2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f919 	bl	80021ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f92a 	bl	80021f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00c      	beq.n	8001fcc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d007      	beq.n	8001fcc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0201 	mvn.w	r2, #1
 8001fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7fe fa76 	bl	80004b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00c      	beq.n	8001ff0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d007      	beq.n	8001ff0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 fae4 	bl	80025b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00c      	beq.n	8002014 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002000:	2b00      	cmp	r3, #0
 8002002:	d007      	beq.n	8002014 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800200c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f8fb 	bl	800220a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f003 0320 	and.w	r3, r3, #32
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00c      	beq.n	8002038 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f003 0320 	and.w	r3, r3, #32
 8002024:	2b00      	cmp	r3, #0
 8002026:	d007      	beq.n	8002038 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0220 	mvn.w	r2, #32
 8002030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 fab6 	bl	80025a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002038:	bf00      	nop
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_TIM_ConfigClockSource+0x1c>
 8002058:	2302      	movs	r3, #2
 800205a:	e0b4      	b.n	80021c6 <HAL_TIM_ConfigClockSource+0x186>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2202      	movs	r2, #2
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800207a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002082:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68ba      	ldr	r2, [r7, #8]
 800208a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002094:	d03e      	beq.n	8002114 <HAL_TIM_ConfigClockSource+0xd4>
 8002096:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800209a:	f200 8087 	bhi.w	80021ac <HAL_TIM_ConfigClockSource+0x16c>
 800209e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020a2:	f000 8086 	beq.w	80021b2 <HAL_TIM_ConfigClockSource+0x172>
 80020a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020aa:	d87f      	bhi.n	80021ac <HAL_TIM_ConfigClockSource+0x16c>
 80020ac:	2b70      	cmp	r3, #112	@ 0x70
 80020ae:	d01a      	beq.n	80020e6 <HAL_TIM_ConfigClockSource+0xa6>
 80020b0:	2b70      	cmp	r3, #112	@ 0x70
 80020b2:	d87b      	bhi.n	80021ac <HAL_TIM_ConfigClockSource+0x16c>
 80020b4:	2b60      	cmp	r3, #96	@ 0x60
 80020b6:	d050      	beq.n	800215a <HAL_TIM_ConfigClockSource+0x11a>
 80020b8:	2b60      	cmp	r3, #96	@ 0x60
 80020ba:	d877      	bhi.n	80021ac <HAL_TIM_ConfigClockSource+0x16c>
 80020bc:	2b50      	cmp	r3, #80	@ 0x50
 80020be:	d03c      	beq.n	800213a <HAL_TIM_ConfigClockSource+0xfa>
 80020c0:	2b50      	cmp	r3, #80	@ 0x50
 80020c2:	d873      	bhi.n	80021ac <HAL_TIM_ConfigClockSource+0x16c>
 80020c4:	2b40      	cmp	r3, #64	@ 0x40
 80020c6:	d058      	beq.n	800217a <HAL_TIM_ConfigClockSource+0x13a>
 80020c8:	2b40      	cmp	r3, #64	@ 0x40
 80020ca:	d86f      	bhi.n	80021ac <HAL_TIM_ConfigClockSource+0x16c>
 80020cc:	2b30      	cmp	r3, #48	@ 0x30
 80020ce:	d064      	beq.n	800219a <HAL_TIM_ConfigClockSource+0x15a>
 80020d0:	2b30      	cmp	r3, #48	@ 0x30
 80020d2:	d86b      	bhi.n	80021ac <HAL_TIM_ConfigClockSource+0x16c>
 80020d4:	2b20      	cmp	r3, #32
 80020d6:	d060      	beq.n	800219a <HAL_TIM_ConfigClockSource+0x15a>
 80020d8:	2b20      	cmp	r3, #32
 80020da:	d867      	bhi.n	80021ac <HAL_TIM_ConfigClockSource+0x16c>
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d05c      	beq.n	800219a <HAL_TIM_ConfigClockSource+0x15a>
 80020e0:	2b10      	cmp	r3, #16
 80020e2:	d05a      	beq.n	800219a <HAL_TIM_ConfigClockSource+0x15a>
 80020e4:	e062      	b.n	80021ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020f6:	f000 f9b9 	bl	800246c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002108:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	609a      	str	r2, [r3, #8]
      break;
 8002112:	e04f      	b.n	80021b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002124:	f000 f9a2 	bl	800246c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002136:	609a      	str	r2, [r3, #8]
      break;
 8002138:	e03c      	b.n	80021b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002146:	461a      	mov	r2, r3
 8002148:	f000 f916 	bl	8002378 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2150      	movs	r1, #80	@ 0x50
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f96f 	bl	8002436 <TIM_ITRx_SetConfig>
      break;
 8002158:	e02c      	b.n	80021b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002166:	461a      	mov	r2, r3
 8002168:	f000 f935 	bl	80023d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2160      	movs	r1, #96	@ 0x60
 8002172:	4618      	mov	r0, r3
 8002174:	f000 f95f 	bl	8002436 <TIM_ITRx_SetConfig>
      break;
 8002178:	e01c      	b.n	80021b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002186:	461a      	mov	r2, r3
 8002188:	f000 f8f6 	bl	8002378 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2140      	movs	r1, #64	@ 0x40
 8002192:	4618      	mov	r0, r3
 8002194:	f000 f94f 	bl	8002436 <TIM_ITRx_SetConfig>
      break;
 8002198:	e00c      	b.n	80021b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4619      	mov	r1, r3
 80021a4:	4610      	mov	r0, r2
 80021a6:	f000 f946 	bl	8002436 <TIM_ITRx_SetConfig>
      break;
 80021aa:	e003      	b.n	80021b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	73fb      	strb	r3, [r7, #15]
      break;
 80021b0:	e000      	b.n	80021b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80021b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a46      	ldr	r2, [pc, #280]	@ (800234c <TIM_Base_SetConfig+0x12c>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d013      	beq.n	8002260 <TIM_Base_SetConfig+0x40>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800223e:	d00f      	beq.n	8002260 <TIM_Base_SetConfig+0x40>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a43      	ldr	r2, [pc, #268]	@ (8002350 <TIM_Base_SetConfig+0x130>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d00b      	beq.n	8002260 <TIM_Base_SetConfig+0x40>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a42      	ldr	r2, [pc, #264]	@ (8002354 <TIM_Base_SetConfig+0x134>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d007      	beq.n	8002260 <TIM_Base_SetConfig+0x40>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a41      	ldr	r2, [pc, #260]	@ (8002358 <TIM_Base_SetConfig+0x138>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d003      	beq.n	8002260 <TIM_Base_SetConfig+0x40>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a40      	ldr	r2, [pc, #256]	@ (800235c <TIM_Base_SetConfig+0x13c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d108      	bne.n	8002272 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002266:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a35      	ldr	r2, [pc, #212]	@ (800234c <TIM_Base_SetConfig+0x12c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d02b      	beq.n	80022d2 <TIM_Base_SetConfig+0xb2>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002280:	d027      	beq.n	80022d2 <TIM_Base_SetConfig+0xb2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a32      	ldr	r2, [pc, #200]	@ (8002350 <TIM_Base_SetConfig+0x130>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d023      	beq.n	80022d2 <TIM_Base_SetConfig+0xb2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a31      	ldr	r2, [pc, #196]	@ (8002354 <TIM_Base_SetConfig+0x134>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d01f      	beq.n	80022d2 <TIM_Base_SetConfig+0xb2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a30      	ldr	r2, [pc, #192]	@ (8002358 <TIM_Base_SetConfig+0x138>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d01b      	beq.n	80022d2 <TIM_Base_SetConfig+0xb2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a2f      	ldr	r2, [pc, #188]	@ (800235c <TIM_Base_SetConfig+0x13c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d017      	beq.n	80022d2 <TIM_Base_SetConfig+0xb2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002360 <TIM_Base_SetConfig+0x140>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d013      	beq.n	80022d2 <TIM_Base_SetConfig+0xb2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a2d      	ldr	r2, [pc, #180]	@ (8002364 <TIM_Base_SetConfig+0x144>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d00f      	beq.n	80022d2 <TIM_Base_SetConfig+0xb2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a2c      	ldr	r2, [pc, #176]	@ (8002368 <TIM_Base_SetConfig+0x148>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00b      	beq.n	80022d2 <TIM_Base_SetConfig+0xb2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a2b      	ldr	r2, [pc, #172]	@ (800236c <TIM_Base_SetConfig+0x14c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d007      	beq.n	80022d2 <TIM_Base_SetConfig+0xb2>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002370 <TIM_Base_SetConfig+0x150>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d003      	beq.n	80022d2 <TIM_Base_SetConfig+0xb2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a29      	ldr	r2, [pc, #164]	@ (8002374 <TIM_Base_SetConfig+0x154>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d108      	bne.n	80022e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a10      	ldr	r2, [pc, #64]	@ (800234c <TIM_Base_SetConfig+0x12c>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d003      	beq.n	8002318 <TIM_Base_SetConfig+0xf8>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a12      	ldr	r2, [pc, #72]	@ (800235c <TIM_Base_SetConfig+0x13c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d103      	bne.n	8002320 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	691a      	ldr	r2, [r3, #16]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b01      	cmp	r3, #1
 8002330:	d105      	bne.n	800233e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	f023 0201 	bic.w	r2, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	611a      	str	r2, [r3, #16]
  }
}
 800233e:	bf00      	nop
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40010000 	.word	0x40010000
 8002350:	40000400 	.word	0x40000400
 8002354:	40000800 	.word	0x40000800
 8002358:	40000c00 	.word	0x40000c00
 800235c:	40010400 	.word	0x40010400
 8002360:	40014000 	.word	0x40014000
 8002364:	40014400 	.word	0x40014400
 8002368:	40014800 	.word	0x40014800
 800236c:	40001800 	.word	0x40001800
 8002370:	40001c00 	.word	0x40001c00
 8002374:	40002000 	.word	0x40002000

08002378 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002378:	b480      	push	{r7}
 800237a:	b087      	sub	sp, #28
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	f023 0201 	bic.w	r2, r3, #1
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f023 030a 	bic.w	r3, r3, #10
 80023b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	621a      	str	r2, [r3, #32]
}
 80023ca:	bf00      	nop
 80023cc:	371c      	adds	r7, #28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b087      	sub	sp, #28
 80023da:	af00      	add	r7, sp, #0
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	f023 0210 	bic.w	r2, r3, #16
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002400:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	031b      	lsls	r3, r3, #12
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002412:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	4313      	orrs	r3, r2
 800241c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	621a      	str	r2, [r3, #32]
}
 800242a:	bf00      	nop
 800242c:	371c      	adds	r7, #28
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002436:	b480      	push	{r7}
 8002438:	b085      	sub	sp, #20
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800244c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4313      	orrs	r3, r2
 8002454:	f043 0307 	orr.w	r3, r3, #7
 8002458:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	609a      	str	r2, [r3, #8]
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800246c:	b480      	push	{r7}
 800246e:	b087      	sub	sp, #28
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
 8002478:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002486:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	021a      	lsls	r2, r3, #8
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	431a      	orrs	r2, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	4313      	orrs	r3, r2
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	4313      	orrs	r3, r2
 8002498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	609a      	str	r2, [r3, #8]
}
 80024a0:	bf00      	nop
 80024a2:	371c      	adds	r7, #28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e05a      	b.n	800257a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a21      	ldr	r2, [pc, #132]	@ (8002588 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d022      	beq.n	800254e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002510:	d01d      	beq.n	800254e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a1d      	ldr	r2, [pc, #116]	@ (800258c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d018      	beq.n	800254e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a1b      	ldr	r2, [pc, #108]	@ (8002590 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d013      	beq.n	800254e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a1a      	ldr	r2, [pc, #104]	@ (8002594 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d00e      	beq.n	800254e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a18      	ldr	r2, [pc, #96]	@ (8002598 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d009      	beq.n	800254e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a17      	ldr	r2, [pc, #92]	@ (800259c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d004      	beq.n	800254e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a15      	ldr	r2, [pc, #84]	@ (80025a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d10c      	bne.n	8002568 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002554:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	4313      	orrs	r3, r2
 800255e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40010000 	.word	0x40010000
 800258c:	40000400 	.word	0x40000400
 8002590:	40000800 	.word	0x40000800
 8002594:	40000c00 	.word	0x40000c00
 8002598:	40010400 	.word	0x40010400
 800259c:	40014000 	.word	0x40014000
 80025a0:	40001800 	.word	0x40001800

080025a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <SoftUartGpioReadPin>:

// Parity var
static uint8_t DV, PCount;

// Read RX single Pin Value
GPIO_PinState SoftUartGpioReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	807b      	strh	r3, [r7, #2]
	return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 80025d8:	887b      	ldrh	r3, [r7, #2]
 80025da:	4619      	mov	r1, r3
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7fe fef7 	bl	80013d0 <HAL_GPIO_ReadPin>
 80025e2:	4603      	mov	r3, r0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <SoftUartGpioWritePin>:

// Write TX single Pin Value
void SoftUartGpioWritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState) {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]
 80025f8:	4613      	mov	r3, r2
 80025fa:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState);
 80025fc:	787a      	ldrb	r2, [r7, #1]
 80025fe:	887b      	ldrh	r3, [r7, #2]
 8002600:	4619      	mov	r1, r3
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fe fefc 	bl	8001400 <HAL_GPIO_WritePin>
}
 8002608:	bf00      	nop
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <SoftUartInit>:

// Initial Soft Uart
SoftUartState_E SoftUartInit(uint8_t SoftUartNumber, GPIO_TypeDef *TxPort, uint16_t TxPin, GPIO_TypeDef *RxPort, uint16_t RxPin) {
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607b      	str	r3, [r7, #4]
 800261a:	4603      	mov	r3, r0
 800261c:	73fb      	strb	r3, [r7, #15]
 800261e:	4613      	mov	r3, r2
 8002620:	81bb      	strh	r3, [r7, #12]
	if (SoftUartNumber >= Number_Of_SoftUarts)
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <SoftUartInit+0x1c>
		return SoftUart_Error;
 8002628:	2301      	movs	r3, #1
 800262a:	e07c      	b.n	8002726 <SoftUartInit+0x116>

	SUart[SoftUartNumber].TxNComplated = 0;
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	4a41      	ldr	r2, [pc, #260]	@ (8002734 <SoftUartInit+0x124>)
 8002630:	015b      	lsls	r3, r3, #5
 8002632:	4413      	add	r3, r2
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]

	SUart[SoftUartNumber].RxBitCounter = 0;
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	4a3e      	ldr	r2, [pc, #248]	@ (8002734 <SoftUartInit+0x124>)
 800263c:	015b      	lsls	r3, r3, #5
 800263e:	4413      	add	r3, r2
 8002640:	3306      	adds	r3, #6
 8002642:	2200      	movs	r2, #0
 8002644:	701a      	strb	r2, [r3, #0]
	SUart[SoftUartNumber].RxBitShift = 0;
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	4a3a      	ldr	r2, [pc, #232]	@ (8002734 <SoftUartInit+0x124>)
 800264a:	015b      	lsls	r3, r3, #5
 800264c:	4413      	add	r3, r2
 800264e:	3305      	adds	r3, #5
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]
	SUart[SoftUartNumber].RxIndex = 0;
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	4a37      	ldr	r2, [pc, #220]	@ (8002734 <SoftUartInit+0x124>)
 8002658:	015b      	lsls	r3, r3, #5
 800265a:	4413      	add	r3, r2
 800265c:	3309      	adds	r3, #9
 800265e:	2200      	movs	r2, #0
 8002660:	701a      	strb	r2, [r3, #0]

	SUart[SoftUartNumber].TxEnable = 0;
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	4a33      	ldr	r2, [pc, #204]	@ (8002734 <SoftUartInit+0x124>)
 8002666:	015b      	lsls	r3, r3, #5
 8002668:	4413      	add	r3, r2
 800266a:	3301      	adds	r3, #1
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]
	SUart[SoftUartNumber].RxEnable = 0;
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	4a30      	ldr	r2, [pc, #192]	@ (8002734 <SoftUartInit+0x124>)
 8002674:	015b      	lsls	r3, r3, #5
 8002676:	4413      	add	r3, r2
 8002678:	3302      	adds	r3, #2
 800267a:	2200      	movs	r2, #0
 800267c:	701a      	strb	r2, [r3, #0]

	SUart[SoftUartNumber].TxBitCounter = 0;
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	4a2c      	ldr	r2, [pc, #176]	@ (8002734 <SoftUartInit+0x124>)
 8002682:	015b      	lsls	r3, r3, #5
 8002684:	4413      	add	r3, r2
 8002686:	3304      	adds	r3, #4
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]
	SUart[SoftUartNumber].TxBitShift = 0;
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	4a29      	ldr	r2, [pc, #164]	@ (8002734 <SoftUartInit+0x124>)
 8002690:	015b      	lsls	r3, r3, #5
 8002692:	4413      	add	r3, r2
 8002694:	3303      	adds	r3, #3
 8002696:	2200      	movs	r2, #0
 8002698:	701a      	strb	r2, [r3, #0]
	SUart[SoftUartNumber].TxIndex = 0;
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	4a25      	ldr	r2, [pc, #148]	@ (8002734 <SoftUartInit+0x124>)
 800269e:	015b      	lsls	r3, r3, #5
 80026a0:	4413      	add	r3, r2
 80026a2:	3307      	adds	r3, #7
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]

	SUart[SoftUartNumber].TxSize = 0;
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	4a22      	ldr	r2, [pc, #136]	@ (8002734 <SoftUartInit+0x124>)
 80026ac:	015b      	lsls	r3, r3, #5
 80026ae:	4413      	add	r3, r2
 80026b0:	3308      	adds	r3, #8
 80026b2:	2200      	movs	r2, #0
 80026b4:	701a      	strb	r2, [r3, #0]

	SUart[SoftUartNumber].Buffer = &SUBuffer[SoftUartNumber];
 80026b6:	7bfa      	ldrb	r2, [r7, #15]
 80026b8:	7bf9      	ldrb	r1, [r7, #15]
 80026ba:	4613      	mov	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4413      	add	r3, r2
 80026c0:	015b      	lsls	r3, r3, #5
 80026c2:	4a1d      	ldr	r2, [pc, #116]	@ (8002738 <SoftUartInit+0x128>)
 80026c4:	441a      	add	r2, r3
 80026c6:	481b      	ldr	r0, [pc, #108]	@ (8002734 <SoftUartInit+0x124>)
 80026c8:	014b      	lsls	r3, r1, #5
 80026ca:	4403      	add	r3, r0
 80026cc:	330c      	adds	r3, #12
 80026ce:	601a      	str	r2, [r3, #0]

	SUart[SoftUartNumber].RxPort = RxPort;
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	4a18      	ldr	r2, [pc, #96]	@ (8002734 <SoftUartInit+0x124>)
 80026d4:	015b      	lsls	r3, r3, #5
 80026d6:	4413      	add	r3, r2
 80026d8:	3318      	adds	r3, #24
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	601a      	str	r2, [r3, #0]
	SUart[SoftUartNumber].RxPin = RxPin;
 80026de:	7bfb      	ldrb	r3, [r7, #15]
 80026e0:	4a14      	ldr	r2, [pc, #80]	@ (8002734 <SoftUartInit+0x124>)
 80026e2:	015b      	lsls	r3, r3, #5
 80026e4:	4413      	add	r3, r2
 80026e6:	331c      	adds	r3, #28
 80026e8:	8b3a      	ldrh	r2, [r7, #24]
 80026ea:	801a      	strh	r2, [r3, #0]

	SUart[SoftUartNumber].TxPort = TxPort;
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	4a11      	ldr	r2, [pc, #68]	@ (8002734 <SoftUartInit+0x124>)
 80026f0:	015b      	lsls	r3, r3, #5
 80026f2:	4413      	add	r3, r2
 80026f4:	3310      	adds	r3, #16
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	601a      	str	r2, [r3, #0]
	SUart[SoftUartNumber].TxPin = TxPin;
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002734 <SoftUartInit+0x124>)
 80026fe:	015b      	lsls	r3, r3, #5
 8002700:	4413      	add	r3, r2
 8002702:	3314      	adds	r3, #20
 8002704:	89ba      	ldrh	r2, [r7, #12]
 8002706:	801a      	strh	r2, [r3, #0]

	SUart[SoftUartNumber].RxTimingFlag = 0;
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	4a0a      	ldr	r2, [pc, #40]	@ (8002734 <SoftUartInit+0x124>)
 800270c:	015b      	lsls	r3, r3, #5
 800270e:	4413      	add	r3, r2
 8002710:	331e      	adds	r3, #30
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]
	SUart[SoftUartNumber].RxBitOffset = 0;
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	4a06      	ldr	r2, [pc, #24]	@ (8002734 <SoftUartInit+0x124>)
 800271a:	015b      	lsls	r3, r3, #5
 800271c:	4413      	add	r3, r2
 800271e:	331f      	adds	r3, #31
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]

	return SoftUart_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	200000bc 	.word	0x200000bc
 8002738:	200000dc 	.word	0x200000dc

0800273c <SoftUartTransmitBit>:

// Send one bit to TX pin
void SoftUartTransmitBit(SoftUart_S *SU, uint8_t Bit0_1) {
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	70fb      	strb	r3, [r7, #3]
	SoftUartGpioWritePin(SU->TxPort, SU->TxPin, (GPIO_PinState) Bit0_1);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6918      	ldr	r0, [r3, #16]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	8a9b      	ldrh	r3, [r3, #20]
 8002750:	78fa      	ldrb	r2, [r7, #3]
 8002752:	4619      	mov	r1, r3
 8002754:	f7ff ff4a 	bl	80025ec <SoftUartGpioWritePin>
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <SoftUartTxProcess>:
	SUart[SoftUartNumber].RxIndex -= Len;
	return SoftUart_OK;
}

// Soft Uart Transmit Data Process
void SoftUartTxProcess(SoftUart_S *SU) {
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
	if (SU->TxEnable) {
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	785b      	ldrb	r3, [r3, #1]
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 8090 	beq.w	8002892 <SoftUartTxProcess+0x132>
		// Start
		if (SU->TxBitCounter == 0) {
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	791b      	ldrb	r3, [r3, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d113      	bne.n	80027a2 <SoftUartTxProcess+0x42>
			SU->TxNComplated = 1;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	701a      	strb	r2, [r3, #0]
			SU->TxBitShift = 0;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	70da      	strb	r2, [r3, #3]
			SoftUartTransmitBit(SU, 0);
 8002786:	2100      	movs	r1, #0
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff ffd7 	bl	800273c <SoftUartTransmitBit>
			SU->TxBitCounter++;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	791b      	ldrb	r3, [r3, #4]
 8002792:	3301      	adds	r3, #1
 8002794:	b2da      	uxtb	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	711a      	strb	r2, [r3, #4]
			PCount = 0;
 800279a:	4b40      	ldr	r3, [pc, #256]	@ (800289c <SoftUartTxProcess+0x13c>)
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]
				SU->TxNComplated = 0;
				SU->TxEnable = 0;
			}
		}
	}
}
 80027a0:	e077      	b.n	8002892 <SoftUartTxProcess+0x132>
		else if (SU->TxBitCounter < (SoftUart_DATA_LEN + 1)) {
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	791b      	ldrb	r3, [r3, #4]
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d82c      	bhi.n	8002804 <SoftUartTxProcess+0xa4>
			DV = ((SU->Buffer->Tx[SU->TxIndex]) >> (SU->TxBitShift)) & 0x01;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	79d2      	ldrb	r2, [r2, #7]
 80027b2:	5c9b      	ldrb	r3, [r3, r2]
 80027b4:	461a      	mov	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	78db      	ldrb	r3, [r3, #3]
 80027ba:	fa42 f303 	asr.w	r3, r2, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	4b36      	ldr	r3, [pc, #216]	@ (80028a0 <SoftUartTxProcess+0x140>)
 80027c8:	701a      	strb	r2, [r3, #0]
			SoftUartTransmitBit(SU, DV);
 80027ca:	4b35      	ldr	r3, [pc, #212]	@ (80028a0 <SoftUartTxProcess+0x140>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	4619      	mov	r1, r3
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff ffb3 	bl	800273c <SoftUartTransmitBit>
			SU->TxBitCounter++;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	791b      	ldrb	r3, [r3, #4]
 80027da:	3301      	adds	r3, #1
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	711a      	strb	r2, [r3, #4]
			SU->TxBitShift++;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	78db      	ldrb	r3, [r3, #3]
 80027e6:	3301      	adds	r3, #1
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	70da      	strb	r2, [r3, #3]
			if (DV)
 80027ee:	4b2c      	ldr	r3, [pc, #176]	@ (80028a0 <SoftUartTxProcess+0x140>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d04d      	beq.n	8002892 <SoftUartTxProcess+0x132>
				PCount++;
 80027f6:	4b29      	ldr	r3, [pc, #164]	@ (800289c <SoftUartTxProcess+0x13c>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	3301      	adds	r3, #1
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	4b27      	ldr	r3, [pc, #156]	@ (800289c <SoftUartTxProcess+0x13c>)
 8002800:	701a      	strb	r2, [r3, #0]
}
 8002802:	e046      	b.n	8002892 <SoftUartTxProcess+0x132>
		else if (SU->TxBitCounter < SoftUart_IDEF_LEN_C1) {
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	791b      	ldrb	r3, [r3, #4]
 8002808:	2b08      	cmp	r3, #8
 800280a:	d813      	bhi.n	8002834 <SoftUartTxProcess+0xd4>
			DV = PCount % 2;
 800280c:	4b23      	ldr	r3, [pc, #140]	@ (800289c <SoftUartTxProcess+0x13c>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	b2da      	uxtb	r2, r3
 8002816:	4b22      	ldr	r3, [pc, #136]	@ (80028a0 <SoftUartTxProcess+0x140>)
 8002818:	701a      	strb	r2, [r3, #0]
			SoftUartTransmitBit(SU, DV);
 800281a:	4b21      	ldr	r3, [pc, #132]	@ (80028a0 <SoftUartTxProcess+0x140>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	4619      	mov	r1, r3
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff ff8b 	bl	800273c <SoftUartTransmitBit>
			SU->TxBitCounter++;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	791b      	ldrb	r3, [r3, #4]
 800282a:	3301      	adds	r3, #1
 800282c:	b2da      	uxtb	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	711a      	strb	r2, [r3, #4]
}
 8002832:	e02e      	b.n	8002892 <SoftUartTxProcess+0x132>
		else if (SU->TxBitCounter < SoftUart_IDEF_LEN_C2) {
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	791b      	ldrb	r3, [r3, #4]
 8002838:	2b09      	cmp	r3, #9
 800283a:	d80a      	bhi.n	8002852 <SoftUartTxProcess+0xf2>
			SoftUartTransmitBit(SU, 1);
 800283c:	2101      	movs	r1, #1
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff ff7c 	bl	800273c <SoftUartTransmitBit>
			SU->TxBitCounter++;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	791b      	ldrb	r3, [r3, #4]
 8002848:	3301      	adds	r3, #1
 800284a:	b2da      	uxtb	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	711a      	strb	r2, [r3, #4]
}
 8002850:	e01f      	b.n	8002892 <SoftUartTxProcess+0x132>
		else if (SU->TxBitCounter == SoftUart_IDEF_LEN_C2) {
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	791b      	ldrb	r3, [r3, #4]
 8002856:	2b0a      	cmp	r3, #10
 8002858:	d11b      	bne.n	8002892 <SoftUartTxProcess+0x132>
			SU->TxBitCounter = 0;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	711a      	strb	r2, [r3, #4]
			SU->TxIndex++;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	79db      	ldrb	r3, [r3, #7]
 8002864:	3301      	adds	r3, #1
 8002866:	b2da      	uxtb	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	71da      	strb	r2, [r3, #7]
			if (SU->TxSize > SU->TxIndex) {
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	7a1a      	ldrb	r2, [r3, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	79db      	ldrb	r3, [r3, #7]
 8002874:	429a      	cmp	r2, r3
 8002876:	d906      	bls.n	8002886 <SoftUartTxProcess+0x126>
				SU->TxNComplated = 1;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	701a      	strb	r2, [r3, #0]
				SU->TxEnable = 1;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	705a      	strb	r2, [r3, #1]
}
 8002884:	e005      	b.n	8002892 <SoftUartTxProcess+0x132>
				SU->TxNComplated = 0;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]
				SU->TxEnable = 0;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	705a      	strb	r2, [r3, #1]
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	2000013e 	.word	0x2000013e
 80028a0:	2000013d 	.word	0x2000013d

080028a4 <SoftUartRxDataBitProcess>:

// Soft Uart Receive Data Process
void SoftUartRxDataBitProcess(SoftUart_S *SU, uint8_t B0_1) {
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	70fb      	strb	r3, [r7, #3]
	if (SU->RxEnable) {
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	789b      	ldrb	r3, [r3, #2]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d067      	beq.n	8002988 <SoftUartRxDataBitProcess+0xe4>
		// Start
		if (SU->RxBitCounter == 0) {
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	799b      	ldrb	r3, [r3, #6]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d114      	bne.n	80028ea <SoftUartRxDataBitProcess+0x46>
			// Start Bit is 0
			if (B0_1)
 80028c0:	78fb      	ldrb	r3, [r7, #3]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d15f      	bne.n	8002986 <SoftUartRxDataBitProcess+0xe2>
				return;

			SU->RxBitShift = 0;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	715a      	strb	r2, [r3, #5]
			SU->RxBitCounter++;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	799b      	ldrb	r3, [r3, #6]
 80028d0:	3301      	adds	r3, #1
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	719a      	strb	r2, [r3, #6]
			SU->Buffer->Rx[SU->RxIndex] = 0;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	7a52      	ldrb	r2, [r2, #9]
 80028e0:	4413      	add	r3, r2
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2020 	strb.w	r2, [r3, #32]
 80028e8:	e04e      	b.n	8002988 <SoftUartRxDataBitProcess+0xe4>
		}
		// Data
		else if (SU->RxBitCounter < (SoftUart_DATA_LEN + 1)) {
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	799b      	ldrb	r3, [r3, #6]
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d826      	bhi.n	8002940 <SoftUartRxDataBitProcess+0x9c>
			SU->Buffer->Rx[SU->RxIndex] |= ((B0_1 & 0x01) << SU->RxBitShift);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	7a52      	ldrb	r2, [r2, #9]
 80028fa:	4413      	add	r3, r2
 80028fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002900:	b25a      	sxtb	r2, r3
 8002902:	78fb      	ldrb	r3, [r7, #3]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	7949      	ldrb	r1, [r1, #5]
 800290c:	408b      	lsls	r3, r1
 800290e:	b25b      	sxtb	r3, r3
 8002910:	4313      	orrs	r3, r2
 8002912:	b258      	sxtb	r0, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	7a52      	ldrb	r2, [r2, #9]
 800291c:	4611      	mov	r1, r2
 800291e:	b2c2      	uxtb	r2, r0
 8002920:	440b      	add	r3, r1
 8002922:	f883 2020 	strb.w	r2, [r3, #32]
			SU->RxBitCounter++;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	799b      	ldrb	r3, [r3, #6]
 800292a:	3301      	adds	r3, #1
 800292c:	b2da      	uxtb	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	719a      	strb	r2, [r3, #6]
			SU->RxBitShift++;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	795b      	ldrb	r3, [r3, #5]
 8002936:	3301      	adds	r3, #1
 8002938:	b2da      	uxtb	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	715a      	strb	r2, [r3, #5]
 800293e:	e023      	b.n	8002988 <SoftUartRxDataBitProcess+0xe4>
		}
		// Parity
		else if (SU->RxBitCounter < SoftUart_IDEF_LEN_C1) {
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	799b      	ldrb	r3, [r3, #6]
 8002944:	2b08      	cmp	r3, #8
 8002946:	d806      	bhi.n	8002956 <SoftUartRxDataBitProcess+0xb2>
			// Need to be check
			// B0_1;
			SU->RxBitCounter++;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	799b      	ldrb	r3, [r3, #6]
 800294c:	3301      	adds	r3, #1
 800294e:	b2da      	uxtb	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	719a      	strb	r2, [r3, #6]
 8002954:	e018      	b.n	8002988 <SoftUartRxDataBitProcess+0xe4>
		}
		// Stop & Complete
		else if (SU->RxBitCounter < SoftUart_IDEF_LEN_C2) {
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	799b      	ldrb	r3, [r3, #6]
 800295a:	2b09      	cmp	r3, #9
 800295c:	d814      	bhi.n	8002988 <SoftUartRxDataBitProcess+0xe4>
			SU->RxBitCounter = 0;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	719a      	strb	r2, [r3, #6]
			SU->RxTimingFlag = 0;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	779a      	strb	r2, [r3, #30]

			//Stop Bit must be 1
			if (B0_1) {
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00b      	beq.n	8002988 <SoftUartRxDataBitProcess+0xe4>
				// Received successfully
				// Change RX Buffer Index
				if ((SU->RxIndex) < (SoftUartRxBufferSize - 1))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	7a5b      	ldrb	r3, [r3, #9]
 8002974:	2b3e      	cmp	r3, #62	@ 0x3e
 8002976:	d807      	bhi.n	8002988 <SoftUartRxDataBitProcess+0xe4>
					(SU->RxIndex)++;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	7a5b      	ldrb	r3, [r3, #9]
 800297c:	3301      	adds	r3, #1
 800297e:	b2da      	uxtb	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	725a      	strb	r2, [r3, #9]
 8002984:	e000      	b.n	8002988 <SoftUartRxDataBitProcess+0xe4>
				return;
 8002986:	bf00      	nop
			}
			// if not : ERROR -> Overwrite data
		}
	}
}
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <SoftUartPuts>:
	while (SUart[SoftUartNumber].TxNComplated)
		;
}

// Copy Data to Transmit Buffer and Start Sending
SoftUartState_E SoftUartPuts(uint8_t SoftUartNumber, uint8_t *Data, uint8_t Len) {
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	6039      	str	r1, [r7, #0]
 800299e:	71fb      	strb	r3, [r7, #7]
 80029a0:	4613      	mov	r3, r2
 80029a2:	71bb      	strb	r3, [r7, #6]
	int i;

	if (SoftUartNumber >= Number_Of_SoftUarts)
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <SoftUartPuts+0x1a>
		return SoftUart_Error;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e03d      	b.n	8002a2a <SoftUartPuts+0x96>
	if (SUart[SoftUartNumber].TxNComplated)
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	4a21      	ldr	r2, [pc, #132]	@ (8002a38 <SoftUartPuts+0xa4>)
 80029b2:	015b      	lsls	r3, r3, #5
 80029b4:	4413      	add	r3, r2
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <SoftUartPuts+0x2e>
		return SoftUart_Error;
 80029be:	2301      	movs	r3, #1
 80029c0:	e033      	b.n	8002a2a <SoftUartPuts+0x96>

	SUart[SoftUartNumber].TxIndex = 0;
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002a38 <SoftUartPuts+0xa4>)
 80029c6:	015b      	lsls	r3, r3, #5
 80029c8:	4413      	add	r3, r2
 80029ca:	3307      	adds	r3, #7
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]
	SUart[SoftUartNumber].TxSize = Len;
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	4a19      	ldr	r2, [pc, #100]	@ (8002a38 <SoftUartPuts+0xa4>)
 80029d4:	015b      	lsls	r3, r3, #5
 80029d6:	4413      	add	r3, r2
 80029d8:	3308      	adds	r3, #8
 80029da:	79ba      	ldrb	r2, [r7, #6]
 80029dc:	701a      	strb	r2, [r3, #0]

	for (i = 0; i < Len; i++) {
 80029de:	2300      	movs	r3, #0
 80029e0:	60fb      	str	r3, [r7, #12]
 80029e2:	e010      	b.n	8002a06 <SoftUartPuts+0x72>
		SUart[SoftUartNumber].Buffer->Tx[i] = Data[i];
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	4413      	add	r3, r2
 80029ea:	79fa      	ldrb	r2, [r7, #7]
 80029ec:	4912      	ldr	r1, [pc, #72]	@ (8002a38 <SoftUartPuts+0xa4>)
 80029ee:	0152      	lsls	r2, r2, #5
 80029f0:	440a      	add	r2, r1
 80029f2:	320c      	adds	r2, #12
 80029f4:	6812      	ldr	r2, [r2, #0]
 80029f6:	7819      	ldrb	r1, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4413      	add	r3, r2
 80029fc:	460a      	mov	r2, r1
 80029fe:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < Len; i++) {
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	3301      	adds	r3, #1
 8002a04:	60fb      	str	r3, [r7, #12]
 8002a06:	79bb      	ldrb	r3, [r7, #6]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	dbea      	blt.n	80029e4 <SoftUartPuts+0x50>
	}

	SUart[SoftUartNumber].TxNComplated = 1;
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	4a09      	ldr	r2, [pc, #36]	@ (8002a38 <SoftUartPuts+0xa4>)
 8002a12:	015b      	lsls	r3, r3, #5
 8002a14:	4413      	add	r3, r2
 8002a16:	2201      	movs	r2, #1
 8002a18:	701a      	strb	r2, [r3, #0]
	SUart[SoftUartNumber].TxEnable = 1;
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	4a06      	ldr	r2, [pc, #24]	@ (8002a38 <SoftUartPuts+0xa4>)
 8002a1e:	015b      	lsls	r3, r3, #5
 8002a20:	4413      	add	r3, r2
 8002a22:	3301      	adds	r3, #1
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]

	return SoftUart_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	200000bc 	.word	0x200000bc

08002a3c <SoftUartScanRxPorts>:

// Capture RX and Get BitOffset
uint8_t SoftUartScanRxPorts(void) {
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
	int i;
	uint8_t Buffer = 0x00, Bit;
 8002a42:	2300      	movs	r3, #0
 8002a44:	70fb      	strb	r3, [r7, #3]

	for (i = 0; i < Number_Of_SoftUarts; i++) {
 8002a46:	2300      	movs	r3, #0
 8002a48:	607b      	str	r3, [r7, #4]
 8002a4a:	e050      	b.n	8002aee <SoftUartScanRxPorts+0xb2>
		// Read RX GPIO Value
		Bit = SoftUartGpioReadPin(SUart[i].RxPort, SUart[i].RxPin);
 8002a4c:	4a2c      	ldr	r2, [pc, #176]	@ (8002b00 <SoftUartScanRxPorts+0xc4>)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	015b      	lsls	r3, r3, #5
 8002a52:	4413      	add	r3, r2
 8002a54:	3318      	adds	r3, #24
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4929      	ldr	r1, [pc, #164]	@ (8002b00 <SoftUartScanRxPorts+0xc4>)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	015b      	lsls	r3, r3, #5
 8002a5e:	440b      	add	r3, r1
 8002a60:	331c      	adds	r3, #28
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	4619      	mov	r1, r3
 8002a66:	4610      	mov	r0, r2
 8002a68:	f7ff fdb0 	bl	80025cc <SoftUartGpioReadPin>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	70bb      	strb	r3, [r7, #2]

		// Starting conditions
		if (!SUart[i].RxBitCounter && !SUart[i].RxTimingFlag && !Bit) {
 8002a70:	4a23      	ldr	r2, [pc, #140]	@ (8002b00 <SoftUartScanRxPorts+0xc4>)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	015b      	lsls	r3, r3, #5
 8002a76:	4413      	add	r3, r2
 8002a78:	3306      	adds	r3, #6
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d127      	bne.n	8002ad0 <SoftUartScanRxPorts+0x94>
 8002a80:	4a1f      	ldr	r2, [pc, #124]	@ (8002b00 <SoftUartScanRxPorts+0xc4>)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	015b      	lsls	r3, r3, #5
 8002a86:	4413      	add	r3, r2
 8002a88:	331e      	adds	r3, #30
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d11f      	bne.n	8002ad0 <SoftUartScanRxPorts+0x94>
 8002a90:	78bb      	ldrb	r3, [r7, #2]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d11c      	bne.n	8002ad0 <SoftUartScanRxPorts+0x94>
			// Save RX Bit Offset
			// Calculate middle position of data puls
			SUart[i].RxBitOffset = ((SU_Timer + 2) % 5);
 8002a96:	4b1b      	ldr	r3, [pc, #108]	@ (8002b04 <SoftUartScanRxPorts+0xc8>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	1c9a      	adds	r2, r3, #2
 8002a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002b08 <SoftUartScanRxPorts+0xcc>)
 8002aa0:	fb83 1302 	smull	r1, r3, r3, r2
 8002aa4:	1059      	asrs	r1, r3, #1
 8002aa6:	17d3      	asrs	r3, r2, #31
 8002aa8:	1ac9      	subs	r1, r1, r3
 8002aaa:	460b      	mov	r3, r1
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	1ad1      	subs	r1, r2, r3
 8002ab2:	b2c9      	uxtb	r1, r1
 8002ab4:	4a12      	ldr	r2, [pc, #72]	@ (8002b00 <SoftUartScanRxPorts+0xc4>)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	015b      	lsls	r3, r3, #5
 8002aba:	4413      	add	r3, r2
 8002abc:	331f      	adds	r3, #31
 8002abe:	460a      	mov	r2, r1
 8002ac0:	701a      	strb	r2, [r3, #0]

			// Timing Offset is Set
			SUart[i].RxTimingFlag = 1;
 8002ac2:	4a0f      	ldr	r2, [pc, #60]	@ (8002b00 <SoftUartScanRxPorts+0xc4>)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	015b      	lsls	r3, r3, #5
 8002ac8:	4413      	add	r3, r2
 8002aca:	331e      	adds	r3, #30
 8002acc:	2201      	movs	r2, #1
 8002ace:	701a      	strb	r2, [r3, #0]
		}

		// Add all RX GPIO State to Buffer
		Buffer |= ((Bit & 0x01) << i);
 8002ad0:	78bb      	ldrb	r3, [r7, #2]
 8002ad2:	f003 0201 	and.w	r2, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	b25a      	sxtb	r2, r3
 8002ade:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	b25b      	sxtb	r3, r3
 8002ae6:	70fb      	strb	r3, [r7, #3]
	for (i = 0; i < Number_Of_SoftUarts; i++) {
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3301      	adds	r3, #1
 8002aec:	607b      	str	r3, [r7, #4]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	ddab      	ble.n	8002a4c <SoftUartScanRxPorts+0x10>
	}
	return Buffer;
 8002af4:	78fb      	ldrb	r3, [r7, #3]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	200000bc 	.word	0x200000bc
 8002b04:	2000013c 	.word	0x2000013c
 8002b08:	66666667 	.word	0x66666667

08002b0c <SoftUartHandler>:

// SoftUartHandler must call in interrupt every 0.2*(1/BR)
// if BR=9600 then 0.2*(1/9600)=20.8333333 uS
void SoftUartHandler(void) {
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
	int i;
	uint8_t SU_DBuffer;

	// Capture RX and Get BitOffset
	SU_DBuffer = SoftUartScanRxPorts();
 8002b12:	f7ff ff93 	bl	8002a3c <SoftUartScanRxPorts>
 8002b16:	4603      	mov	r3, r0
 8002b18:	70fb      	strb	r3, [r7, #3]

	for (i = 0; i < Number_Of_SoftUarts; i++) {
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	607b      	str	r3, [r7, #4]
 8002b1e:	e01c      	b.n	8002b5a <SoftUartHandler+0x4e>
		// Receive Data if we in middle data pulse position
		if (SUart[i].RxBitOffset == SU_Timer) {
 8002b20:	4a23      	ldr	r2, [pc, #140]	@ (8002bb0 <SoftUartHandler+0xa4>)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	015b      	lsls	r3, r3, #5
 8002b26:	4413      	add	r3, r2
 8002b28:	331f      	adds	r3, #31
 8002b2a:	781a      	ldrb	r2, [r3, #0]
 8002b2c:	4b21      	ldr	r3, [pc, #132]	@ (8002bb4 <SoftUartHandler+0xa8>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d10e      	bne.n	8002b54 <SoftUartHandler+0x48>
			SoftUartRxDataBitProcess(&SUart[i], ((SU_DBuffer >> i) & 0x01));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	015b      	lsls	r3, r3, #5
 8002b3a:	4a1d      	ldr	r2, [pc, #116]	@ (8002bb0 <SoftUartHandler+0xa4>)
 8002b3c:	1898      	adds	r0, r3, r2
 8002b3e:	78fa      	ldrb	r2, [r7, #3]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	fa42 f303 	asr.w	r3, r2, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	4619      	mov	r1, r3
 8002b50:	f7ff fea8 	bl	80028a4 <SoftUartRxDataBitProcess>
	for (i = 0; i < Number_Of_SoftUarts; i++) {
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3301      	adds	r3, #1
 8002b58:	607b      	str	r3, [r7, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	dddf      	ble.n	8002b20 <SoftUartHandler+0x14>
		}
	}

	// Sending always happens in the first time slot
	if (SU_Timer == 0) {
 8002b60:	4b14      	ldr	r3, [pc, #80]	@ (8002bb4 <SoftUartHandler+0xa8>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10f      	bne.n	8002b8a <SoftUartHandler+0x7e>
		// Transmit Data
		for (i = 0; i < Number_Of_SoftUarts; i++) {
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	607b      	str	r3, [r7, #4]
 8002b6e:	e009      	b.n	8002b84 <SoftUartHandler+0x78>
			SoftUartTxProcess(&SUart[i]);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	015b      	lsls	r3, r3, #5
 8002b74:	4a0e      	ldr	r2, [pc, #56]	@ (8002bb0 <SoftUartHandler+0xa4>)
 8002b76:	4413      	add	r3, r2
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff fdf1 	bl	8002760 <SoftUartTxProcess>
		for (i = 0; i < Number_Of_SoftUarts; i++) {
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3301      	adds	r3, #1
 8002b82:	607b      	str	r3, [r7, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	ddf2      	ble.n	8002b70 <SoftUartHandler+0x64>
		}
	}

	// Timing process
	SU_Timer++;
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb4 <SoftUartHandler+0xa8>)
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	3301      	adds	r3, #1
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	4b07      	ldr	r3, [pc, #28]	@ (8002bb4 <SoftUartHandler+0xa8>)
 8002b96:	701a      	strb	r2, [r3, #0]
	if (SU_Timer >= 5)
 8002b98:	4b06      	ldr	r3, [pc, #24]	@ (8002bb4 <SoftUartHandler+0xa8>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d902      	bls.n	8002ba8 <SoftUartHandler+0x9c>
		SU_Timer = 0;
 8002ba2:	4b04      	ldr	r3, [pc, #16]	@ (8002bb4 <SoftUartHandler+0xa8>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	701a      	strb	r2, [r3, #0]
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	200000bc 	.word	0x200000bc
 8002bb4:	2000013c 	.word	0x2000013c

08002bb8 <setRegisterGCONF>:

#include "softuart.h"

// 设置寄存器GCONF
RegisterGlobalConfig register_gconf;
void setRegisterGCONF(uint8_t uart_instance) {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	71fb      	strb	r3, [r7, #7]
	// 设置特定位
	register_gconf.i_scale_analog = 1;           // 使用外部VREF
 8002bc2:	4a1e      	ldr	r2, [pc, #120]	@ (8002c3c <setRegisterGCONF+0x84>)
 8002bc4:	7813      	ldrb	r3, [r2, #0]
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	7013      	strb	r3, [r2, #0]
	register_gconf.internal_rsense = 0;          // 使用外部感应电阻
 8002bcc:	4a1b      	ldr	r2, [pc, #108]	@ (8002c3c <setRegisterGCONF+0x84>)
 8002bce:	7813      	ldrb	r3, [r2, #0]
 8002bd0:	f36f 0341 	bfc	r3, #1, #1
 8002bd4:	7013      	strb	r3, [r2, #0]
	register_gconf.enable_spread_cycle = 0;      // StealthChop 模式
 8002bd6:	4a19      	ldr	r2, [pc, #100]	@ (8002c3c <setRegisterGCONF+0x84>)
 8002bd8:	7813      	ldrb	r3, [r2, #0]
 8002bda:	f36f 0382 	bfc	r3, #2, #1
 8002bde:	7013      	strb	r3, [r2, #0]
	register_gconf.shaft = 0;                    // 正常电机方向
 8002be0:	4a16      	ldr	r2, [pc, #88]	@ (8002c3c <setRegisterGCONF+0x84>)
 8002be2:	7813      	ldrb	r3, [r2, #0]
 8002be4:	f36f 03c3 	bfc	r3, #3, #1
 8002be8:	7013      	strb	r3, [r2, #0]
	register_gconf.index_otpw = 0;               // INDEX 显示序列发生器的第一个微步位置
 8002bea:	4a14      	ldr	r2, [pc, #80]	@ (8002c3c <setRegisterGCONF+0x84>)
 8002bec:	7813      	ldrb	r3, [r2, #0]
 8002bee:	f36f 1304 	bfc	r3, #4, #1
 8002bf2:	7013      	strb	r3, [r2, #0]
	register_gconf.index_step = 0;               // 根据 index_otpw 的选择
 8002bf4:	4a11      	ldr	r2, [pc, #68]	@ (8002c3c <setRegisterGCONF+0x84>)
 8002bf6:	7813      	ldrb	r3, [r2, #0]
 8002bf8:	f36f 1345 	bfc	r3, #5, #1
 8002bfc:	7013      	strb	r3, [r2, #0]
	register_gconf.pdn_disable = 1;              // 禁用 PDN_UART 输入功能
 8002bfe:	4a0f      	ldr	r2, [pc, #60]	@ (8002c3c <setRegisterGCONF+0x84>)
 8002c00:	7813      	ldrb	r3, [r2, #0]
 8002c02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c06:	7013      	strb	r3, [r2, #0]
	register_gconf.mstep_reg_select = 1;         // 使用 MRES 寄存器选择微步分辨率
 8002c08:	4a0c      	ldr	r2, [pc, #48]	@ (8002c3c <setRegisterGCONF+0x84>)
 8002c0a:	7813      	ldrb	r3, [r2, #0]
 8002c0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c10:	7013      	strb	r3, [r2, #0]
	register_gconf.multistep_filt = 1;           // 启用步进脉冲过滤
 8002c12:	4a0a      	ldr	r2, [pc, #40]	@ (8002c3c <setRegisterGCONF+0x84>)
 8002c14:	7853      	ldrb	r3, [r2, #1]
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	7053      	strb	r3, [r2, #1]
	register_gconf.test_mode = 0;                // 正常操作模式
 8002c1c:	4a07      	ldr	r2, [pc, #28]	@ (8002c3c <setRegisterGCONF+0x84>)
 8002c1e:	7853      	ldrb	r3, [r2, #1]
 8002c20:	f36f 0341 	bfc	r3, #1, #1
 8002c24:	7053      	strb	r3, [r2, #1]
	write_register(uart_instance, ADDRESS_GCONF, register_gconf.bytes);
 8002c26:	4b05      	ldr	r3, [pc, #20]	@ (8002c3c <setRegisterGCONF+0x84>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 f8b2 	bl	8002d98 <write_register>
}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20000140 	.word	0x20000140

08002c40 <setRegisterIHOLDIRUN>:

// 设置寄存器IHOLD_IRUN
// irun>=16时堵转检测数值不稳定
RegisterCurrent register_iholdirun;
void setRegisterIHOLDIRUN(uint8_t uart_instance) {
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	71fb      	strb	r3, [r7, #7]
	register_iholdirun.bytes = 0;
 8002c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c80 <setRegisterIHOLDIRUN+0x40>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
	// 取值0-31
	register_iholdirun.ihold = 16;
 8002c50:	4a0b      	ldr	r2, [pc, #44]	@ (8002c80 <setRegisterIHOLDIRUN+0x40>)
 8002c52:	7813      	ldrb	r3, [r2, #0]
 8002c54:	2110      	movs	r1, #16
 8002c56:	f361 0304 	bfi	r3, r1, #0, #5
 8002c5a:	7013      	strb	r3, [r2, #0]
	register_iholdirun.irun = 15;
 8002c5c:	4a08      	ldr	r2, [pc, #32]	@ (8002c80 <setRegisterIHOLDIRUN+0x40>)
 8002c5e:	7853      	ldrb	r3, [r2, #1]
 8002c60:	210f      	movs	r1, #15
 8002c62:	f361 0304 	bfi	r3, r1, #0, #5
 8002c66:	7053      	strb	r3, [r2, #1]
	write_register(uart_instance, ADDRESS_IHOLD_IRUN, register_iholdirun.bytes);
 8002c68:	4b05      	ldr	r3, [pc, #20]	@ (8002c80 <setRegisterIHOLDIRUN+0x40>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	2110      	movs	r1, #16
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 f891 	bl	8002d98 <write_register>

}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000144 	.word	0x20000144

08002c84 <setRegisterCOOLCONF>:

// 设置寄存器COOLCONF
// 在速度semin以下启用低电流，semax以上禁用低电流
// semin = 1，semax = 0：低速时（semin = 1）启用低电流，其他任何速度禁用低电流
RegisterCoolConfig register_coolconf;
void setRegisterCOOLCONF(uint8_t uart_instance) {
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	71fb      	strb	r3, [r7, #7]
	register_coolconf.bytes=0;
 8002c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc0 <setRegisterCOOLCONF+0x3c>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
	// 取值0-15
	register_coolconf.semin = 1; // lower_threshold: min = 1, max = 15
 8002c94:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc0 <setRegisterCOOLCONF+0x3c>)
 8002c96:	7813      	ldrb	r3, [r2, #0]
 8002c98:	2101      	movs	r1, #1
 8002c9a:	f361 0303 	bfi	r3, r1, #0, #4
 8002c9e:	7013      	strb	r3, [r2, #0]
	register_coolconf.semax = 0;  // upper_threshold: min = 0, max = 15, 0-2 recommended
 8002ca0:	4a07      	ldr	r2, [pc, #28]	@ (8002cc0 <setRegisterCOOLCONF+0x3c>)
 8002ca2:	7853      	ldrb	r3, [r2, #1]
 8002ca4:	f36f 0303 	bfc	r3, #0, #4
 8002ca8:	7053      	strb	r3, [r2, #1]
	write_register(uart_instance, ADDRESS_COOLCONF, register_coolconf.bytes);
 8002caa:	4b05      	ldr	r3, [pc, #20]	@ (8002cc0 <setRegisterCOOLCONF+0x3c>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	2142      	movs	r1, #66	@ 0x42
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 f870 	bl	8002d98 <write_register>
}
 8002cb8:	bf00      	nop
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	20000148 	.word	0x20000148

08002cc4 <setRegisterCHOPCONF>:

// 设置寄存器CHOPCONF
RegisterChopperConfig register_chopconf;
void setRegisterCHOPCONF(uint8_t uart_instance) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	71fb      	strb	r3, [r7, #7]
	register_chopconf.bytes = 0x10000053;
 8002cce:	4b15      	ldr	r3, [pc, #84]	@ (8002d24 <setRegisterCHOPCONF+0x60>)
 8002cd0:	4a15      	ldr	r2, [pc, #84]	@ (8002d28 <setRegisterCHOPCONF+0x64>)
 8002cd2:	601a      	str	r2, [r3, #0]
	register_chopconf.tbl = 0b10;
 8002cd4:	4a13      	ldr	r2, [pc, #76]	@ (8002d24 <setRegisterCHOPCONF+0x60>)
 8002cd6:	6813      	ldr	r3, [r2, #0]
 8002cd8:	2102      	movs	r1, #2
 8002cda:	f361 33d0 	bfi	r3, r1, #15, #2
 8002cde:	6013      	str	r3, [r2, #0]
	register_chopconf.hend = 0;
 8002ce0:	4a10      	ldr	r2, [pc, #64]	@ (8002d24 <setRegisterCHOPCONF+0x60>)
 8002ce2:	8813      	ldrh	r3, [r2, #0]
 8002ce4:	f36f 13ca 	bfc	r3, #7, #4
 8002ce8:	8013      	strh	r3, [r2, #0]
	register_chopconf.hstart = 5;
 8002cea:	4a0e      	ldr	r2, [pc, #56]	@ (8002d24 <setRegisterCHOPCONF+0x60>)
 8002cec:	7813      	ldrb	r3, [r2, #0]
 8002cee:	2105      	movs	r1, #5
 8002cf0:	f361 1306 	bfi	r3, r1, #4, #3
 8002cf4:	7013      	strb	r3, [r2, #0]
	register_chopconf.toff = 3;
 8002cf6:	4a0b      	ldr	r2, [pc, #44]	@ (8002d24 <setRegisterCHOPCONF+0x60>)
 8002cf8:	7813      	ldrb	r3, [r2, #0]
 8002cfa:	2103      	movs	r1, #3
 8002cfc:	f361 0303 	bfi	r3, r1, #0, #4
 8002d00:	7013      	strb	r3, [r2, #0]
	// 微步细分
	register_chopconf.mres = MRES_002;
 8002d02:	4a08      	ldr	r2, [pc, #32]	@ (8002d24 <setRegisterCHOPCONF+0x60>)
 8002d04:	78d3      	ldrb	r3, [r2, #3]
 8002d06:	2107      	movs	r1, #7
 8002d08:	f361 0303 	bfi	r3, r1, #0, #4
 8002d0c:	70d3      	strb	r3, [r2, #3]
	write_register(uart_instance, ADDRESS_CHOPCONF, register_chopconf.bytes);
 8002d0e:	4b05      	ldr	r3, [pc, #20]	@ (8002d24 <setRegisterCHOPCONF+0x60>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	216c      	movs	r1, #108	@ 0x6c
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 f83e 	bl	8002d98 <write_register>
}
 8002d1c:	bf00      	nop
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	2000014c 	.word	0x2000014c
 8002d28:	10000053 	.word	0x10000053

08002d2c <setRegisterTCOOLTHRS>:

// 寄存器TCOOLTHRS
// CoolStep 和 StallGuard 功能的下限速度阈值，当电机的速度超过这个阈值时，CoolStep 和 StallGuard 功能将被启用
RegisterTCOOLTHRS register_tcoolthrs;
void setRegisterTCOOLTHRS(uint8_t uart_instance){
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	71fb      	strb	r3, [r7, #7]
	register_tcoolthrs.bytes = 0;
 8002d36:	4b0a      	ldr	r3, [pc, #40]	@ (8002d60 <setRegisterTCOOLTHRS+0x34>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
	register_tcoolthrs.threshold = 0xFFFF; // 设置下限速度阈值
 8002d3c:	4a08      	ldr	r2, [pc, #32]	@ (8002d60 <setRegisterTCOOLTHRS+0x34>)
 8002d3e:	6813      	ldr	r3, [r2, #0]
 8002d40:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002d44:	f361 0313 	bfi	r3, r1, #0, #20
 8002d48:	6013      	str	r3, [r2, #0]
//	register_tcoolthrs.threshold = 0xFFFFF; // 设置下限速度阈值
    write_register(uart_instance, ADDRESS_TCOOLTHRS, register_tcoolthrs.bytes);
 8002d4a:	4b05      	ldr	r3, [pc, #20]	@ (8002d60 <setRegisterTCOOLTHRS+0x34>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	2114      	movs	r1, #20
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 f820 	bl	8002d98 <write_register>
}
 8002d58:	bf00      	nop
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20000150 	.word	0x20000150

08002d64 <setRegisterSGTHRS>:

// 寄存器SGTHRS
// threshold值越小，堵转力矩越大
// threshold值与register_iholdirun.irun关联，irun>=16时堵转检测数值不稳定
RegisterSGTHRS register_sgthrs;
void setRegisterSGTHRS(uint8_t uart_instance){
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	71fb      	strb	r3, [r7, #7]
	register_sgthrs.bytes = 0;
 8002d6e:	4b09      	ldr	r3, [pc, #36]	@ (8002d94 <setRegisterSGTHRS+0x30>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
	// threshold: 0-255
//	register_sgthrs.threshold = 128; // 设置检测阈值
	register_sgthrs.threshold = 64; // 设置检测阈值
 8002d74:	4b07      	ldr	r3, [pc, #28]	@ (8002d94 <setRegisterSGTHRS+0x30>)
 8002d76:	2240      	movs	r2, #64	@ 0x40
 8002d78:	701a      	strb	r2, [r3, #0]
    write_register(uart_instance, ADDRESS_SGTHRS, register_sgthrs.bytes);
 8002d7a:	4b06      	ldr	r3, [pc, #24]	@ (8002d94 <setRegisterSGTHRS+0x30>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	2140      	movs	r1, #64	@ 0x40
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 f807 	bl	8002d98 <write_register>
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20000154 	.word	0x20000154

08002d98 <write_register>:

// 写寄存器
void write_register(uint8_t uart_instance, uint8_t register_address, uint32_t data) {
 8002d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d9a:	b08b      	sub	sp, #44	@ 0x2c
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	603a      	str	r2, [r7, #0]
 8002da2:	71fb      	strb	r3, [r7, #7]
 8002da4:	460b      	mov	r3, r1
 8002da6:	71bb      	strb	r3, [r7, #6]

	WriteReadReplyDatagram write_datagram;
	write_datagram.bytes = 0;
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	write_datagram.sync = SYNC;
 8002db4:	7e3b      	ldrb	r3, [r7, #24]
 8002db6:	2205      	movs	r2, #5
 8002db8:	f362 0303 	bfi	r3, r2, #0, #4
 8002dbc:	763b      	strb	r3, [r7, #24]
	write_datagram.serial_address = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	767b      	strb	r3, [r7, #25]
	write_datagram.register_address = register_address;
 8002dc2:	79bb      	ldrb	r3, [r7, #6]
 8002dc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	7ebb      	ldrb	r3, [r7, #26]
 8002dcc:	f362 0306 	bfi	r3, r2, #0, #7
 8002dd0:	76bb      	strb	r3, [r7, #26]
	write_datagram.rw = RW_WRITE;
 8002dd2:	7ebb      	ldrb	r3, [r7, #26]
 8002dd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dd8:	76bb      	strb	r3, [r7, #26]
	write_datagram.data = reverseData(data);
 8002dda:	6838      	ldr	r0, [r7, #0]
 8002ddc:	f000 f848 	bl	8002e70 <reverseData>
 8002de0:	4603      	mov	r3, r0
 8002de2:	f8c7 301b 	str.w	r3, [r7, #27]

	uint8_t buffer_crc[WRITE_READ_REPLY_DATAGRAM_SIZE];
	memcpy(buffer_crc, &write_datagram.bytes, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8002de6:	f107 0310 	add.w	r3, r7, #16
 8002dea:	f107 0218 	add.w	r2, r7, #24
 8002dee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002df2:	e883 0003 	stmia.w	r3, {r0, r1}
	write_datagram.crc = calculate_crc(buffer_crc, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8002df6:	f107 0310 	add.w	r3, r7, #16
 8002dfa:	2108      	movs	r1, #8
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 f861 	bl	8002ec4 <calculate_crc>
 8002e02:	4603      	mov	r3, r0
 8002e04:	77fb      	strb	r3, [r7, #31]

	uint8_t buffer[WRITE_READ_REPLY_DATAGRAM_SIZE];

	for (uint8_t i = 0; i < WRITE_READ_REPLY_DATAGRAM_SIZE; ++i) {
 8002e06:	2300      	movs	r3, #0
 8002e08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002e0c:	e01e      	b.n	8002e4c <write_register+0xb4>
		buffer[i] = (write_datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8002e0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e12:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002e16:	00c9      	lsls	r1, r1, #3
 8002e18:	f1c1 0620 	rsb	r6, r1, #32
 8002e1c:	f1a1 0020 	sub.w	r0, r1, #32
 8002e20:	fa22 f401 	lsr.w	r4, r2, r1
 8002e24:	fa03 f606 	lsl.w	r6, r3, r6
 8002e28:	4334      	orrs	r4, r6
 8002e2a:	fa23 f000 	lsr.w	r0, r3, r0
 8002e2e:	4304      	orrs	r4, r0
 8002e30:	fa23 f501 	lsr.w	r5, r3, r1
 8002e34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e38:	b2e2      	uxtb	r2, r4
 8002e3a:	3328      	adds	r3, #40	@ 0x28
 8002e3c:	443b      	add	r3, r7
 8002e3e:	f803 2c20 	strb.w	r2, [r3, #-32]
	for (uint8_t i = 0; i < WRITE_READ_REPLY_DATAGRAM_SIZE; ++i) {
 8002e42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e46:	3301      	adds	r3, #1
 8002e48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e50:	2b07      	cmp	r3, #7
 8002e52:	d9dc      	bls.n	8002e0e <write_register+0x76>
	}

	TMC2209_sendRawMessage(uart_instance, buffer, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8002e54:	f107 0108 	add.w	r1, r7, #8
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	2208      	movs	r2, #8
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 f9d3 	bl	8003208 <TMC2209_sendRawMessage>
	HAL_Delay(10);
 8002e62:	200a      	movs	r0, #10
 8002e64:	f7fd ffe2 	bl	8000e2c <HAL_Delay>

}
 8002e68:	bf00      	nop
 8002e6a:	372c      	adds	r7, #44	@ 0x2c
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e70 <reverseData>:

// 反转32位数据
uint32_t reverseData(uint32_t data) {
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	uint32_t reversed_data = 0;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < DATA_SIZE; ++i) {
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	72fb      	strb	r3, [r7, #11]
 8002e80:	e016      	b.n	8002eb0 <reverseData+0x40>
		uint8_t right_shift = (DATA_SIZE - i - 1) * BITS_PER_BYTE;
 8002e82:	7afb      	ldrb	r3, [r7, #11]
 8002e84:	f1c3 0303 	rsb	r3, r3, #3
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	72bb      	strb	r3, [r7, #10]
		uint8_t left_shift = i * BITS_PER_BYTE;
 8002e8e:	7afb      	ldrb	r3, [r7, #11]
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	727b      	strb	r3, [r7, #9]
		reversed_data |= ((data >> right_shift) & BYTE_MAX_VALUE) << left_shift;
 8002e94:	7abb      	ldrb	r3, [r7, #10]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	fa22 f303 	lsr.w	r3, r2, r3
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	7a7b      	ldrb	r3, [r7, #9]
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < DATA_SIZE; ++i) {
 8002eaa:	7afb      	ldrb	r3, [r7, #11]
 8002eac:	3301      	adds	r3, #1
 8002eae:	72fb      	strb	r3, [r7, #11]
 8002eb0:	7afb      	ldrb	r3, [r7, #11]
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d9e5      	bls.n	8002e82 <reverseData+0x12>
	}
	return reversed_data;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <calculate_crc>:

// CRC8 calculation function
uint8_t calculate_crc(unsigned char *datagram, size_t length) {
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
	unsigned char crc = 0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	75fb      	strb	r3, [r7, #23]

	for (size_t i = 0; i < length - 1; i++) {
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	e027      	b.n	8002f28 <calculate_crc+0x64>
		unsigned char byte = datagram[i];
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4413      	add	r3, r2
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	73fb      	strb	r3, [r7, #15]

		for (int j = 0; j < 8; j++) {
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	e019      	b.n	8002f1c <calculate_crc+0x58>
			if (((crc >> 7) ^ (byte & 0x01)) != 0) {
 8002ee8:	7dfb      	ldrb	r3, [r7, #23]
 8002eea:	09db      	lsrs	r3, r3, #7
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	461a      	mov	r2, r3
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d007      	beq.n	8002f0a <calculate_crc+0x46>
				crc = ((crc << 1) ^ 0x07) & 0xFF;
 8002efa:	7dfb      	ldrb	r3, [r7, #23]
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	b25b      	sxtb	r3, r3
 8002f00:	f083 0307 	eor.w	r3, r3, #7
 8002f04:	b25b      	sxtb	r3, r3
 8002f06:	75fb      	strb	r3, [r7, #23]
 8002f08:	e002      	b.n	8002f10 <calculate_crc+0x4c>
			} else {
				crc = (crc << 1) & 0xFF;
 8002f0a:	7dfb      	ldrb	r3, [r7, #23]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	75fb      	strb	r3, [r7, #23]
			}

			// Shift byte to process next bit
			byte = byte >> 1;
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	085b      	lsrs	r3, r3, #1
 8002f14:	73fb      	strb	r3, [r7, #15]
		for (int j = 0; j < 8; j++) {
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	60bb      	str	r3, [r7, #8]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2b07      	cmp	r3, #7
 8002f20:	dde2      	ble.n	8002ee8 <calculate_crc+0x24>
	for (size_t i = 0; i < length - 1; i++) {
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	3301      	adds	r3, #1
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d3d2      	bcc.n	8002ed8 <calculate_crc+0x14>
		}
	}
	return crc;
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	371c      	adds	r7, #28
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <motors_define>:

// 初始化多个电机
StepperMotorControl motors[];
void motors_define() {
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
	// Motor 0
	motors[0].targetSteps = 0;
 8002f44:	4b24      	ldr	r3, [pc, #144]	@ (8002fd8 <motors_define+0x98>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
	motors[0].currentSteps = 0;
 8002f4a:	4b23      	ldr	r3, [pc, #140]	@ (8002fd8 <motors_define+0x98>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	605a      	str	r2, [r3, #4]
	motors[0].speed = 0;
 8002f50:	4b21      	ldr	r3, [pc, #132]	@ (8002fd8 <motors_define+0x98>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	609a      	str	r2, [r3, #8]
	motors[0].timsCounter = 0;
 8002f56:	4b20      	ldr	r3, [pc, #128]	@ (8002fd8 <motors_define+0x98>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	60da      	str	r2, [r3, #12]
	motors[0].direction = 1;
 8002f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002fd8 <motors_define+0x98>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	741a      	strb	r2, [r3, #16]
	motors[0].isActive = 0;
 8002f62:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd8 <motors_define+0x98>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	745a      	strb	r2, [r3, #17]

	motors[0].port_en = GPIOC;
 8002f68:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd8 <motors_define+0x98>)
 8002f6a:	4a1c      	ldr	r2, [pc, #112]	@ (8002fdc <motors_define+0x9c>)
 8002f6c:	615a      	str	r2, [r3, #20]
	motors[0].pin_en = GPIO_PIN_15;
 8002f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd8 <motors_define+0x98>)
 8002f70:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002f74:	831a      	strh	r2, [r3, #24]
	motors[0].port_dir = GPIOC;
 8002f76:	4b18      	ldr	r3, [pc, #96]	@ (8002fd8 <motors_define+0x98>)
 8002f78:	4a18      	ldr	r2, [pc, #96]	@ (8002fdc <motors_define+0x9c>)
 8002f7a:	61da      	str	r2, [r3, #28]
	motors[0].pin_dir = GPIO_PIN_13;
 8002f7c:	4b16      	ldr	r3, [pc, #88]	@ (8002fd8 <motors_define+0x98>)
 8002f7e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f82:	841a      	strh	r2, [r3, #32]
	motors[0].port_step = GPIOC;
 8002f84:	4b14      	ldr	r3, [pc, #80]	@ (8002fd8 <motors_define+0x98>)
 8002f86:	4a15      	ldr	r2, [pc, #84]	@ (8002fdc <motors_define+0x9c>)
 8002f88:	625a      	str	r2, [r3, #36]	@ 0x24
	motors[0].pin_step = GPIO_PIN_14;
 8002f8a:	4b13      	ldr	r3, [pc, #76]	@ (8002fd8 <motors_define+0x98>)
 8002f8c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f90:	851a      	strh	r2, [r3, #40]	@ 0x28
	motors[0].port_uart = GPIOE;
 8002f92:	4b11      	ldr	r3, [pc, #68]	@ (8002fd8 <motors_define+0x98>)
 8002f94:	4a12      	ldr	r2, [pc, #72]	@ (8002fe0 <motors_define+0xa0>)
 8002f96:	62da      	str	r2, [r3, #44]	@ 0x2c
	motors[0].pin_uart = GPIO_PIN_6;
 8002f98:	4b0f      	ldr	r3, [pc, #60]	@ (8002fd8 <motors_define+0x98>)
 8002f9a:	2240      	movs	r2, #64	@ 0x40
 8002f9c:	861a      	strh	r2, [r3, #48]	@ 0x30
	motors[0].uart_index = 0;
 8002f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd8 <motors_define+0x98>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	865a      	strh	r2, [r3, #50]	@ 0x32

	// Motor 1
	motors[1].targetSteps = 0;
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd8 <motors_define+0x98>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	635a      	str	r2, [r3, #52]	@ 0x34
	motors[1].currentSteps = 0;
 8002faa:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd8 <motors_define+0x98>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	639a      	str	r2, [r3, #56]	@ 0x38
	motors[1].speed = 0;
 8002fb0:	4b09      	ldr	r3, [pc, #36]	@ (8002fd8 <motors_define+0x98>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	63da      	str	r2, [r3, #60]	@ 0x3c
	motors[1].timsCounter = 0;
 8002fb6:	4b08      	ldr	r3, [pc, #32]	@ (8002fd8 <motors_define+0x98>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	641a      	str	r2, [r3, #64]	@ 0x40
	motors[1].direction = 1;
 8002fbc:	4b06      	ldr	r3, [pc, #24]	@ (8002fd8 <motors_define+0x98>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	motors[1].isActive = 0;
 8002fc4:	4b04      	ldr	r3, [pc, #16]	@ (8002fd8 <motors_define+0x98>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
//	motors[5].port_step = GPIOD;
//	motors[5].pin_step = GPIO_PIN_2;
//	motors[5].port_uart = GPIOD;
//	motors[5].pin_uart = GPIO_PIN_0;
//	motors[5].uart_index = 0;
}
 8002fcc:	bf00      	nop
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	20000158 	.word	0x20000158
 8002fdc:	40020800 	.word	0x40020800
 8002fe0:	40021000 	.word	0x40021000

08002fe4 <motors_driver_setup>:

// 初始化电机驱动
void motors_driver_setup(void) {
 8002fe4:	b590      	push	{r4, r7, lr}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af02      	add	r7, sp, #8
	for (size_t i = 0; i < NUM_MOTORS; ++i) {
 8002fea:	2300      	movs	r3, #0
 8002fec:	607b      	str	r3, [r7, #4]
 8002fee:	e068      	b.n	80030c2 <motors_driver_setup+0xde>
		// 初始化电机的 UART 端口
		SoftUartInit(motors[i].uart_index, motors[i].port_uart, motors[i].pin_uart, NULL, 0);
 8002ff0:	4a38      	ldr	r2, [pc, #224]	@ (80030d4 <motors_driver_setup+0xf0>)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2134      	movs	r1, #52	@ 0x34
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3332      	adds	r3, #50	@ 0x32
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	b2d8      	uxtb	r0, r3
 8003002:	4a34      	ldr	r2, [pc, #208]	@ (80030d4 <motors_driver_setup+0xf0>)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2134      	movs	r1, #52	@ 0x34
 8003008:	fb01 f303 	mul.w	r3, r1, r3
 800300c:	4413      	add	r3, r2
 800300e:	332c      	adds	r3, #44	@ 0x2c
 8003010:	6819      	ldr	r1, [r3, #0]
 8003012:	4a30      	ldr	r2, [pc, #192]	@ (80030d4 <motors_driver_setup+0xf0>)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2434      	movs	r4, #52	@ 0x34
 8003018:	fb04 f303 	mul.w	r3, r4, r3
 800301c:	4413      	add	r3, r2
 800301e:	3330      	adds	r3, #48	@ 0x30
 8003020:	881a      	ldrh	r2, [r3, #0]
 8003022:	2300      	movs	r3, #0
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	2300      	movs	r3, #0
 8003028:	f7ff faf2 	bl	8002610 <SoftUartInit>

		setRegisterGCONF(motors[i].uart_index);
 800302c:	4a29      	ldr	r2, [pc, #164]	@ (80030d4 <motors_driver_setup+0xf0>)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2134      	movs	r1, #52	@ 0x34
 8003032:	fb01 f303 	mul.w	r3, r1, r3
 8003036:	4413      	add	r3, r2
 8003038:	3332      	adds	r3, #50	@ 0x32
 800303a:	881b      	ldrh	r3, [r3, #0]
 800303c:	b2db      	uxtb	r3, r3
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff fdba 	bl	8002bb8 <setRegisterGCONF>
		setRegisterIHOLDIRUN(motors[i].uart_index);
 8003044:	4a23      	ldr	r2, [pc, #140]	@ (80030d4 <motors_driver_setup+0xf0>)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2134      	movs	r1, #52	@ 0x34
 800304a:	fb01 f303 	mul.w	r3, r1, r3
 800304e:	4413      	add	r3, r2
 8003050:	3332      	adds	r3, #50	@ 0x32
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fdf2 	bl	8002c40 <setRegisterIHOLDIRUN>
		setRegisterCOOLCONF(motors[i].uart_index);
 800305c:	4a1d      	ldr	r2, [pc, #116]	@ (80030d4 <motors_driver_setup+0xf0>)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2134      	movs	r1, #52	@ 0x34
 8003062:	fb01 f303 	mul.w	r3, r1, r3
 8003066:	4413      	add	r3, r2
 8003068:	3332      	adds	r3, #50	@ 0x32
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	b2db      	uxtb	r3, r3
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fe08 	bl	8002c84 <setRegisterCOOLCONF>
		setRegisterCHOPCONF(motors[i].uart_index);
 8003074:	4a17      	ldr	r2, [pc, #92]	@ (80030d4 <motors_driver_setup+0xf0>)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2134      	movs	r1, #52	@ 0x34
 800307a:	fb01 f303 	mul.w	r3, r1, r3
 800307e:	4413      	add	r3, r2
 8003080:	3332      	adds	r3, #50	@ 0x32
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff fe1c 	bl	8002cc4 <setRegisterCHOPCONF>

		setRegisterTCOOLTHRS(motors[i].uart_index);
 800308c:	4a11      	ldr	r2, [pc, #68]	@ (80030d4 <motors_driver_setup+0xf0>)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2134      	movs	r1, #52	@ 0x34
 8003092:	fb01 f303 	mul.w	r3, r1, r3
 8003096:	4413      	add	r3, r2
 8003098:	3332      	adds	r3, #50	@ 0x32
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fe44 	bl	8002d2c <setRegisterTCOOLTHRS>
		setRegisterSGTHRS(motors[i].uart_index);
 80030a4:	4a0b      	ldr	r2, [pc, #44]	@ (80030d4 <motors_driver_setup+0xf0>)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2134      	movs	r1, #52	@ 0x34
 80030aa:	fb01 f303 	mul.w	r3, r1, r3
 80030ae:	4413      	add	r3, r2
 80030b0:	3332      	adds	r3, #50	@ 0x32
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff fe54 	bl	8002d64 <setRegisterSGTHRS>
	for (size_t i = 0; i < NUM_MOTORS; ++i) {
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3301      	adds	r3, #1
 80030c0:	607b      	str	r3, [r7, #4]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d093      	beq.n	8002ff0 <motors_driver_setup+0xc>

	}
}
 80030c8:	bf00      	nop
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd90      	pop	{r4, r7, pc}
 80030d2:	bf00      	nop
 80030d4:	20000158 	.word	0x20000158

080030d8 <TMC2209_startStepperMotor>:

// 启动特定编号的电机
void TMC2209_startStepperMotor(uint8_t motorIndex, uint32_t steps, uint32_t speed, int8_t direction) {
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
 80030e2:	461a      	mov	r2, r3
 80030e4:	4603      	mov	r3, r0
 80030e6:	73fb      	strb	r3, [r7, #15]
 80030e8:	4613      	mov	r3, r2
 80030ea:	73bb      	strb	r3, [r7, #14]
	if (motorIndex < NUM_MOTORS) {
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d137      	bne.n	8003162 <TMC2209_startStepperMotor+0x8a>
		StepperMotorControl *motor = &motors[motorIndex];
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	2234      	movs	r2, #52	@ 0x34
 80030f6:	fb02 f303 	mul.w	r3, r2, r3
 80030fa:	4a1c      	ldr	r2, [pc, #112]	@ (800316c <TMC2209_startStepperMotor+0x94>)
 80030fc:	4413      	add	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]
		motor->targetSteps = steps;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	601a      	str	r2, [r3, #0]
		motor->currentSteps = 0;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2200      	movs	r2, #0
 800310a:	605a      	str	r2, [r3, #4]
		motor->speed = (speed > 100) ? 100 : ((speed < 0) ? 0 : speed); // 约束 speed 在 [0, 100] 范围内
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b64      	cmp	r3, #100	@ 0x64
 8003110:	bf28      	it	cs
 8003112:	2364      	movcs	r3, #100	@ 0x64
 8003114:	461a      	mov	r2, r3
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	609a      	str	r2, [r3, #8]
		motor->timsCounter = 100 * SPEED_STEP_DIVISION / motor->speed;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003122:	fbb2 f2f3 	udiv	r2, r2, r3
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	60da      	str	r2, [r3, #12]
		motor->direction = direction;
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	7bba      	ldrb	r2, [r7, #14]
 800312e:	741a      	strb	r2, [r3, #16]
		motor->isActive = 1;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	2201      	movs	r2, #1
 8003134:	745a      	strb	r2, [r3, #17]

		// 设置使能信号
		HAL_GPIO_WritePin(motor->port_en, motor->pin_en, GPIO_PIN_RESET);
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	6958      	ldr	r0, [r3, #20]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	8b1b      	ldrh	r3, [r3, #24]
 800313e:	2200      	movs	r2, #0
 8003140:	4619      	mov	r1, r3
 8003142:	f7fe f95d 	bl	8001400 <HAL_GPIO_WritePin>

		// 设置初始方向
		HAL_GPIO_WritePin(motor->port_dir, motor->pin_dir, (direction > 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	69d8      	ldr	r0, [r3, #28]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	8c19      	ldrh	r1, [r3, #32]
 800314e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003152:	2b00      	cmp	r3, #0
 8003154:	bfcc      	ite	gt
 8003156:	2301      	movgt	r3, #1
 8003158:	2300      	movle	r3, #0
 800315a:	b2db      	uxtb	r3, r3
 800315c:	461a      	mov	r2, r3
 800315e:	f7fe f94f 	bl	8001400 <HAL_GPIO_WritePin>
	}
}
 8003162:	bf00      	nop
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	20000158 	.word	0x20000158

08003170 <TMC2209_stepHandler>:

// 定时器周期结束回调函数
void TMC2209_stepHandler(void) {
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < NUM_MOTORS; ++i) {
 8003176:	2300      	movs	r3, #0
 8003178:	71fb      	strb	r3, [r7, #7]
 800317a:	e03b      	b.n	80031f4 <TMC2209_stepHandler+0x84>
		// 检查电机状态
		StepperMotorControl *motor = &motors[i];
 800317c:	79fb      	ldrb	r3, [r7, #7]
 800317e:	2234      	movs	r2, #52	@ 0x34
 8003180:	fb02 f303 	mul.w	r3, r2, r3
 8003184:	4a1f      	ldr	r2, [pc, #124]	@ (8003204 <TMC2209_stepHandler+0x94>)
 8003186:	4413      	add	r3, r2
 8003188:	603b      	str	r3, [r7, #0]
		if (motor->speed == 0 || !motor->isActive) {
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d02c      	beq.n	80031ec <TMC2209_stepHandler+0x7c>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	7c5b      	ldrb	r3, [r3, #17]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d028      	beq.n	80031ec <TMC2209_stepHandler+0x7c>
			continue;
		}

		// 检查是否达到目标步数
		if (motor->currentSteps >= motor->targetSteps) {
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d303      	bcc.n	80031ae <TMC2209_stepHandler+0x3e>
			motor->isActive = 0;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2200      	movs	r2, #0
 80031aa:	745a      	strb	r2, [r3, #17]
			continue;
 80031ac:	e01f      	b.n	80031ee <TMC2209_stepHandler+0x7e>
		}

		// 检查是否应该发送脉冲
		if (motor->timsCounter == 0) {
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d114      	bne.n	80031e0 <TMC2209_stepHandler+0x70>
			// 发送脉冲信号
			HAL_GPIO_TogglePin(motor->port_step, motor->pin_step);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031be:	4619      	mov	r1, r3
 80031c0:	4610      	mov	r0, r2
 80031c2:	f7fe f936 	bl	8001432 <HAL_GPIO_TogglePin>

			// 更新步数计数器
			motor->currentSteps += 1;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	605a      	str	r2, [r3, #4]
			motor->timsCounter = 100 * SPEED_STEP_DIVISION / motor->speed;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80031d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	60da      	str	r2, [r3, #12]
		}
		motor->timsCounter -= 1;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	1e5a      	subs	r2, r3, #1
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	60da      	str	r2, [r3, #12]
 80031ea:	e000      	b.n	80031ee <TMC2209_stepHandler+0x7e>
			continue;
 80031ec:	bf00      	nop
	for (uint8_t i = 0; i < NUM_MOTORS; ++i) {
 80031ee:	79fb      	ldrb	r3, [r7, #7]
 80031f0:	3301      	adds	r3, #1
 80031f2:	71fb      	strb	r3, [r7, #7]
 80031f4:	79fb      	ldrb	r3, [r7, #7]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0c0      	beq.n	800317c <TMC2209_stepHandler+0xc>
	}
}
 80031fa:	bf00      	nop
 80031fc:	bf00      	nop
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	20000158 	.word	0x20000158

08003208 <TMC2209_sendRawMessage>:

// 软件串口发送原始消息
void TMC2209_sendRawMessage(uint8_t instance, const uint8_t *message, size_t length) {
 8003208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800320c:	b087      	sub	sp, #28
 800320e:	af00      	add	r7, sp, #0
 8003210:	4603      	mov	r3, r0
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
 8003216:	73fb      	strb	r3, [r7, #15]
 8003218:	466b      	mov	r3, sp
 800321a:	461e      	mov	r6, r3
	uint8_t tempBuffer[length];
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	460b      	mov	r3, r1
 8003220:	3b01      	subs	r3, #1
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	2300      	movs	r3, #0
 8003226:	4688      	mov	r8, r1
 8003228:	4699      	mov	r9, r3
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	f04f 0300 	mov.w	r3, #0
 8003232:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003236:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800323a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800323e:	2300      	movs	r3, #0
 8003240:	460c      	mov	r4, r1
 8003242:	461d      	mov	r5, r3
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	00eb      	lsls	r3, r5, #3
 800324e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003252:	00e2      	lsls	r2, r4, #3
 8003254:	1dcb      	adds	r3, r1, #7
 8003256:	08db      	lsrs	r3, r3, #3
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	ebad 0d03 	sub.w	sp, sp, r3
 800325e:	466b      	mov	r3, sp
 8003260:	3300      	adds	r3, #0
 8003262:	613b      	str	r3, [r7, #16]
	memcpy(tempBuffer, message, length);
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	68b9      	ldr	r1, [r7, #8]
 8003268:	6938      	ldr	r0, [r7, #16]
 800326a:	f000 f839 	bl	80032e0 <memcpy>
	SoftUartPuts(instance, tempBuffer, length);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	b2da      	uxtb	r2, r3
 8003272:	7bfb      	ldrb	r3, [r7, #15]
 8003274:	6939      	ldr	r1, [r7, #16]
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff fb8c 	bl	8002994 <SoftUartPuts>
 800327c:	46b5      	mov	sp, r6
}
 800327e:	bf00      	nop
 8003280:	371c      	adds	r7, #28
 8003282:	46bd      	mov	sp, r7
 8003284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003288 <memset>:
 8003288:	4402      	add	r2, r0
 800328a:	4603      	mov	r3, r0
 800328c:	4293      	cmp	r3, r2
 800328e:	d100      	bne.n	8003292 <memset+0xa>
 8003290:	4770      	bx	lr
 8003292:	f803 1b01 	strb.w	r1, [r3], #1
 8003296:	e7f9      	b.n	800328c <memset+0x4>

08003298 <__libc_init_array>:
 8003298:	b570      	push	{r4, r5, r6, lr}
 800329a:	4d0d      	ldr	r5, [pc, #52]	@ (80032d0 <__libc_init_array+0x38>)
 800329c:	4c0d      	ldr	r4, [pc, #52]	@ (80032d4 <__libc_init_array+0x3c>)
 800329e:	1b64      	subs	r4, r4, r5
 80032a0:	10a4      	asrs	r4, r4, #2
 80032a2:	2600      	movs	r6, #0
 80032a4:	42a6      	cmp	r6, r4
 80032a6:	d109      	bne.n	80032bc <__libc_init_array+0x24>
 80032a8:	4d0b      	ldr	r5, [pc, #44]	@ (80032d8 <__libc_init_array+0x40>)
 80032aa:	4c0c      	ldr	r4, [pc, #48]	@ (80032dc <__libc_init_array+0x44>)
 80032ac:	f000 f826 	bl	80032fc <_init>
 80032b0:	1b64      	subs	r4, r4, r5
 80032b2:	10a4      	asrs	r4, r4, #2
 80032b4:	2600      	movs	r6, #0
 80032b6:	42a6      	cmp	r6, r4
 80032b8:	d105      	bne.n	80032c6 <__libc_init_array+0x2e>
 80032ba:	bd70      	pop	{r4, r5, r6, pc}
 80032bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c0:	4798      	blx	r3
 80032c2:	3601      	adds	r6, #1
 80032c4:	e7ee      	b.n	80032a4 <__libc_init_array+0xc>
 80032c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ca:	4798      	blx	r3
 80032cc:	3601      	adds	r6, #1
 80032ce:	e7f2      	b.n	80032b6 <__libc_init_array+0x1e>
 80032d0:	0800332c 	.word	0x0800332c
 80032d4:	0800332c 	.word	0x0800332c
 80032d8:	0800332c 	.word	0x0800332c
 80032dc:	08003330 	.word	0x08003330

080032e0 <memcpy>:
 80032e0:	440a      	add	r2, r1
 80032e2:	4291      	cmp	r1, r2
 80032e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80032e8:	d100      	bne.n	80032ec <memcpy+0xc>
 80032ea:	4770      	bx	lr
 80032ec:	b510      	push	{r4, lr}
 80032ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032f6:	4291      	cmp	r1, r2
 80032f8:	d1f9      	bne.n	80032ee <memcpy+0xe>
 80032fa:	bd10      	pop	{r4, pc}

080032fc <_init>:
 80032fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fe:	bf00      	nop
 8003300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003302:	bc08      	pop	{r3}
 8003304:	469e      	mov	lr, r3
 8003306:	4770      	bx	lr

08003308 <_fini>:
 8003308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330a:	bf00      	nop
 800330c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800330e:	bc08      	pop	{r3}
 8003310:	469e      	mov	lr, r3
 8003312:	4770      	bx	lr
